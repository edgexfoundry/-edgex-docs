{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>EdgeX 2.x</p> <p>Want to know what's new in EdgeX 2.x releases (Ireland/Jakarta/etc)?  If you are already familiar with EdgeX, look for the EdgeX 2.x emoji (<code>Edgey</code> - the EdgeX mascot) throughout the documentation - like the one on this page outlining what's new in the latest 2.x releases.  These sections will give you a summary of what's new in each area of the documentation.</p> <p>EdgeX Foundry is an open source, vendor neutral, flexible, interoperable, software platform at the edge of the network, that interacts with the physical world of devices, sensors, actuators, and other IoT objects. In simple terms, EdgeX is edge middleware - serving  between physical sensing and actuating \"things\" and our information technology (IT) systems. </p> <p>The EdgeX platform enables and encourages the rapidly growing community of IoT solution providers to work together in an ecosystem of interoperable components to reduce uncertainty, accelerate time to market, and facilitate scale.</p> <p>By bringing this much-needed interoperability, EdgeX makes it easier to monitor physical world items, send instructions to them, collect data from them, move the data across the fog up to the cloud where it may be stored, aggregated, analyzed, and turned into information, actuated, and acted upon. So EdgeX enables data to travel northwards towards the cloud or enterprise and back to devices, sensors, and actuators.</p> <p>The initiative is aligned around a common goal: the simplification and standardization of the foundation for tiered edge computing architectures in the IoT market while still enabling the ecosystem to provide significant value-added differentiation.</p> <p>If you don't need further description and want to immediately use EdgeX Foundry use this link: Getting Started Guide</p>"},{"location":"#edgex-foundry-use-cases","title":"EdgeX Foundry Use Cases","text":"<p>Originally built to support industrial IoT needs, EdgeX today is used in a variety of use cases to include:</p> <ul> <li>Building automation \u2013 helping to manage shared workspace facilities</li> <li>Oil/gas \u2013 closed loop control of a gas supply valve</li> <li>Retail \u2013 multi-sensor reconciliation for loss prevention at the point of sale</li> <li>Water treatment \u2013 monitor and control chemical dosing</li> <li>Consumer IoT \u2013 the open source HomeEdge project is using elements of EdgeX as part of its smart home platform</li> </ul>"},{"location":"#edgex-foundry-architectural-tenets","title":"EdgeX Foundry Architectural Tenets","text":"<p>EdgeX Foundry was conceived with the following tenets guiding the overall architecture:</p> <ul> <li> <p>EdgeX Foundry must be platform agnostic with regard to</p> <ul> <li>Hardware (x86, ARM)</li> <li>Operating system (Linux, Windows, MacOS, ...)</li> <li>Distribution  (allowing for the distribution of functionality through micro services at the edge, on a gateway, in the fog, on cloud, etc.)</li> <li>Deployment/orchestration (Docker, Snaps, K8s, roll-your-own, ... )</li> <li>Protocols (north or south side protocols)</li> </ul> </li> <li> <p>EdgeX Foundry must be extremely flexible</p> <ul> <li>Any part of the platform may be upgraded, replaced or augmented by other micro services or software components</li> <li>Allow services to scale up and down based on device capability and use case </li> </ul> </li> <li> <p>EdgeX Foundry should provide \"reference implementation\" services but encourages best of breed solutions</p> </li> <li> <p>EdgeX Foundry must provide for store and forward capability</p> <ul> <li>To support disconnected/remote edge systems</li> <li>To deal with intermittent connectivity</li> </ul> </li> <li> <p>EdgeX Foundry must support and facilitate \"intelligence\" moving closer to the edge in order to address</p> <ul> <li>Actuation latency concerns</li> <li>Bandwidth and storage concerns </li> <li>Operating remotely concerns</li> </ul> </li> <li> <p>EdgeX Foundry must support brown and green device/sensor field deployments</p> </li> <li> <p>EdgeX Foundry must be secure and easily managed</p> </li> </ul>"},{"location":"#deployments","title":"Deployments","text":"<p>EdgeX was originally built by Dell to run on its IoT gateways. While EdgeX can and does run on gateways, its platform agnostic nature and micro service architecture enables tiered distributed deployments.  In other words, a single instance of EdgeX\u2019s micro services can be distributed across several host platforms.  The host platform for one or many EdgeX micro services is called a node.  This allows EdgeX to leverage compute, storage, and network resources wherever they live on the edge.</p> <p>Its loosely-coupled architecture enables distribution across nodes to enable tiered edge computing.  For example, thing communicating services could run on a programmable logic controller (PLC), a gateway, or be embedded in smarter sensors while other EdgeX services are deployed on networked servers or even in the cloud.   The scope of a deployment could therefore include embedded sensors, controllers, edge gateways, servers and cloud systems.</p> <p> EdgeX micro services can be deployed across an array of compute nodes to maximize resources while at the same time position more processing intelligence closer to the physical edge.  The number and the function of particular micro services deployed on a given node depends on the use case and capability of the hardware and infrastructure.</p>"},{"location":"#apache-2-license","title":"Apache 2 License","text":"<p>EdgeX is distributed under Apache 2 License backed by the Apache Foundation.  Apache 2 licensing is very friendly (\u201cpermissive\u201d) to open and commercial interests.  It allows users to use the software for any purpose.  It allows users to distribute, modify or even fork the code base without seeking permission from the founding project.  It allows users to change or extend the code base without having to contribute back to the founding project.  It even allows users to build commercial products without concerns for profit sharing or royalties to go back to the Linux Foundation or open source project organization.</p>"},{"location":"#edgex-foundry-service-layers","title":"EdgeX Foundry Service Layers","text":"<p>EdgeX Foundry is a collection of open source micro services. These micro services are organized into 4 service layers, and 2 underlying augmenting system services. The Service Layers traverse from the edge of the physical realm (from the Device Services Layer), to the edge of the information realm (that of the Application Services Layer), with the Core and Supporting Services Layers at the center.</p> <p>The 4 Service Layers of EdgeX Foundry are as follows:</p> <ul> <li>Core Services Layer</li> <li>Supporting Services Layer</li> <li>Application Services Layer</li> <li>Device Services Layer</li> </ul> <p>The 2 underlying System Services of EdgeX Foundry are as follows:</p> <ul> <li>Security</li> <li>System Management </li> </ul>"},{"location":"#core-services-layer","title":"Core Services Layer","text":"<p>Core services provide the intermediary between the north and south sides of EdgeX.  As the name of these services implies, they are \u201ccore\u201d to EdgeX functionality.  Core services is where most of the innate knowledge of what \u201cthings\u201d are connected, what data is flowing through, and how EdgeX is configured resides in an EdgeX instance.  Core consists of the following micro services:</p> <ul> <li>Core data: a persistence repository and associated management service for data collected from south side objects.</li> <li>Command: a service that facilitates and controls actuation requests from the north side to the south side.</li> <li>Metadata: a repository and associated management service of metadata about the objects that are connected to EdgeX Foundry. Metadata provides the capability to provision new devices and pair them with their owning device services.</li> <li>Registry and Configuration: provides other EdgeX Foundry micro services with information about associated services within EdgeX Foundry and micro services configuration properties (i.e. - a repository of initialization values).</li> </ul> <p>Core services provide intermediary communications between the things and the IT systems.</p>"},{"location":"#supporting-services-layer","title":"Supporting Services Layer","text":"<p>The supporting services encompass a wide range of micro services to include edge analytics (also known as local analytics). Normal software application duties such as scheduler, and data clean up (also known as scrubbing in EdgeX) are performed by micro services in the supporting services layer.</p> <p>These services often require some amount of core services in order to function.  In all cases, supporting service can be considered optional \u2013 that is they can be left out of an EdgeX deployment depending on use case needs and system resources.</p> <p>Supporting services include:</p> <ul> <li>Rules Engine:  the reference implementation edge analytics service that performs if-then conditional actuation at the edge based on sensor data collected by the EdgeX instance.  This service may be replaced or augmented by use case specific analytics capability.</li> <li>Scheduler:  an internal EdgeX \u201cclock\u201d that can kick off operations in any EdgeX service.  At a configuration specified time, the service will call on any EdgeX service API URL via REST to trigger an operation.  For example, the scheduler service periodically calls on core data APIs to clean up old sensed events that have been successfully exported out of EdgeX.</li> <li>Alerts and Notifications:  provides EdgeX services with a central facility to send out an alert or notification.  These are notices sent to another system or to a person monitoring the EdgeX instance (internal service communications are often handled more directly).</li> </ul>"},{"location":"#application-services-layer","title":"Application Services Layer","text":"<p>Application services are the means to extract, process/transform and send sensed data from EdgeX to an endpoint or process of your choice.  EdgeX today offers application service examples to send data to many of the major cloud providers (Amazon IoT Hub, Google IoT Core, Azure IoT Hub, IBM Watson IoT\u2026), to MQTT(s) topics, and HTTP(s) REST endpoints.</p> <p>Application services are based on the idea of a \"functions pipeline\". A functions pipeline is a collection of functions that process messages (in this case EdgeX event messages) in the order specified. The first function in a pipeline is a trigger. A trigger begins the functions pipeline execution. A trigger, for example, is something like a message landing in a message queue.  Each function then acts on the message.  Common functions include filtering, transformation (i.e. to XML or JSON), compression, and encryption functions.  The function pipeline ends when the message has gone through all the functions and is set to a sink.  Putting the resulting message into an MQTT topic to be sent to Azure or AWS is an example of a sink completing an application service.</p>"},{"location":"#device-services-layer","title":"Device Services Layer","text":"<p>Device services connect \u201cthings\u201d \u2013 that is sensors and devices \u2013 into the rest of EdgeX.</p> <p>Device services are the edge connectors interacting with the \"things\" that include, but are not limited to: alarm systems, heating and air conditioning systems in homes and office buildings, lights, machines in any industry, irrigation systems, drones, currently automated transit such as some rail systems, currently automated factories, and appliances in your home. In the future, this may include driverless cars and trucks, traffic signals, fully automated fast food facilities, fully automated self-serve grocery stores, devices taking medical readings from patients, etc.</p> <p>Device services may service one or a number of things or devices (sensor, actuator, etc.) at one time. A device that a device service manages, could be something other than a simple, single, physical device.  The device could be another gateway (and all of that gateway's devices), a device manager, a device aggregator that acts as a device, or collection of devices, to EdgeX Foundry.</p> <p>The device service communicates with the devices, sensors, actuators, and other IoT objects through protocols native to each device object. The device service converts the data produced and communicated by the IoT object into a common EdgeX Foundry data structure, and sends that converted data into the core services layer, and to other micro services in other layers of EdgeX Foundry.</p> <p>EdgeX comes with a number of device services speaking many common IoT protocols such as Modbus, BACnet, MQTT, etc.</p>"},{"location":"#system-services-layer","title":"System Services Layer","text":"<p>Security Infrastructure </p> <p>Security elements of EdgeX Foundry protect the data and control of devices, sensors, and other IoT objects managed by EdgeX Foundry. Based on the fact that EdgeX is a \"vendor-neutral open source software platform at the edge of the network\", the EdgeX security features are also built on a foundation of open interfaces and pluggable, replaceable modules.</p> <p>There are two major EdgeX security components.</p> <ul> <li>A security store, which is used to provide a safe place to keep the EdgeX secrets.  Examples of EdgeX secrets are the database access passwords used by the other services and tokens to connect to cloud systems. </li> <li>An API gateway serves as the reverse proxy to restrict access to EdgeX REST resources and perform access control related works. </li> </ul> <p>System Management </p> <p>System Management facilities provide the central point of contact for external management systems to start/stop/restart EdgeX services, get the status/health of a service, or get metrics on the EdgeX services (such as memory usage) so that the EdgeX services can be monitored.</p>"},{"location":"#software-development-kits-sdks","title":"Software Development Kits (SDKs)","text":"<p>Two types of SDKs are provided by EdgeX to assist in creating north and south side services \u2013 specifically to create application services and device services.  SDKs for both the north and south side services make connecting new things or new cloud/enterprise systems easier by providing developers all the scaffolding code that takes care of the basic operations of the service.  Thereby allowing developers to focus on specifics of their connectivity to the south or north side object without worrying about all the raw plumbing of a micro service.</p> <p>SDKs are language specific; meaning an SDK is written to create services in a particular programming language.  Today, EdgeX offers the following SDKs:</p> <ul> <li>Golang Device Service SDK</li> <li>C Device Service SDK</li> <li>Golang Application Functions SDK</li> </ul>"},{"location":"#how-edgex-works","title":"How EdgeX Works","text":""},{"location":"#sensor-data-collection","title":"Sensor Data Collection","text":"<p>EdgeX\u2019s primary job is to collect data from sensors and devices and make that data available to north side applications and systems.  Data is collected from a sensor by a device service that speaks the protocol of that device.  Example: a Modbus device service would communicate in Modbus to get a pressure reading from a Modbus pump.  The device service translates the sensor data into an EdgeX event object.  The device service can then either:</p> <ol> <li> <p>put the event object on a message bus (which may be implemented via Redis Streams or MQTT).  Subscribers to the event message on the message bus can be application services or core data or both (see step 1.1 below).</p> <p></p> </li> <li> <p>send the event object to the core data service via REST communications (see step 1.2).</p> <p></p> </li> </ol> <p>When core data receives the event (either via message bus or REST), it persists the sensor data in the local edge database.  EdgeX uses Redis as our persistence store.  There is an abstraction in place to allow you to use another database (which has allowed other databases to be used in the past).  Persistence is not required and can be turned off.  Data is persisted in EdgeX at the edge for two basics reasons:</p> <ul> <li>Edge nodes are not always connected.  During periods of disconnected operations, the sensor data must be saved so that it can be transmitted northbound when connectivity is restored.  This is referred to as store and forward capability.</li> <li>In some cases, analytics of sensor data needs to look back in history in order to understand the trend and to make the right decision based on that history.  If a sensor reports that it is 72\u00b0 F right now, you might want to know what the temperature was ten minutes ago before you make a decision to adjust a heating or cooling system.  If the temperature was 85\u00b0 F, you may decide that adjustments to lower the room temperature you made ten minutes ago were sufficient to cool the room.  It is the context of historical data that are important to local analytic decisions.</li> </ul> <p>When core data receives event objects from the device service via REST, it will put sensor data events on a message topic destined for application services.  Redis Pub/Sub is used as the messaging infrastructure by default (step 2).  MQTT or ZMQ can also be used as the messaging infrastructure between core data and the application services.</p> <p></p> <p>The application service transforms the data as needed and pushes the data to an endpoint.  It can also filter, enrich, compress, encrypt or perform other functions on the event before sending it to the endpoint (step 3).  The endpoint could be an HTTP/S endpoint, an MQTT topic, a cloud system (cloud topic), etc.</p> <p></p>"},{"location":"#edge-analytics-and-actuation","title":"Edge Analytics and Actuation","text":"<p>In edge computing, simply collecting sensor data is only part of the job of an edge platform like EdgeX.  Another important job of an edge platform is to be able to:</p> <ul> <li>Analyze the incoming sensor data locally</li> <li>Act quickly on that analysis Edge or local analytics is the processing that performs an assessment of the sensor data collected at the edge (\u201clocally\u201d) and triggers actuations or actions based on what it sees.</li> </ul> <p>Why edge analytics?  Local analytics are important for two reasons:</p> <ul> <li>Some decisions cannot afford to wait for sensor collected data to be fed back to an enterprise or cloud system and have a response returned.</li> <li>Additionally, some edge systems are not always connected to the enterprise or cloud \u2013 they have intermittent periods of connectivity.</li> </ul> <p>Local analytics allows systems to operate independently, at least for some stretches of time.  For example: a shipping container\u2019s cooling system must be able to make decisions locally without the benefit of Internet connectivity for long periods of time when the ship is at sea.  Local analytics also allow a system to act quickly in a low latent fashion when critical to system operations.  As an extreme case, imagine that your car\u2019s airbag fired on the basis of data being sent to the cloud and analyzed for collisions.  Your car has local analytics to prevent such a potentially slow and error prone delivery of the safety actuation in your automobile.  </p> <p>EdgeX is built to act locally on data it collects from the edge.  In other words, events are processed by local analytics and can be used to trigger action back down on a sensor/device.</p> <p>Just as application services prepare data for consumption by north side cloud systems or applications, application services can process and get EdgeX events (and the sensor data they contain) to any analytics package (see step 4).  By default, EdgeX ships with a simple rules engine (the default EdgeX rules engine is eKuiper \u2013 an open source rules engine and now a sister project in LF Edge).  Your own analytics package (or ML agent) could replace or augment the local rules engine.</p> <p></p> <p>The analytic package can explore the sensor event data and make a decision to trigger actuation of a device.  For example, it could check that the pressure reading of an engine is greater than 60 PSI.  When such a rule is determined to be true, the analytic package calls on the core command service to trigger some action, like \u201copen a valve\u201d on some controllable device (see step 5).</p> <p></p> <p>The core command service gets the actuation request and determines which device it needs to act on with the request; then calling on the owning device service to do the actuation (see step 6).  Core command allows developers to put additional security measures or checks in place before actuating.</p> <p></p> <p>The device service receives the request for actuation, translates that into a protocol specific request and forwards the request to the desired device (see step 7).</p> <p></p>"},{"location":"#project-release-cadence","title":"Project Release Cadence","text":"<p>Typically, EdgeX releases twice a year; once in the spring and once in the fall.  Bug fix releases may occur more often.  Each EdgeX release has a code name.  The code name follows an alphabetic pattern similar to Android (code names sequentially follow the alphabet).</p> <p>The code name of each release is named after some geographical location in the world.  The honor of naming an EdgeX release is given to a community member deemed to have contributed significantly to the project.  A release also has a version number.  The release version follows sematic versioning to indicate the release is major or minor in scope.  Major releases typically contain significant new features and functionality and are not always backward compatible with prior releases.  Minor releases are backward compatible and usually contain bug fixes and fewer new features.  See the project Wiki for more information on releases, versions and patches.</p> Release Schedule Version Barcelona Oct 2017 0.5.0 California Jun 2017 0.6.0 Delhi Oct 2018 0.7.0 Edinburgh Jul 2019 1.0.0 Fuji Nov 2019 1.1.0 Geneva May 2020 1.2.0 Hanoi November 2020 1.3.0 Ireland Spring 2021 2.0.0 Jakarta Fall 2021 2.1.0 Kamukura Spring 2022 TBD Levski Fall 2022 TBD <p>Note: minor releases of the Device Services and Application Services (along with their associated SDKs) can be release independently.  Graphical User Interface, the command line interface (CLI) and other tools can be released independently.</p> <p>EdgeX community members convene in a meeting right at the time of a release to plan the next release and roadmap future releases.</p> <p>See the Project Wiki for more detailed information on releases and roadmap.</p> <p>EdgeX 2.0</p>"},{"location":"#the-ireland-release","title":"The Ireland Release","text":"<p>The Ireland release, available June 2021, is the second major version of EdgeX.  Highlights of the 2.0 release include:</p> <ul> <li>A new and improved set of service APIs, which eliminate a lot of technical debt and setting EdgeX up for new features in the future (such as allowing for more message based communications)</li> <li>Direct device service to application service communications via message bus (bypassing core data if desired or allowing it to be a secondary subscriber) </li> <li>Simplified device profiles</li> <li>Improved security</li> <li>New, improved and more comprehensive graphical user interface (for development and demonstration purposes)</li> <li>New device services for CoAP, GPIO, and LLRP (RFID protocol)</li> <li>An LLRP inventory application service</li> <li>Improved application service capability and functions (to include new filter functions)</li> <li>Cleaner/simpler Docker image naming and facilities to create custom Docker Compose files</li> </ul> <p>EdgeX 2.0 provides adopters with a platform that</p> <ul> <li>Has an improved API that addresses edge application needs of today and tomorrow</li> <li>Is more efficient and lighter (depending on use case)</li> <li>Is more reliable and offers better quality of service (less REST, more messaging and incorporating a number of bug fixes)</li> <li>Has eliminated a lot of technical debt accumulated over 4 years</li> </ul>"},{"location":"#edgex-history-and-naming","title":"EdgeX History and Naming","text":"<p>EdgeX Foundry began as a project chartered by Dell IoT Marketing and developed by the Dell Client Office of the CTO as an incubation project called Project Fuse in July 2015.  It was initially created to run as the IoT software application on Dell\u2019s introductory line of IoT gateways. Dell entered the project into open source through the Linux Foundation on April 24, 2017. EdgeX was formally announced and demonstrated at Hanover Messe 2017.  Hanover Messe is one of the world's largest industrial trade fairs.  At the fair, the Linux Foundation also announced the association of 50 founding member organizations \u2013 the EdgeX ecosystem \u2013 to help further the project and the goals of creating a universal edge platform.</p> <p>The name \u2018foundry\u2019 was used to draw parallels to Cloud Foundry.  EdgeX Foundry is meant to be a foundry for solutions at the edge just like Cloud Foundry is a foundry for solutions in the cloud.  Cloud Foundry was originated by VMWare (Dell Technologies is a major shareholder of VMWare - recall that Dell Technologies was the original creator of EdgeX).  The \u2018X\u2019 in EdgeX represents the transformational aspects of the platform and allows the project name to be trademarked and to be used in efforts such as certification and certification marks.</p> <p></p> <p>The EdgeX Foundry Logo represents the nature of its role as transformation engine between the physical OT world and the digital IT world.</p> <p>The EdgeX community selected the octopus as the mascot or \u201cspirit animal\u201d of the project at its inception.  Its eight arms and the suckers on the arms represent the sensors.  The sensors bring the data into the octopus.  Actually, the octopus has nine brains in a way.  It has millions of neurons running down each arm; functioning as mini-brains in each of those arms.  The arms of the octopus serve as \u201clocal analytics\u201d like that offered by EdgeX.  The mascot is affectionately called \u201cEdgey\u201d by the community.</p> <p></p>"},{"location":"V2TopLevelMigration/","title":"V2 Migration Guide","text":"<p>EdgeX 2.0</p> <p>Many backward breaking changes occurred in the EdgeX 2.0 (Ireland) release which may require some migration depending on your use case.</p> <p>This section describes how to migrate from V1 to V2  at a high level and refers the reader to the appropriate detail documents. The areas to consider for migrating are:</p> <ul> <li>Custom Compose File</li> <li>Database</li> <li>Custom Configuration</li> <li>Custom Device Service</li> <li>Custom Device Profile</li> <li>Custom Pre-Defined Device</li> <li>Custom Applications Service</li> <li>Security</li> <li>eKuiper Rules</li> </ul>"},{"location":"V2TopLevelMigration/#custom-compose-file","title":"Custom Compose File","text":"<p>The compose files for V2 have many changes from their V1 counter parts. If you have customized a V1 compose file to add additional services and/or add or modify configuration overrides,  it is highly recommended that you start with the appropriate V2 compose file and re-add your customizations. It is very likely that the sections for your additional services will need to be migrated to have the proper environment overrides. Best approach is to use one of the V2 service sections that closest matches your service  as a template.</p> <p>The latest V2 compose files can be found here: https://github.com/edgexfoundry/edgex-compose/tree/ireland</p>"},{"location":"V2TopLevelMigration/#compose-builder","title":"Compose Builder","text":"<p>If the add on service(s) in your custom compose file are EdgeX released device or app services, it is highly recommended that you use the Compose Builder to generate your custom compose file. </p> <p>The latest V2 Compose Builder can be found here: https://github.com/edgexfoundry/edgex-compose/tree/ireland/compose-builder#readme</p>"},{"location":"V2TopLevelMigration/#database","title":"Database","text":"<p>There currently is no migration path for the data stored in the database. The V2 data collections are stored separately from the V1 data collections in the Redis database. Redis is now the only supported database, i.e. support for Mongo has been removed.</p> <p>Note</p> <p>Since the V1 data and V2 data are stored separately, one could create a migration tool and upstream it to the EdgeX community.</p> <p>Warning</p> <p>If the database is not cleared before starting the V2 services, the old V1 data will still reside in the database taking up useful memory. It is recommended that you first wipe the database clean before starting V2 Services. That is unless you create a DB migration tool, in which case you will not want to clear the V1 data until it has been migrated. See Clearing Redis Database section below for details on how to clear the Redis database.</p> <p>The following sections describe what you need to be aware for the different services that create data in the database.</p>"},{"location":"V2TopLevelMigration/#core-data","title":"Core Data","text":"<p>The Event/Reading data stored by Core Data is considered transient and of little value once it has become old. The V2 versions of these data collections will be empty until new Events/Readings are received from V2 Device Services. </p> <p>The V1 ValueDescriptors have been removed in V2.</p>"},{"location":"V2TopLevelMigration/#core-metadata","title":"Core Metadata","text":"<p>Most of the data stored by Core Metadata will be recreated when the V2 versions of the Device Services start-up. The statically declared devices will automatically be created and device discovery will find and add existing devices. Any device profiles, devices, provision watchers created manually via the V1 REST APIs will have to be recreated using the V2 REST API. Any manually-applied <code>AdministrativeState</code> settings will also need to be re-applied.</p>"},{"location":"V2TopLevelMigration/#support-notifications","title":"Support Notifications","text":"<p>Any <code>Subscriptions</code> created via the V1 REST API will have to be recreated using the V2 REST API. The <code>Notification</code> and <code>Transmission</code>collections will be empty until new notifications are sent using EdgeX 2.0 </p>"},{"location":"V2TopLevelMigration/#support-scheduler","title":"Support Scheduler","text":"<p>The statically declared <code>Interval</code> and <code>IntervalAction</code> will be created automatically. Any <code>Interval</code> and/or <code>IntervalAction</code> created via the V1 REST API will have to be recreated using the V2 REST API. If you have created a custom configuration with additional statically declared <code>Interval</code>s and <code>IntervalActions</code> see the TOML File section under Custom Configuration below.</p>"},{"location":"V2TopLevelMigration/#application-services","title":"Application Services","text":"<p>Application services use the database only when the Store and Forward capability is enabled. If you do not use this capability you can skip this section. This data collection only has data when that data could not be exported. It is recommended not to upgrade to V2 while the Store and Forward data collection is not empty or you are certain the data is no longer needed. You can determine if the Store and Forward data collection is empty by setting the Application Service's log level to <code>DEBUG</code>  and look for the following message which is logged every <code>RetryInterval</code>:</p> <pre><code>msg=\" 0 stored data items found for retrying\"\n</code></pre>"},{"location":"V2TopLevelMigration/#clearing-redis-database","title":"Clearing Redis Database","text":""},{"location":"V2TopLevelMigration/#docker","title":"Docker","text":"<p>When running EdgeX in Docker the simplest way to clear the database is to remove the <code>db-data</code> volume after stopping the V1 EdgeX services. </p> <pre><code>docker-compose -f &lt;compose-file&gt; down\ndocker volume rm $(docker volume ls -q | grep db-data)\n</code></pre> <p>Now when the V2 EdgeX services are started the database will be cleared of the old v1 data.</p>"},{"location":"V2TopLevelMigration/#snaps","title":"Snaps","text":"<p>Because there are no tools to migrate EdgeX configuration and database, it's not possible to update the edgexfoundry snap from a V1 version to a V2 version. You must remove the V1 snap first, and then install a V2 version of the snap (available from the 2.0 track in the Snap Store). This will result in starting fresh with EdgeX V2 and all V1 data removed.</p>"},{"location":"V2TopLevelMigration/#local","title":"Local","text":"<p>If you are running EdgeX locally, i.e. not in Docker or snaps and in non-secure mode you can use the Redis CLI to clear the database. The CLI would have been installed when you installed Redis locally. Run the following command to clear the database:</p> <pre><code>redis-cli FLUSHDB\n</code></pre> <p>This will not work if running EdgeX V1 in running in secure mode since you will not have the random generated Redis password unless you created an Admin password when you installed Redis.</p>"},{"location":"V2TopLevelMigration/#custom-configuration","title":"Custom Configuration","text":""},{"location":"V2TopLevelMigration/#consul","title":"Consul","text":"<p>If you have customized any EdgeX service's configuration  (core, support, device, etc.)  via Consul, those customization will need to be re-applied to those services' configuration in Consul once the V2 versions have started and pushed their configuration into Consul. The V2 services now use <code>2.0</code> in the Consul path rather than <code>1.0</code> . See the TOML File section below for details on migrating configuration for each of the EdgeX services.</p> <p>Example Consul path for V2</p> <p>.../kv/edgex/core/2.0/core-data/</p> <p>The same applies for custom device and application service once they have been migrated following the guides referenced in the Custom Device Service and Custom Applications Service sections below.</p> <p>Warning</p> <p>If the Consul data is not cleared prior to running the V2 services,  the V1 configuration will remain and be taking up useful memory.  The configuration data in Consul can be cleared by deleting the <code>.../kv/edgex/</code> node with the curl command below prior to starting EdgeX 2.0. Consul is secured in EdgeX 2.0 secure-mode which will make running  the command below require an access token if not done prior.</p> <pre><code>curl --request DELETE http://localhost:8500/v1/kv/edgex?recurse=true`\n</code></pre>"},{"location":"V2TopLevelMigration/#toml-file","title":"TOML File","text":"<p>If you have custom configuration TOML files for any EdgeX service (core, support, device, etc.) that configuration will need to be migrated. See V2 Migration of Common Configuration for the details on migrating configuration common to all EdgeX services.</p> <p>The following are where you can find the configuration migration specifics for individual core/support the services</p> <ul> <li>Core Data </li> <li>Core Metadata </li> <li>Core Command</li> <li>Support Notifications</li> <li>Support Scheduler</li> <li>System Management Agent  (DEPRECATED)</li> <li>Application Services</li> <li>Device Services (common)</li> <li>Device MQTT</li> <li>Device Camera</li> </ul>"},{"location":"V2TopLevelMigration/#custom-environment-overrides","title":"Custom Environment Overrides","text":"<p>If you have custom environment overrides for configuration impacted by the V2 changes you will also need to migrate your overrides to use the new name or value depending on what has changed. Refer to the links above and/or below for details for migration of common and/or the service specific configuration to determine if your overrides require migrating.</p>"},{"location":"V2TopLevelMigration/#custom-device-service","title":"Custom Device Service","text":"<p>If you have custom Device Services they will need to be migrated to the V2 version of the Device SDK.  See Device Service V2 Migration Guide for complete details.</p>"},{"location":"V2TopLevelMigration/#custom-device-profile","title":"Custom Device Profile","text":"<p>If you have custom V1 Device Profile(s) for one of the EdgeX Device Services they will need to be migrated to the V2 version of Device Profiles.  See Device Service V2 Migration Guide for complete details.</p>"},{"location":"V2TopLevelMigration/#custom-pre-defined-device","title":"Custom Pre-Defined Device","text":"<p>If you have custom V1 Pre-Defined Device(s) for one of the EdgeX Device Services they will need to be migrated to the V2 version of Pre-Defined Devices.  See Device Service V2 Migration Guide for complete details.</p>"},{"location":"V2TopLevelMigration/#custom-applications-service","title":"Custom Applications Service","text":"<p>If you have custom Application Services they will need to be migrated to the V2 version of the App Functions SDK. See Application Services V2 Migration Guide for complete details.</p>"},{"location":"V2TopLevelMigration/#security","title":"Security","text":""},{"location":"V2TopLevelMigration/#settings","title":"Settings","text":"<p>If you have an add-on service running in secure mode you will need to set addition security service environment variables in EdgeX V2. See Configuring Add-on Service for more details.</p>"},{"location":"V2TopLevelMigration/#api-gateway-configuration","title":"API Gateway configuration","text":"<p>The API gateway has different tools to set TLS and acquire access tokens. See Configuring API Gateway section for complete details.</p>"},{"location":"V2TopLevelMigration/#secure-consul","title":"Secure Consul","text":"<p>Consul is now secured when running EdgeX 2.0 in secured mode. See Secure Consul section for complete details.</p>"},{"location":"V2TopLevelMigration/#secured-api-gateway-admin-port","title":"Secured API Gateway Admin Port","text":"<p>The API Gateway Admin port is now secured when running EdgeX 2.0 in secured mode. See API Gateway Admin Port (TBD) section for complete details.</p>"},{"location":"V2TopLevelMigration/#ekuiper-rules","title":"eKuiper Rules","text":"<p>If you have rules defined in the eKuiper rules engine that utilize the <code>meta()</code> directive, you will need to migrate your rule(s) to use the new V2  <code>meta</code> names. The following are the <code>meta</code> names that have changed, added or removed.</p> <ul> <li>device =&gt; deviceName</li> <li>name =&gt; resourceName</li> <li>profileName (new)</li> <li>pushed (removed)</li> <li>created (removed - use origin) </li> <li>modified (removed - use origin) </li> <li>floatEncoding (removed)</li> </ul> <p>Example V1 to V2 rule migration</p> <pre><code>V1 Rule:\n{\n  \"id\": \"ruleInt64\",\n  \"sql\": \"SELECT Int64 FROM demo WHERE meta(device) = \\\"Random-Integer-Device\\\" \",\n  \"actions\": [\n    {\n      \"mqtt\": {\n        \"server\": \"tcp://edgex-mqtt-broker:1883\",\n        \"topic\": \"result\",\n        \"clientId\": \"demo_001\"\n      }\n    }\n  ]\n}\n\nV2 Rule:\n{\n  \"id\": \"ruleInt64\",\n  \"sql\": \"SELECT Int64 FROM demo WHERE meta(deviceName) = \\\"Random-Integer-Device\\\" \",\n  \"actions\": [\n    {\n      \"mqtt\": {\n        \"server\": \"tcp://edgex-mqtt-broker:1883\",\n        \"topic\": \"result\",\n        \"clientId\": \"demo_001\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/Ch-APIIntroduction/","title":"Introduction","text":"<p>Each of the EdgeX services (core, supporting, management, device and application) implement a RESTful API. This section provides details about each service's API. You will see there is a common set of API's that all services implement, which are:</p> <ul> <li>Version</li> <li>Metrics</li> <li>Config</li> <li>Ping</li> </ul> <p>Each Edgex Service's RESTful API is documented via Swagger. A link is provided to the swagger document in the service specific documentation. </p> <p>Also included in this API Reference are a couple 3rd party services (Configuration/Registry and Rules Engine). These services do not implement the above common APIs and don't not have swagger documentation. Links are provided to their appropriate documentation.</p> <p>See the left side navigation for complete list of services to access their API Reference. </p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 all the EdgeX services use new DTOs (Data Transfer Objects) for all responses and for all POST/PUT/PATCH requests. All query APIs (GET) which return multiple objects, such as /all or /label/{label}, provide <code>offset</code> and <code>limit</code> query parameters.</p>"},{"location":"api/applications/Ch-APIAppFunctionsSDK/","title":"Application Services","text":"<p>The App Functions SDK is provided to help build Application Services by assembling triggers, pre-existing functions and custom functions of your making into a functions pipeline. This functions pipeline processes messages received by the configured trigger.  See Application Functions SDK for more details on this SDK.</p> <p>The App Functions SDK provides a RESTful API that all Application Services inherit from the SDK.</p> <p>Application Service SDK V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the App Functions SDK has changed to use DTOs (Data Transfer Objects) for all responses and for POST requests. One exception is the <code>/api/v2/trigger</code> endpoint that is enabled when the Trigger is configured to be <code>http</code>. This endpoint accepts any data POSTed to it.</p>"},{"location":"api/applications/Ch-APIRulesEngine/","title":"Rules Engine","text":"<p>EdgeX Foundry Rules Engine Microservice receives data from the instance of App Service Configurable running the <code>rules-engine</code> profile (aka app-rules-engine) via the EdgeX MessageBus. EdgeX uses <code>eKuiper</code> for the rules engine, which is a separate LF Edge project. See the eKuiper Website for more details on this rules engine.</p> <p>eKuiper's documentation</p>"},{"location":"api/core/Ch-APICoreCommand/","title":"Core Command","text":"<p>EdgeX Foundry's Command microservice is a conduit for other services to trigger action on devices and sensors through their managing Device Services. See Core Command  for more details about this service.</p> <p>The service provides an API to get the list of commands that can be issued for all devices or a single device. Commands are divided into two groups for each device:</p> <ul> <li>GET commands are issued to a device or sensor to get a current value     for a particular attribute on the device, such as the current     temperature provided by a thermostat sensor, or the on/off status of     a light.</li> <li>SET commands are issued to a device or sensor to change the current     state or status of a device or one of its attributes, such as     setting the speed in RPMs of a motor, or setting the brightness of a     dimmer light.</li> </ul> <p>Core Command V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the Core Command has changed to use DTOs (Data Transfer Objects) for all responses and for all PUT requests. All query APIs (GET) which return multiple objects, such as /all, provide <code>offset</code> and <code>limit</code> query parameters.</p>"},{"location":"api/core/Ch-APICoreConfigurationAndRegistry/","title":"Configuration and Registry","text":"<p>EdgeX uses the 3rd party Consul microservice as the implementations for Configuration and Registry. The RESTful APIs are provided by Consul directly, and several communities supply Consul client libraries for different programming languages, including Go (official), Python, Java, PHP, Scala, Erlang/OTP, Ruby, Node.js, and C#.</p> <p>EdgeX 2.0</p> <p>New for Edgex 2.0 is Secure Consul when running EdgeX in secure mode. See the Secure Consul section for more details.</p> <p>For the client libraries of different languages, please refer to the list on this page:</p> <p>https://www.consul.io/downloads_tools.html</p>"},{"location":"api/core/Ch-APICoreConfigurationAndRegistry/#configuration-management","title":"Configuration Management","text":"<p>For the current API documentation, please refer to the official Consul web site:</p> <p>https://www.consul.io/intro/getting-started/kv.html https://www.consul.io/docs/agent/http/kv.html</p>"},{"location":"api/core/Ch-APICoreConfigurationAndRegistry/#service-registry","title":"Service Registry","text":"<p>For the current API documentation, please refer to the official Consul web site:</p> <p>https://www.consul.io/intro/getting-started/services.html https://www.consul.io/docs/agent/http/catalog.html https://www.consul.io/docs/agent/http/agent.html https://www.consul.io/docs/agent/checks.html https://www.consul.io/docs/agent/http/health.html</p> <p>Service Registration</p> <p>While each microservice is starting up, it will connect to Consul to register its endpoint information, including microservice ID, address, port number, and health checking method. After that, other microservices can locate its URL from Consul, and Consul has the ability to monitor its health status. The RESTful API of registration is described on the following Consul page:</p> <p>https://www.consul.io/docs/agent/http/agent.html#agent_service_register</p> <p>Service Deregistration</p> <p>Before microservices shut down, they have to deregister themselves from Consul. The RESTful API of deregistration is described on the following Consul page:</p> <p>https://www.consul.io/docs/agent/http/agent.html#agent_service_deregister</p> <p>Service Discovery</p> <p>Service Discovery feature allows client micro services to query the endpoint information of a particular microservice by its microservice IDor list all available services registered in Consul. The RESTful API of querying service by microservice IDis described on the following Consul page:</p> <p>https://www.consul.io/docs/agent/http/catalog.html#catalog_service</p> <p>The RESTful API of listing all available services is described on the following Consul page:</p> <p>https://www.consul.io/docs/agent/http/agent.html#agent_services</p> <p>Health Checking</p> <p>Health checking is a critical feature that prevents using services that are unhealthy. Consul provides a variety of methods to check the health of services, including Script + Interval, HTTP + Interval, TCP + Interval, Time to Live (TTL), and Docker + Interval. The detailed introduction and examples of each checking methods are described on the following Consul page:</p> <p>https://www.consul.io/docs/agent/checks.html</p> <p>The health checks should be established during service registration. Please see the paragraph on this page of Service Registration section.</p>"},{"location":"api/core/Ch-APICoreConfigurationAndRegistry/#consul-ui","title":"Consul UI","text":"<p>Consul has UI which allows you to view the health of registered services and view/edit services' individual configuration. Learn more about the UI on the following Consul page:</p> <p>https://learn.hashicorp.com/tutorials/consul/get-started-explore-the-ui</p> <p>EdgeX 2.0</p> <p>Please note that as of EdgeX 2.0, Consul can be secured.  When EdgeX is running in secure mode with secure Consul, you must provide  Consul's access token to get to the UI referenced above.  See How to get Consul ACL token for details.</p>"},{"location":"api/core/Ch-APICoreData/","title":"Core Data","text":"<p>EdgeX Foundry Core Data microservice includes the Events/Readings database collected from devices /sensors and APIs to expose this database to other services. Its APIs to provide access to Add, Query and Delete Events/Readings. See Core Data for more details about this service.</p> <p>Core Data V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the Core Data has changed to use DTOs (Data Transfer Objects) for all responses and for all POST requests. All query APIs (GET) which return multiple objects, such as /all, provide <code>offset</code> and <code>limit</code> query parameters.</p>"},{"location":"api/core/Ch-APICoreMetadata/","title":"Core Metadata","text":"<p>The Core Metadata microservice includes the device/sensor metadata database and APIs to expose this database to other services. In particular, the device provisioning service deposits and manages device metadata through this service's API. See Core Metadata for more details about this service.</p> <p>Core Metadata V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the Core Metadata has changed to use DTOs (Data Transfer Objects) for all responses and for all POST/PUT/PATCH requests.  All query APIs (GET) which return multiple objects, such as /all, provide <code>offset</code> and <code>limit</code> query parameters.</p>"},{"location":"api/devices/Ch-APIDeviceSDK/","title":"Device Services","text":"<p>The EdgeX Foundry Device Service Software Development Kit (SDK) takes the Developer through the step-by-step process to create an EdgeX Foundry Device Service microservice. See Device Service SDK for more details on this SDK.</p> <p>The Device Service SDK provides a RESTful API that all Device Services inherit from the SDK.</p> <p>Device SDK V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the Device Service SDK has changed to use DTOs (Data Transfer Objects) for all responses and for all POST/PUT requests. </p>"},{"location":"api/management/Ch-APISystemManagement/","title":"System Management Agent","text":"<p>EdgeX 2.0</p> <p>System Management Agent has been deprecated for EdgeX 2.0. While it is still available, it may be removed in a future release and no further develop is planned for it.</p> <p>The EdgeX System Management Agent (SMA) microservice exposes the EdgeX management service API to 3rd party systems. In other words, the Agent serves as a proxy for system management service API calls into each micro service. See System Management Agent for more details about this service.</p> <p>System Management V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the System Management Agent has changed to use DTOs (Data Transfer Objects) for all responses and for all POST requests. </p>"},{"location":"api/support/Ch-APISupportNotifications/","title":"Support Notifications","text":"<p>When a person or a system needs to be informed of something discovered on the node by another microservice on the node, EdgeX Foundry's Support Notifications microservice delivers that information. Examples of Alerts and Notifications that other services might need to broadcast include sensor data detected outside of certain parameters, usually detected by a Rules Engine service, or a system or service malfunction usually detected by system management services.  See Support Notifications for more details about this service.</p> <p>Support Notifications V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the Support Notifications has changed to use DTOs (Data Transfer Objects) for all responses and for all POST/PUT/PATCH requests. All query APIs (GET) which return multiple objects, such as /all, provide <code>offset</code> and <code>limit</code> query parameters.</p>"},{"location":"api/support/Ch-APISupportScheduler/","title":"Support Scheduler","text":"<p>EdgeX Foundry's Support Scheduler microservice to schedule actions to occur on specific intervals. See Support Scheduler for more details about this service.</p> <p>Support Scheduler V2 API Swagger Documentation</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the REST API provided by the Support Scheduler has changed to use DTOs (Data Transfer Objects) for all responses and for all POST/PUT/PATCH requests. All query APIs (GET) which return multiple objects, such as /all, provide <code>offset</code> and <code>limit</code> query parameters.</p>"},{"location":"design/","title":"Architecture Decision Records Folder","text":"<p>This folder contains EdgeX Foundry decision records (ADR) and legacy design / requirement documents.</p> <pre><code>/design\n    /adr (architecture decision Records)\n    /legacy-design (legacy design documents)\n    /legacy-requirements (legacy requirement documents)\n</code></pre> <p>At the root of the ADR folder (/design/adr) are decisions that are relevant to multiple parts of the project (aka \ufffd cross cutting concerns).  Sub folders under the ADR folder contain decisions relevant to the specific area of the project and essentially set up along working group lines (security, core, application, etc.).</p>"},{"location":"design/#naming-and-formatting","title":"Naming and Formatting","text":"<p>ADR documents are requested to follow RFC (request for comments) naming standard.  Specifically, authors should name their documents with a sequentially increasing integer (or serial number) and then the architectural design topic:  (sequence number - topic).  Example:  0001-SeparateConfigurationInterface.  The sequence is a global sequence for all EdgeX ADR. Per RFC and Michael Nygard suggestions the makeup of the ADR document should generally include:</p> <ul> <li>Title</li> <li>Status (proposed, accepted, rejected, deprecated, superseded, etc.)</li> <li>Context and Proposed Design</li> <li>Decision</li> <li>Consequences/considerations</li> <li>References</li> <li>Document history is maintained via Github history.</li> </ul>"},{"location":"design/#ownership","title":"Ownership","text":"<p>EdgeX WG chairman own the sub folder and included documents associated to their work group.  The EdgeX TSC chair/vice chair are responsible for the root level, cross cutting concern documents.</p>"},{"location":"design/#review-and-approval","title":"Review and Approval","text":"<p>ADR\u2019s shall be submitted as PRs to the appropriate edgex-docs folder based on the Architecture Decision Records Folder section above.  The status of the PR (inside the document) shall be listed as proposed during this period.  The PRs shall be left open (not merged) so that comments against the PR can be collected during the proposal period.  The PRs can be approved and merged only after a formal vote of approval is conducted by the TSC.  On approval of the ADR by the TSC, the status of the ADR should be changed to accepted.  If the ADR is not approved by the TSC, the status in the document should be changed to rejected and the PR closed.</p>"},{"location":"design/#legacy","title":"Legacy","text":"<p>A separate folder (/design/legacy-design) is used for legacy design/architecture decisions. A separate folder (/design/legacy-requirements) is used for legacy requirements documents. WG chairman take the responsibility for posting legacy material in to the applicable folders.</p>"},{"location":"design/#table-of-contents","title":"Table of Contents","text":"<p>A README with a table of contents for current documents is located here. Legacy Design and Requirements have their own Table of Contents as well and are located in their respective directories at /legacy-design and /legacy-requirements. Document authors are asked to keep the TOC updated with each new document entry.</p>"},{"location":"design/TOC/","title":"ADR Table of Contents","text":"Name/Link Short Description 0001 Registry Refactor Separate out Registry and Configuration APIs 0002 Array Datatypes Allow Arrays to be held in Readings 0003 V2 API Principles Principles and Goals of V2 API Design 0004 Feature Flags Feature Flag Implementation 0005 Service Self Config Init Service Self Config Init &amp; Config Seed Removal 0006 Metrics Collection Collection of service telemetry data 0007 Release Automation Overview of Release Automation Flow for EdgeX 0008 Secret Distribution Creation and Distribution of Secrets 0009 Secure Bootstrapping Secure Bootstrapping of EdgeX 0011 Device Service REST API The REST API for Device Services in EdgeX v2.x 0012 Device Service Filters Device Service event/reading filters 0013 Device Service Events via Message Bus Device Services send Events via Message Bus 0014 Secret Provider for All Secret Provider for All EdgeX Services 0015 Encryption between microservices Details conditions under which TLS is or is not used 0016 Container Image Guidelines Documents best practices for security of docker images 0017 Securing access to Consul Access control and authorization strategy for Consul 0018 Service Registry Service registry usage for EdgeX services 0019 EdgeX-CLI V2 EdgeX-CLI V2 Implementation 0020 Delay start services (SPIFFE/SPIRE) Secret store tokens for delayed start services 0021 Device Profile Changes Rules on device profile modifications 0022 Unit of Measure Unit of Measure 0023 North South Messaging Provide for messaging from north side systems through command down to device services"},{"location":"design/adr/0001-Registy-Refactor/","title":"Registry Refactoring Design","text":"<ul> <li>Status</li> <li>Context</li> <li>Proposed Design</li> <li>Decision</li> <li>Consequences</li> <li>References</li> </ul>"},{"location":"design/adr/0001-Registy-Refactor/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/0001-Registy-Refactor/#context","title":"Context","text":"<p>Currently the <code>Registry Client</code> in <code>go-mod-registry</code> module provides Service Configuration and Service Registration functionality. The goal of this design is to refactor the <code>go-mod-registry</code> module for separation of concerns. The Service Registry functionality will stay in the <code>go-mod-registry</code> module and the Service Configuration functionality will be separated out into a new <code>go-mod-configuration</code> module. This allows for implementations for deferent providers for each, another aspect of separation of concerns.</p>"},{"location":"design/adr/0001-Registy-Refactor/#proposed-design","title":"Proposed Design","text":""},{"location":"design/adr/0001-Registy-Refactor/#provider-connection-information","title":"Provider Connection information","text":"<p>An aspect of using the current <code>Registry Client</code> is \"Where do the services get the <code>Registry Provider</code> connection information?\" Currently all services either pull this connection information from the local configuration file or from the <code>edgex_registry</code> environment variable. Device Services also have the option to specify this connection information on the command line. With the refactoring for separation of concerns, this issue changes to \"Where do the services get the <code>Configuration Provider</code> connection information?\"</p> <p>There have been concerns voiced by some in the EdgeX community that storing this <code>Configuration Provider</code> connection information in the configuration which ultimately is provided by that provider is not the right design.</p> <p>This design proposes that all services will use the command line option approach with the ability to override with an environment variable. The  <code>Configuration Provider</code> information will not be stored in each service's local configuration file. The <code>edgex_registry</code> environment variable will be deprecated. The <code>Registry Provider</code> connection information will continue to be stored in each service's configuration either locally or from the<code>Configuration Provider</code> same as all other EdgeX Client and Database connection information.</p>"},{"location":"design/adr/0001-Registy-Refactor/#command-line-option-changes","title":"Command line option changes","text":"<p>The new <code>-cp/-configProvider</code> command line option will be added to each service which will have a value specified using the format <code>{type}.{protocol}://{host}:{port}</code> e.g <code>consul.http://localhost:8500</code>.  This new command line option will be overridden by the <code>edgex_configuration_provider</code> environment variable when it is set. This environment variable's value has the same format as the command line option value. </p> <p>If no value is provided to the <code>-cp/-configProvider</code> option, i.e. just <code>-cp</code>, and no environment variable override is specified, the default value of <code>consul.http://localhost:8500</code> will be used. </p> <p>if <code>-cp/-configProvider</code> not used and no environment variable override is specified the local configuration file is used, as is it now.</p> <p>All services will log the <code>Configuration Provider</code> connection information that is used.</p> <p>The existing <code>-r/-registry</code> command line option will be retained as a Boolean flag to indicate to use the Registry. </p>"},{"location":"design/adr/0001-Registy-Refactor/#bootstrap-changes","title":"Bootstrap Changes","text":"<p>All services in the edgex-go mono repo use the new common bootstrap functionality.  The plan is to move this code to a go module for the Device Service and App Functions SDKs to also use. The current bootstrap modules <code>pkg/bootstrap/configuration/registry.go</code> and <code>pkg/bootstrap/container/registry.go</code> will be refactored to use the new <code>Configuration Client</code> and be renamed appropriately. New bootstrap modules will be created for using the revised version of <code>Registry Client</code> .  The current use of <code>useRegistry</code> and <code>registryClient</code> for service configuration will be change to appropriate names for using the new <code>Configuration Client</code>.  The current use of <code>useRegistry</code> and <code>registryClient</code> for service registration will be retained for service registration. Call to the new Unregister() API will be added to shutdown code for all services.</p>"},{"location":"design/adr/0001-Registy-Refactor/#config-seed-changes","title":"Config-Seed Changes","text":"<p>The <code>conf-seed</code> service will have similar changes for specifying the <code>Configuration Provider</code> connection information since it doesn't use the common bootstrap package. Beyond that it will have minor changes for switching to using the <code>Configuration Client</code> interface, which will just be imports and appropriate name refactoring.</p>"},{"location":"design/adr/0001-Registy-Refactor/#config-endpoint-changes","title":"Config Endpoint Changes","text":"<p>Since the <code>Configuration Provider</code> connection information will no longer be in the service's configuration struct, the <code>config</code> endpoint processing will be modified to add the <code>Configuration Provider</code> connection information to the resulting JSON create from service's configuration.</p>"},{"location":"design/adr/0001-Registy-Refactor/#client-interfaces-changes","title":"Client Interfaces changes","text":""},{"location":"design/adr/0001-Registy-Refactor/#current-registry-client","title":"Current Registry Client","text":"<p>This following is the current <code>Registry Client</code> Interface</p> <pre><code>type Client interface {\nRegister() error\nHasConfiguration() (bool, error)\nPutConfigurationToml(configuration *toml.Tree, overwrite bool) error\nPutConfiguration(configStruct interface{}, overwrite bool) error\nGetConfiguration(configStruct interface{}) (interface{}, error)\nWatchForChanges(updateChannel chan&lt;- interface{}, errorChannel chan&lt;- error, configuration interface{}, waitKey string)\nIsAlive() bool\nConfigurationValueExists(name string) (bool, error)\nGetConfigurationValue(name string) ([]byte, error)\nPutConfigurationValue(name string, value []byte) error\nGetServiceEndpoint(serviceId string) (types.ServiceEndpoint, error)\nIsServiceAvailable(serviceId string) error\n}\n</code></pre>"},{"location":"design/adr/0001-Registy-Refactor/#new-configuration-client","title":"New Configuration Client","text":"<p>This following is the new <code>Configuration Client</code> Interface which contains the  Service Configuration specific portion from the above current <code>Registry Client</code>.</p> <pre><code>type Client interface {\nHasConfiguration() (bool, error)\nPutConfigurationFromToml(configuration *toml.Tree, overwrite bool) error\nPutConfiguration(configStruct interface{}, overwrite bool) error\nGetConfiguration(configStruct interface{}) (interface{}, error)\nWatchForChanges(updateChannel chan&lt;- interface{}, errorChannel chan&lt;- error,\nconfiguration interface{}, waitKey string)\nIsAlive() bool\nConfigurationValueExists(name string) (bool, error)\nGetConfigurationValue(name string) ([]byte, error)\nPutConfigurationValue(name string, value []byte) error\n}\n</code></pre>"},{"location":"design/adr/0001-Registy-Refactor/#revised-registry-client","title":"Revised Registry Client","text":"<p>This following is the revised <code>Registry Client</code> Interface, which contains the Service Registry specific portion from the above current <code>Registry Client</code>. The <code>UnRegister()</code> API has been added per issue #20</p> <pre><code>type Client interface {\nRegister() error\nUnRegister() error\nIsAlive() bool\nGetServiceEndpoint(serviceId string) (types.ServiceEndpoint, error)\nIsServiceAvailable(serviceId string) error\n}\n</code></pre>"},{"location":"design/adr/0001-Registy-Refactor/#client-configuration-structs","title":"Client Configuration Structs","text":""},{"location":"design/adr/0001-Registy-Refactor/#current-registry-client-config","title":"Current Registry Client Config","text":"<p>The following is the current <code>struct</code> used to configure the current <code>Registry Client</code></p> <pre><code>type Config struct {\nProtocol string\nHost string\nPort int\nType string\nStem string\nServiceKey string\nServiceHost string\nServicePort int\nServiceProtocol string\nCheckRoute string\nCheckInterval string\n}\n</code></pre>"},{"location":"design/adr/0001-Registy-Refactor/#new-configuration-client-config","title":"New Configuration Client Config","text":"<p>The following is the new <code>struct</code> the will be used to configure the new <code>Configuration Client</code> from the command line option or environment variable values. The Service Registry portion has been removed from the above existing <code>Registry Client Config</code></p> <pre><code>type Config struct {\nProtocol string\nHost string\nPort int\nType string\nBasePath string\nServiceKey string\n}\n</code></pre>"},{"location":"design/adr/0001-Registy-Refactor/#new-registry-client-config","title":"New Registry Client Config","text":"<p>The following is the revised <code>struct</code> the will be used to configure the new <code>Registry Client</code> from the  information in the service's configuration. This is mostly unchanged from the existing <code>Registry Client Config</code>, except that the <code>Stem</code> for configuration has been removed</p> <pre><code>type Config struct {\nProtocol string\nHost string\nPort int\nType string\nServiceKey string\nServiceHost string\nServicePort int\nServiceProtocol string\nCheckRoute string\nCheckInterval string\n}\n</code></pre>"},{"location":"design/adr/0001-Registy-Refactor/#provider-implementations","title":"Provider Implementations","text":"<p>The current <code>Consul</code> implementation of the <code>Registry Client</code> will be split up into implementations for the new <code>Configuration Client</code> in the new <code>go-mod-configuration</code> module and the revised <code>Registry Client</code> in the existing <code>go-mod-registry</code> module.</p>"},{"location":"design/adr/0001-Registy-Refactor/#decision","title":"Decision","text":"<p>It was decided to move forward with the above design</p> <p>After initial ADR was approved, it was decided to retain the <code>-r/--registry</code> command-line flag and not add the <code>Enabled</code> field in the Registry provider configuration.</p>"},{"location":"design/adr/0001-Registy-Refactor/#consequences","title":"Consequences","text":"<p>Once the refactoring of go-mod-registry and go-mod-configuration are complete, they will need to be integrated into the new go-mod-bootstrap. Part of this integration will be the Command line option changes above. At this point the edgex-go services will be integrated with the new <code>Registry</code> and <code>Configuration</code> providers. The <code>App Services SDK</code> and <code>Device Services SDK</code> will then need to integrate go-mod-bootstrap to take advantage of these new providers.</p>"},{"location":"design/adr/0001-Registy-Refactor/#references","title":"References","text":"<p>Registry Abstraction - Decouple EdgeX services from Consul (Previous design)</p>"},{"location":"design/adr/0004-Feature-Flags/","title":"Feature Flag Proposal","text":""},{"location":"design/adr/0004-Feature-Flags/#status","title":"Status","text":"<p>Accepted </p>"},{"location":"design/adr/0004-Feature-Flags/#context","title":"Context","text":"<p>Out of the proposal for releasing on time, the community suggested that we take a closer look at feature-flags.  </p> <p>Feature-flags are typically intended for users of an application to turn on or off new or unused features. This gives user more control to adopt a feature-set at their own pace \u2013 i.e disabling store and forward in App Functions SDK without breaking backward compatibility. </p> <p>It can also be used to indicate to developers the features that are more often used than others and can provided valuable feedback to enhance and continue a given feature. To gain that insight of the use of any given feature, we would require not only instrumentation of the code but a central location in the cloud (i.e a TIG stack) for the telemetry to be ingested and in turn reported in order to provide the feedback to the developers. This becomes infeasible primarily because the cloud infrastructure costs, privacy concerns, and other unforeseen legal reasons for sending \u201cUsage Metrics\u201d of an EdgeX installation back to a central entity such as the Linux Foundation, among many others. Without the valuable feedback loop, feature-flags don\u2019t provide much value on their own and they certainly don\u2019t assist in increasing velocity to help us deliver on time.  </p> <p>Putting aside one of the major value propositions listed above, feasibility of a feature flag \u201cmodule\u201d was still evaluated. The simplest approach would be to leverage configuration following a certain format such as FF_[NewFeatureName]=true/false. This is similar to what is done today. Turning on/off security is an example, turning on/off the registry is another. Expanding this further with a module could offer standardization of controlling a given feature such as <code>featurepkg.Register(\u201cMyNewFeature\u201d)</code> or <code>featurepkg.IsOn(\u201cMyNewFeature\u201d)</code>. However, this really is just adding complexity on top of the underlying configuration that is already implemented. If we were to consider doing something like this, it lends it self to a central management of features within the EdgeX framework\u2014either its own service or possibly added as part of the SMA. This could help address concerns around feature dependencies and compatibility. Feature A on Service X requires Feature B and Feature C on Service Y. Continuing down this path starts to beget a fairly large impact to EdgeX for value that cannot be fully realized.  </p>"},{"location":"design/adr/0004-Feature-Flags/#decision","title":"Decision","text":"<p>The community should NOT pursue a full-fledged feature flag implementation either homegrown or off-the-shelf. </p> <p>However, it should be encouraged to develop features with a wholistic perspective and consider leveraging configuration options to turn them on/off. In other words, once a feature compiles, can work under common scenarios, but perhaps isn\u2019t fully tested with edge cases, but doesn\u2019t impact any other functionality, should be encouraged.  </p>"},{"location":"design/adr/0004-Feature-Flags/#consequences","title":"Consequences","text":"<p>Allows more focus on the many more competing priorities for this release. </p> <p>Minimal impact to development cycles and release schedule </p>"},{"location":"design/adr/0005-Service-Self-Config/","title":"Service Self Config Init &amp; Config Seed Removal","text":""},{"location":"design/adr/0005-Service-Self-Config/#status","title":"Status","text":"<p>approved - TSC vote on 3/25/20 for Geneva release</p> <p>NOTE:  this ADR does not address high availability considerations and concerns.  EdgeX, in general, has a number of unanswered questions with regard to HA architecture and this design adds to those considerations.</p>"},{"location":"design/adr/0005-Service-Self-Config/#context","title":"Context","text":"<p>Since its debut, EdgeX has had a configuration seed service (config-seed) that, on start of EdgeX, deposits configuration for all the services into Consul (our configuration/registry service).  For development purposes, or on  resource constrained platforms, EdgeX can be run without Consul with services simply reading configuration from the filesystem.</p> <p>While this process has nominally worked for several releases of EdgeX, there has always been some issues with this extra initialization process (config-seed), not least of which are: - race conditions on the part of the services, as they bootstrap, coming up before the config-seed completes its deposit of configuration into Consul - how to deal with \"overrides\" such as environmental variable provided configuration overrides. As the override is often specific to a service but has to be in place for config-seed in order to take effect. - need for an additional service that is only there for init and then dies (confusing to users)</p> <p>NOTE - for historical purposes, it should be noted that config-seed only writes configuration into the configuration/registry service (Consul) once on the first start of EdgeX.  On subsequent starts of EdgeX, config-seed checks to see if it has already populated the configuration/registry service and will not rewrite configuration again (unless the --overwrite flag is used).</p> <p>The design/architectural proposal, therefore, is: - removal of the config-seed service (removing cmd/config-seed from the edgex-go repository) - have each EdgeX micro service \"self seed\" - that is seed Consul with their own required configuration on bootstrap of the service.  Details of that bootstrapping process are below.</p>"},{"location":"design/adr/0005-Service-Self-Config/#command-line-options","title":"Command Line Options","text":"<p>All EdgeX services support a common set of command-line options, some combination of which are required on startup for a service to interact with the rest of EdgeX. Command line options are not set by any configuration.  Command line options include:</p> <ul> <li>--configProvider or -cp (the configuration provider location URL - prefixed with <code>consul.</code> - for example:  <code>-cp=consul.http://localhost:8500</code>)</li> <li>--overwrite or -o (overwrite the configuration in the configuration provider)</li> <li>--file or -f (the configuration filename - configuration.toml is used by default if the configuration filename is not provided)</li> <li>--profile or -p (the name of a sub directory in the configuration directory in which a profile-specific configuration file is found. This has no default. If not specified, the configuration file is read from the configuration directory)</li> <li>--confdir or -c (the directory where the configuration file is found - ./res is used by default if the confdir is not specified, where \".\" is the convention on Linux/Unix/MacOS which means current directory) </li> <li>--registry or -r (string indicating use of the registry)</li> </ul> <p>The distinction of command line options versus configuration will be important later in this ADR.</p> <p>Two command line options (-o for overwrite and -r for registry) are not overridable by environmental variables.</p> <p>NOTES: Use of the --overwrite command line option should be used sparingly and with expert knowledge of EdgeX; in particular knowledge of how it operates and where/how it gets its configuration on restarts, etc.  Ordinarily, --overwrite is provided as a means to support development needs.  Use of --overwrite permanently in production enviroments is highly discouraged.</p>"},{"location":"design/adr/0005-Service-Self-Config/#configuration-initialization","title":"Configuration Initialization","text":"<p>Each service has (or shall have if not providing it already) a local configuration file.  The service may use the local configuration file on initialization of the service (aka bootstrap of the service) depending on command line options and environmental variables (see below) provided at startup.</p> <p>Using a configuration provider</p> <p>When the configuration provider is specified, the service will call on the configuration provider (Consul) and check if the top-level (root) namespace for the service exists.  If configuratation at the top-level (root) namespace exists, it indicates that the service has already populated its configuration into the configuration provider in a prior startup.</p> <p>If the service finds the top-level (root) namespace is already populated with configuration information it will then read that configuration information from the configuration provider under namespace for that service (and ignore what is in the local configuration file).</p> <p>If the service finds the top-level (root) namespace is not populated with configuration information, it will read its local configuration file and populate the configuration provider (under the namespace for the service) with configuration read from the local configuration file.</p> <p>A configuration provider can be specified with a command line argument (the -cp / --configProvider) or environment variable (the EDGEX_CONFIGURATION_PROVIDER environmental variable which overrides the command line argument).</p> <p>NOTE:  the environmental variables are typically uppercase but there have been inconsistencies in environmental variable casing (example:  edgex_registry).  This should be considered and made consistent in a future major release.</p> <p>Using the local configuration file</p> <p>When a configuration provider isn't specified, the service just uses the configuration in its local configuration file.  That is the service uses the configuration in the file associated with the profile, config filename and config file directory command line options or environmental variables.  In this case, the service does not contact the configuration service (Consul) for any configuration information.</p> <p>NOTE:  As the services now self seed and deployment specific changes can be made via environment overrides, it will no longer be necessary to have a Docker profile configuration file in each of the service directories (example:  https://github.com/edgexfoundry/edgex-go/blob/master/cmd/core-data/res/docker/configuration.toml).  See Consequences below.  It will still be possible for users to use the profile mechanism to specify a Docker configuration, but it will no longer be required and not the recommended approach to providing Docker container specific configuration.</p>"},{"location":"design/adr/0005-Service-Self-Config/#overrides","title":"Overrides","text":"<p>Environment variables used to override configuration always take precedence whether configuration is being sourced locally or read from the config provider/Consul.</p> <p>Note - this means that a configuration value that is being overridden by an environment variable will always be the source of truth, even if the same configuration is changed directly in Consul.</p> <p>The name of the environmental variable must match the path names in Consul.</p> <p>NOTES: - Environmental variables overrides remove the need to change the \"docker\" profile in the res/docker/configuration.toml files - Allowing removal of 50% of the existing configuration.toml files. - The override rules in EdgeX between environmental variables and command line options may be counter intuitive compared to other systems.  There appears to be no standard practice.  Indeed, web searching \"Reddit &amp; Starting Fights Env Variables vs Command Line Args\" will layout the prevailing differences. - Environment variables used for configuration overrides are named by prepending the the configuration element with the configuration section inclusive of sub-path, where sub-path's \".\"s are replaced with underscores. These configuration environment variable overrides must be specified using camel case.  Here are two examples: <pre><code>Registry_Host  for\n[Registry]\nHost = 'localhost'\n\nClients_CoreData_Host for\n[Clients]\n  [Clients.CoreData]\n  Host = 'localhost'\n</code></pre> - Going forward, environmental variables that override command line options should be all uppercase.</p> <p>All values overriden get logged (indicating which configuration value or op param and the new value).  </p>"},{"location":"design/adr/0005-Service-Self-Config/#decision","title":"Decision","text":"<p>These features have been implemented (with some minor changes to be done) for consideration here:  https://github.com/edgexfoundry/go-mod-bootstrap/compare/master...lenny-intel:SelfSeed2.  This code branch will be removed once this ADR is approved and implemented on master.</p> <p>The implementation for self-seeding services and environmental overrides is already implemented (for Fuji) per this document in the application services and device services (and instituted in the SDKs of each).</p>"},{"location":"design/adr/0005-Service-Self-Config/#backward-compatibility","title":"Backward compatibility","text":"<p>Several aspects of this ADR contain backward compatibility issues for the device service and application service SDKs.  Therefore, for the upcoming minor release, the following guidelines and expections are added to provide for backward compatibility.</p> <ul> <li>--registry= for Device SDKs <p>As earlier versions of the device service SDKs accepted a URI for --registry, if specified on the command line, use the given URI as the address of the configuration provider.  If both --configProvider and --registry specify URIs, then the service should log an error and exit.</p> <ul> <li>--registry (no \u2018=\u2019) and w/o --configProvider for both SDKs</li> </ul> <p>If a configProvider URI isn't specified, but --registry (w/out a URI) is specified, then the service will use the Registry provider information from its local configuration file for both configuration and registry providers.</p> <ul> <li>Env Var: edgex_registry= for all services (currently has been removed) <p>Add it back and use value as if it was EDGEX_CONFIGURATION_PROVIDER and enable use of registry with same settings in URL. Default to http as it is in Fuji.</p>"},{"location":"design/adr/0005-Service-Self-Config/#consequences","title":"Consequences","text":"<ul> <li>Docker compose files will need to be changed to remove config seed. </li> <li>The main Snap will need to be changed to remove config seed. </li> <li>Config seed code (currently in edgex-go repo) is to be removed.</li> <li>Any service specific environmental overrides currently on config seed need to be moved to the specific service(s).</li> <li>The Docker configuration files and directory (example:  https://github.com/edgexfoundry/edgex-go/blob/master/cmd/core-data/res/docker/configuration.toml) that are used to populate the config seed for Docker containers can be eliminated from all the services.  </li> <li>In cmd/security-secretstore-setup, there is only a docker configuration.toml.  This file will be moved rather than deleted.</li> <li>Documentation would need to reflect removal of config seed and \"self seeding\" process.</li> <li>Removes any potential issue with past race conditions (as experienced with the Edinburgh release) as each service is now responsible for its own configuration. <p>There are still high availability concerns that need to be considered and not covered in this ADR at this time.</p> </li> <li>Removes some confusion on the part of users as to why a service (config-seed) starts and immediately exits.</li> <li>Minimal impact to development cycles and release schedule</li> <li>Configuration endpoints in all services need to ensure the environmental variables are reflected in the configuration data returned (this is a system management impact).</li> <li>Docker files will need to be modified to remove setting profile=docker</li> <li>Docker compose files will need to be changed to add environmental overrides for removal of docker profiles. These should go in the global environment section of the compose files for those overrides that apply to all services.  Example: <pre><code># all common shared environment variables defined here:\nx-common-env-variables: &amp;common-variables\n  EDGEX_SECURITY_SECRET_STORE: \"false\"\n  EDGEX_CONFIGURATION_PROVIDER: consul.http://edgex-core-consul:8500\n  Clients_CoreData_Host: edgex-core-data\n  Clients_Logging_Host: edgex-support-logging\n  Logging_EnableRemote: \"true\"\n</code></pre></li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/","title":"EdgeX Metrics Collection","text":""},{"location":"design/adr/0006-Metrics-Collection/#status","title":"Status","text":"<p>Approved  Original proposal 10/24/2020 Approved by the TSC on 3/2/22</p> <p>Metric (or telemetry) data is defined as the count or rate of some action, resource, or circumstance in the EdgeX instance or specific service.  Examples of metrics include:</p> <ul> <li>the number of EdgeX Events sent from core data to an application service</li> <li>the number of requests on a service API</li> <li>the average time it takes to process a message through an application service</li> <li>The number of errors logged by a service</li> </ul> <p>Control plane events (CPE) are defined as <code>events</code> that occur within an EdgeX instance.  Examples of CPE include:</p> <ul> <li>a device was provisioned (added to core metadata)</li> <li>a service was stopped</li> <li>service configuration has changed</li> </ul> <p>CPE should not be confused with core data Events.  Core data Events represent a collection (one or more) of sensor/device readings.  Core data Events represent sensing of some measured state of the physical world (temperature, vibration, etc.).  CPE represents the detection of some happening inside of the EdgeX software.</p> <p>This ADR outlines  metrics (or telemetry)  collection and handling.</p> <p>Note</p> <p>This ADR initially incorporated metrics collection and control plane event processing.  The EdgeX architects felt the scope of the design was too large to cover under one ADR.  Control plane event processing will be covered under a separate ADR in the future.</p>"},{"location":"design/adr/0006-Metrics-Collection/#context","title":"Context","text":"<p>System Management services (SMA and executors) currently provide a limited set of \u201cmetrics\u201d to requesting clients (3rd party applications and systems external to EdgeX).  Namely, it provides requesting clients with service CPU and memory usage; both metrics about the resource utilization of the service (the executable) itself versus metrics that are about what is happening inside of the service.  Arguably, the current system management metrics can be provided by the container engine and orchestration tools (example: by Docker engine) or by the underlying OS tooling.</p> <p>Info</p> <p>The SMA has been deprecated (since Ireland release) and will be removed in a future, yet named, release.</p> <p>Going forward, users of EdgeX will want to have more insights \u2013 that is more metrics telemetry \u2013 on what is happening directly in the services and the tasks that they are preforming.  In other words, users of EdgeX will want more telemetry on service activities to include:</p> <ul> <li>sensor data collection (how much, how fast, etc.)</li> <li>command requests handled (how many, to which devices, etc.)</li> <li>sensor data transformation as it is done in application services (how fast, what is filtered, etc)</li> <li>sensor data export (how much is sent, how many exports have failed, etc. )</li> <li>API requests (how often, how quickly, how many success versus failed attempts, etc.)</li> <li>bootstrapping time (time to come up and be available to other services)</li> <li>activity processing time (amount of time it takes to perform a particular service function - such as respond to a command request)</li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#definitions","title":"Definitions","text":"<p>Metric (or telemetry) data is defined as the count or rate of some action, resource, or circumstance in the EdgeX instance or specific service.  Examples of metrics include:</p> <ul> <li>the number of EdgeX Events sent from core data to an application service via message bus (or via device service to application service in Ireland and beyond)</li> <li>the number of requests on a service API</li> <li>the average time it takes to process a message through an application service</li> <li>The number of errors logged by a service</li> </ul> <p>The collection and dissemination of metric data will require internal service level instrumentation (relevant to that service) to capture and send data about relevant EdgeX operations.  EdgeX does not currently offer any service instrumentation.</p>"},{"location":"design/adr/0006-Metrics-Collection/#metric-use","title":"Metric Use","text":"<p>As a first step in implementation of metrics data, EdgeX will make metric data available to other subscribing 3rd party applications and systems, but will not necessarily consume or use this information itself.  </p> <p>In the future, EdgeX may consume its own metric data.  For example, EdgeX may, in the future, use a metric on the number of EdgeX events being sent to core data (or app services) as the means to throttle back device data collection.</p> <p>In the future, EdgeX application services may optionally subscribe to a service's metrics messages bus (by attaching to the appropriate message pipe for that service).  Thus allowing additional filtering, transformation, endpoint control of metric data from that service.  At the point where this feature is supported, consideration would need to be made as to whether all events (sensor reading messages and metric messages) go through the same application services.</p> <p>At this time, EdgeX will not persist the metric data (except as it may be retained as part of a message bus subsystem such as in an MQTT broker).  Consumers of metric data are responsible for persisting the data if needed, but this is external to EdgeX.  Persistence of metric information may be considered in the future based on requirements and adopter demand for such a feature.</p> <p>In general, EdgeX metrics are meant to provide internal services and external applications and systems better information about what is happening \"inside\" EdgeX services and the associated devices with which it communicates.</p>"},{"location":"design/adr/0006-Metrics-Collection/#requirements","title":"Requirements","text":"<ul> <li>Services will push specified metrics collected for that service to a specified (by configuration) message endpoint (as supported by the EdgeX  message bus implementation; currently either Redis Pub/Sub or MQTT implementations are supported)<ul> <li>Each service will have configuration that specifies a message endpoint for the service metrics.  The metrics message topic communications may be secured or unsecured (just as application services provide the means to export to secured or unsecured message pipes today).</li> <li>The configuration will be placed in the <code>Writable</code> area.  When a user wishes to change the configuration dynamically (such as turning on/off a metric), then Consul's UI can be used to change it.</li> </ul> </li> <li>Services will have configuration which indicates what metrics are available from the service.</li> <li>Services will have configuration which allows EdgeX system managers to select which metrics are <code>on</code> or <code>off</code> - in other words providing configuration that determines what metrics are collected and reported by default.<ul> <li>When a metric is turned <code>off</code> (the default setting) the service does not report the metric.  When a metric is turned <code>on</code> the service collects and sends the metric to the designated message topic.</li> <li>Metrics collection must be pushed to the designated message topic on some appointed schedule.  The schedule would be designated by configuration and done in a way similar to auto events in device services.</li> <li>For the initial implementation, there will be just one scheduled time when all metrics will be collected and pushed to the designated message topic.  In the future, there may be a desire to set up a separate schedule for each metric, but this was deemed too complex for the initial implementation.</li> </ul> </li> </ul> <p>Info</p> <p>Initially, it was proposed that metrics be associated with a \"level\" and allow metrics to be turned on or off by level (like levels associated to log messages in logging).  The level of metrics data seems arbitrary at this time and considered too complex for initial implementation.  This may be reconsidered in a future release and based on new requirements/use cases.</p> <p>It was also proposed to categorize or label metrics - essentially allowing grouping of various metrics.  This would allow groups of metrics to be turned on or off, and allow metrics to be organized per the group when reporting.  At this time, this feature is also considered beyond the scope of the initial implementation and to be reconsidered in a future release based on requirements/use case needs.</p> <p>It was also proposed that each service offer a REST API to provide metrics collection information (such as which metrics were being collected) and the ability to turn the collection on or off dynamically.  This is deemed out of scope for the first implementation and may be brought back if there are use case requirements / demand for it. </p>"},{"location":"design/adr/0006-Metrics-Collection/#requested-metrics","title":"Requested Metrics","text":"<p>The following is a list of example metrics requested by the EdgeX community and adopters for various service areas.  Again, metrics would generally be collected and pushed to the message topic in some configured interval (example: 1/5/15 minutes or other defined interval).  This is just a sample of metrics thought relevant by each work group.  It may not reflect the metrics supported by the implementation.  The exact metrics collected by each service will be determined by the service implementers (or SDK implementers in the case of the app functions and device service SDKs).</p>"},{"location":"design/adr/0006-Metrics-Collection/#general","title":"General","text":"<p>The following metrics apply to all (or most) services.</p> <ul> <li>Service uptime (time since last service boot)</li> <li>Cumulative number of API requests succeeded / failed / invalid (2xx vs 5xx vs 4xx)</li> <li>Avg response time (in milliseconds or appropriate unit of measure) on APIs</li> <li>Avg and Max request size</li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#coresupporting","title":"Core/Supporting","text":"<ul> <li>Latency (measure of time) an event takes to get through core data</li> <li>Latency (measure of time) a command request takes to get to a device service</li> <li>Indication of health \u2013 that events are being processed during a configurable period</li> <li>Number of events in persistence</li> <li>Number of readings in persistence</li> <li>Number of validation failures (validation of device identification)</li> <li>Number of notification transactions</li> <li>Number of notifications handled</li> <li>Number of failed notification transmissions</li> <li>Number of notifications in retry status</li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#application-services","title":"Application Services","text":"<ul> <li>Processing time for a pipeline; latency (measure of time) an event takes to get through an  application service pipeline</li> <li>DB access times</li> <li>How often are we failing export to be sent to db to be retried at a later time</li> <li>What is the current store and forward queue size</li> <li>How much data (size in KBs or MBs) of packaged sensor data is being sent to an endpoint (or volume)</li> <li>Number of invalid messages that triggered pipeline</li> <li>Number of events processed</li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#device-services","title":"Device Services","text":"<ul> <li>Number of devices managed by this DS</li> <li>Device Requests (which may be more informative than reading counts and rates)</li> </ul> <p>Note</p> <p>It is envisioned that there may be additional specific metrics for each device service.  For example, the ONVIF camera device service may report number of times camera tampering was detected. </p>"},{"location":"design/adr/0006-Metrics-Collection/#security","title":"Security","text":"<p>Security metrics may be more difficult to ascertain as they are cross service metrics.  Given the nature of this design (on a per service basis), global security metrics may be out of scope or security metrics collection has to be copied into each service (leading to lots of duplicate code for now).  Also, true threat detection based on metrics may be a feature best provided by 3rd party based on particular threats and security profile needs.</p> <ul> <li>Number of API requests denied due to wrong access token (Kong) per service and within a given time</li> <li>Number of secrets accessed per service name</li> <li>Count of any accesses and failures to the data persistence layer</li> <li>Count of service start and restart attempts</li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#design-proposal","title":"Design Proposal","text":""},{"location":"design/adr/0006-Metrics-Collection/#collect-and-push-architecture","title":"Collect and Push Architecture","text":"<p>Metric data will be collected and cached by each service.  At designated times (kicked off by configurable schedule), the service will collect telemetry data from the cache and push it to a designated message bus topic.</p>"},{"location":"design/adr/0006-Metrics-Collection/#metrics-messaging","title":"Metrics Messaging","text":"<p>Cached metric data, at the designated time, will be marshaled into a message and pushed to the pre-configured message bus topic.</p> <p>Each metric message consists of several key/value pairs: - a required name (the name of the metric) such as service-uptime - a required value which is the telemetry value collected such as 120 as the number of hours the service has been up. - a required timestamp is the time (in Epoch timestamp/milliseconds format) at which the data was collected (similar in nature to the origin of sensed data).  - an optional collection (array) of tags.  The tags are sets of key/value pairs of strings that provide amplifying information about the telemetry.  Tags may include:     - originating service name     - unit of measure associated with the telemetry value     - value type of the value     - additional values when the metric is more than just one value (example: when using a histogram, it would include min, max, mean and sum values)</p> <p>The metric name must be unique for that service.  Because some metrics are reported from multiple services (such as service uptime), the name is not required to be unique across all services.</p> <p>All information (keys, values, tags, etc.) is in string format and placed in a JSON array within the message body.  Here are some example representations:</p> <ul> <li> <p>Example metric message body with a single value</p> <pre><code>{\"name\":\"service-up\", \"value\":\"120\", \"timestamp\":\"1602168089665570000\", \"tags\":{\"service\":\"coredata\",\"uom\":\"days\",\"type\":\"int64\"}}\n</code></pre> </li> <li> <p>Example metric message body with multiple values</p> <pre><code>{\"name\":\"api-requests\", \"value\":\"24\", \"timestamp\":\"1602168089665570001\", \"tags\":{\"service\":\"coredata\",\"uom\":\"count\",\"type\":\"int64\", \"mean\":\"0.0665\", \"rate1\":\"0.111\", \"rate5\":\"0.150\",\"rate15\":\"0.111\"}}\n</code></pre> </li> </ul> <p>Info</p> <p>The key or metric name must be unique when using go-metrics as it requires the metric name to be unique per the registry.  Metrics are considered immutable.</p>"},{"location":"design/adr/0006-Metrics-Collection/#configuration","title":"Configuration","text":"<p>Configuration, not unlike that provided in core data or any device service, will specify the message bus type and locations where the metrics messages should be sent.  In fact, the message bus configuration will use (or reuse if the service is already using the message bus) the common message bus configuration as defined below.</p> <p>Common configuration for each service for message queue configuration (inclusive of metrics):</p> <pre><code>[MessageQueue]\nProtocol = 'redis'  ## or 'tcp'\nHost = 'localhost'\nPort = 5573\nType = 'redis'  ## or 'mqtt'\nPublishTopicPrefix = \"edgex/events/core\" # standard and existing core or device topic for publishing  \n[MessageQueue.Optional]\n# Default MQTT Specific options that need to be here to enable environment variable overrides of them\n# Client Identifiers\nClientId = \"device-virtual\"\n# Connection information\nQos = \"0\" # Quality of Service values are 0 (At most once), 1 (At least once) or 2 (Exactly once)\nKeepAlive = \"10\" # Seconds (must be 2 or greater)\nRetained = \"false\"\nAutoReconnect = \"true\"\nConnectTimeout = \"5\" # Seconds\nSkipCertVerify = \"false\" # Only used if Cert/Key file or Cert/Key PEMblock are specified\n</code></pre> <p>Additional configuration must be provided in each service to provide metrics / telemetry specific configuration.  This area of the configuration will likely be different for each type of service.</p> <p>Additional metrics collection configuration to be provided include: </p> <ul> <li>Trigger the collection of telemetry from the metrics cache and sending it into the appointed message bus.</li> <li>Define which metrics are available and which are turned <code>off</code> and <code>on</code>.  All are false by default.  The list of metrics can and likely will be different per service.  The keys in this list are the metric name.  True and false are used for <code>on</code> and <code>off</code> values.</li> <li>Specify the metrics topic prefix where metrics data will be published to (ex:  providing the prefix /edgex/telemetry/topic name where the service and metric name <code>[service-name]/[metric-name]</code> will be appended per metric (allowing subscribers to filter by service or metric name)</li> </ul> <p>These metrics configuration options will be defined in the <code>Writable</code> area of <code>configuration.toml</code> so as to allow for dynamic changes to the configuration (when using Consul).  Specifically, the <code>[Writable].[Writable.Telemetry]</code> area will dictate metrics collection configuration like this:</p> <pre><code>[[Writable]]\n[[Writable.Telemetry]]\nInterval = \"30s\"\nPublishTopicPrefix  = \"edgex/telemetry\" # /&lt;service-name&gt;/&lt;metric-name&gt; will be added to this Publish Topic prefix\n#available metrics listed here.  All metrics should be listed off (or false) by default\nservice-up = false\napi-requests = false\n</code></pre> <p>Info</p> <p>It was discussed that in future EdgeX releases, services may want separate message bus connections.  For example one for sensor data and one for metrics telemetry data.  This would allow the QoS and other settings of the message bus connection to be different. This would allow sensor data collection, for example, to be messaged with a higher QoS than that of metrics.  As an alternate approach, we could modify go-mod-messaging to allow setting QoS per topic (and thereby avoid multiple connections).  For the initial release of this feature, the service will use the same connection (and therefore configuration) for metrics telemetry as well as sensor data.  </p>"},{"location":"design/adr/0006-Metrics-Collection/#library-support","title":"Library Support","text":"<p>Each service will now need go-mod-messaging support (for GoLang services and the equivalent for C services).  Each service would determine when and what metrics to collect and push to the message bus, but will use a common library chosen for each EdgeX language supported (Go or C currently)</p> <p>Use of go-metrics (a GoLang library to publish application metrics) would allow EdgeX to utilize (versus construct) a library utilized by over 7 thousand projects.  It provides the means to capture various types of metrics in a registry (a sophisticated map).  The metrics can then be published (<code>reported</code>) to a number of well known systems such as InfluxDB, Graphite, DataDog, and Syslog.  go-metrics is a Go library made from original Java package https://github.com/dropwizard/metrics.</p> <p>A similar package would need to be selected (or created) for C.  Per the Core WG meeting of 2/24/22 - it is important to provide an implementation that is the same in Go or C.  The adopter of EdgeX should not see a difference in whether the metrics/telemetry is collected by a C or Go service.  Configuration of metrics in a C or Go service should have the same structure.  The C based metrics collection mechanism in C services (specifically as provided for in our C device service SDK) may operate differently \"under the covers\" but its configuration and resulting metrics messages on the EdgeX message bus must be formatted/organized the same.</p> <p> Considerations in the use of go-metrics </p> <ul> <li>This is a Golang only library.  Using this library would not provide with any package to use for the C services.  If there are expectations for parity between the services, this may be more difficult to achieve given the features of go-metrics.</li> <li>go-metrics will still require the EdgeX team to develop a bootstrapping apparatus to take the metrics configuration and register each of the metrics defined in the configuration in go-metrics.</li> <li>go-metrics would also require the EdgeX team to develop the means to periodically extract the metrics data from the registry and ship it via message bus (something the current go-metrics library does not do).</li> <li>While go-metrics offers the ability for data to be reported to other systems, it would required EdgeX to expose these capabilities (possibly through APIs) if a user wanted to export to these subsystems in addition to the message bus.</li> <li>Per the Kamakura Planning Meeting, it was noted that go-metrics is already a dependency in our Go code due to its use other 3rd party packages (see https://github.com/edgexfoundry/edgex-go/blob/4264632f3ddafb0cbc2089cffbea8c0719035c96/go.sum#L18).</li> </ul> <p> Community questions about go-metrics  Per the Monthly Architect's meeting of 9/20/21):</p> <ul> <li>How it manages the telemetry data (persistence, in memory, database, etc.)?<ul> <li>In memory - in a \"registry\"; essentially a key/value store where the key is the metric name</li> </ul> </li> <li>Does it offer a query API (in order to easily support the ADR suggested REST API)?<ul> <li>Yes - metrics are stored in a \"Registry\" (MetricRegistry - essentially a map).  Get (or GetAll) methods provided to query for metrics</li> </ul> </li> <li>What does the go-metrics package do so that its features can become requirements for C side?<ul> <li>About a dozen types of metrics collection (simple gauge or counter to more sophisticated structures like Histograms) - all stored in a registry (map).</li> </ul> </li> <li>How is the data made available?<ul> <li>Report out (export or publish) to various integrated packages (InfluxDB, Graphite, DataDog, Syslog, etc.).  Nothing to MQTT or other base message service.  This would have to be implemented from scratch.</li> </ul> </li> <li>Can the metric/telemetry count be reset if needed? Does this happen whenever it posts to the message bus?  How would this work for REST?<ul> <li>Yes, you can unregister and re-register the metric.  A REST API would have to be constructed to call this capability.</li> </ul> </li> </ul> <p>As an alternative to go-metrics, there is another library called OpenCensus.  This is a multi-language metrics library, including Go and C++.  This library is more feature rich.  OpenCensus is also roughly 5x the size of the go-metrics library.</p>"},{"location":"design/adr/0006-Metrics-Collection/#additional-open-questions","title":"Additional Open Questions","text":"<ul> <li>Should consideration be given to allow metrics to be placed in different topics per name?  If so, we will have to add to the topic name like we do for device name in device services?<ul> <li>A future consideration</li> </ul> </li> <li>Should consideration be given to incorporate alternate protocols/standards for metric collection such as https://opentelemetry.io/ or https://github.com/statsd/?<ul> <li>Go metrics is already a library pulled into all Go services.  These packages may be used in C side implementations.</li> </ul> </li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#decision","title":"Decision","text":"<ul> <li>Per the Monthly Architect's meeting of 12/13/21 - it was decided to use go-metrics for Go services over creating our own library or using open census.  C services will either find/pick a package that provides similar functionality to go-metrics or implement internally something providing MVP capability.</li> <li>Use of go-metrics helps avoid too much service bloat since it is already in most Go services.</li> <li>Per the same Monthly Architect's meeting, it as decided to implement metrics in Go services first.</li> <li>Per the Monthly Architect's meeting of 1/24/22 - it was decided not to support a REST API on all services that would provide information on what metrics the service provides and the ability to turn them on / off.  Instead, the decision was to use <code>Writable</code> configuration and allow Consul to be the means to change the configuration (dynamically).  If an adopter chooses not to use Consul, then the configuration with regard to metrics collection, as with all configuration in this circumstance, would be static.  If an external API need is requested in the future (such as from an external UI or tool), a REST API may be added.  See older versions of this PR for ideas on implementation in this case.</li> <li>Per Core Working Group meeting of 2/24/22 (and in many other previous meetings on this ADR) - it was decided that the EdgeX approach should be one of push (via message bus/MQTT) vs. pull (REST API). Both approaches require each service to collect metric telemetry specific to that service.  After collecting it, the service must either push it onto a message topic (as a message) or cache it (into memory or some storage mechanism depending on whether the storage needs to be durable or not) and allow for a REST API call that would cause the data to be pulled from that cache and provided in a response to the REST call.  Given both mechanisms require the same collection process, the belief is that push is probably preferred today by adopters.  In the future, if highly desired, a pull REST API could be added (along with a decision on how to cache the metrics telemetry for that pull). </li> <li>Per Core Working Group meeting of 2/24/22 - importantly, EdgeX is just making the metrics telemetry available on the internal EdgeX message bus.  An adopter would need to create something to pull the data off this bus to use it in some way.  As voiced by several on the call, it is important for the adopter to realize that today, \"we (EdgeX) are not providing the last mile in metrics data\".  The adopter must provide that last mile which is to pick the data from the topic, make it available to their systems and do something with it.</li> <li>Per Core Working Group meeting of 2/24/22 (and in many other previous meetings on this ADR) - it was decided not to use Prometheus (or Prometheus library) as the means to provide for metrics.  The reasons for this are many:<ul> <li>Push vs pull is favored in the first implementation (see point above).  Also see similar debate online for the pluses/minuses of each approach.</li> <li>EdgeX wants to make telemetry data available without dictating the specific mechanism for making the data more widely available.  Specific debate centered on use of Prometheus as a popular collection library (to use inside of services to collect the data) as well as a monitoring system to watch/display the data.  While Prometheus is popular open source approach, it was felt that many organizations choose to use InfluxDB/Grafana, DataDog, AppDynamics, a cloud provided mechanism, or their own home-grown solution to collect, analyse, visualize and otherwise use the telemetry.  Therefore, rather than dictating the selection of the monitoring system, EdgeX would simply make the data available whereby and organization could choose their own monitoring system/tooling.  It should be noted that the EdgeX approach merely makes the telemetry data available by message bus.  A Prometheus approach would provide collection as well as backend system to otherwise collect, analyse, display, etc. the data.  Therefore, there is typically work to be done by the adopter to get the telemetry data from the proposed EdgeX message bus solution and do something with it.</li> <li>There are some <code>reporters</code> that come with go-metrics that allow for data to be taken directly from go-metrics and pushed to an intermediary for Prometheus and other monitoring/telemetry platforms as referenced above.  These capabilities may not be very well supported and is beyond the scope of this EdgeX ADR.  However, even without <code>reporters</code>, it was felt a relatively straightforward exercise (on the part of the adopter) to create an application that listens to the EdgeX metrics message bus and makes that data available via pull REST API for Prometheus if desired.</li> <li>The Prometheus client libraries would have to be added to each service which would bloat the services (although they are available for both Go an C).  The benefit of using go-metrics is that it is used already by Hashicorp Consul (so already in the Go services).</li> </ul> </li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#implementation-details-for-go","title":"Implementation Details for Go","text":"<p>The go-metrics package offers the following types of metrics collection:</p> <ul> <li>Gauges: holds a single integer (int64) value.<ul> <li>Example use:  Number of notifications in retry status</li> <li>Operations to update the gauge and get the gauge's value</li> <li>Example code:</li> </ul> </li> </ul> <pre><code>g := metrics.NewGauge()\ng.Update(42)  // set the value to 42\ng.Update(10)  // now set the value to 10\nfmt.Println(g.Value())  // print out the current value in the gauge = 10\n</code></pre> <ul> <li>Counter: holds a integer (in64) count.  A counter could be implemented with a Gauge.<ul> <li>Example use:  the current store and forward queue size</li> <li>Operations to increment, decrement, clear and get the counter's count (or value)</li> </ul> </li> </ul> <pre><code>c := metrics.NewCounter()\nc.Inc(1)  // add one to the current counter\nc.Inc(10) // add 10 to the current counter, making it 11\nc.Dec(5)  // decrement the counter by 5, making it 6  \nfmt.Println(c.Count())  // print out the current count of the counter = 6\n</code></pre> <ul> <li>Meter:  measures the rate (int64) of events over time (at one, five and fifteen minute intervals).<ul> <li>Example use:  the number or rate of requests on a service API</li> <li>Operations: provide the total count of events as well as the mean and rate at 1, 5, and 15 minute rates</li> </ul> </li> </ul> <pre><code>m := metrics.NewMeter()\nm.Mark(1)  // add one to the current meter value\ntime.Sleep(15 * time.Second)  // allow some time to go by\nm.Mark(1)  // add one to the current meter value\ntime.Sleep(15 * time.Second)  // allow some time to go by\nm.Mark(1)  // add one to the current meter value\ntime.Sleep(15 * time.Second)  // allow some time to go by\nm.Mark(1)  // add one to the current meter value\ntime.Sleep(15 * time.Second)  // allow some time to go by\nfmt.Println(m.Count())  // prints 4\nfmt.Println(m.Rate1())  // prints 0.11075889086811593\nfmt.Println(m.Rate5())  // prints 0.1755318374350548\nfmt.Println(m.Rate15()) // prints 0.19136522498856992\nfmt.Println(m.RateMean()) //prints 0.06665062941438574\n</code></pre> <ul> <li>Histograms: measure the statistical distribution of values (int64 values) in a collection of values.<ul> <li>Example use: response times on APIs</li> <li>Operations: update and get the min, max, count, percentile, sample, sum and variance from the collection</li> </ul> </li> </ul> <pre><code>h := metrics.NewHistogram(metrics.NewUniformSample(4))\nh.Update(10)\nh.Update(20)\nh.Update(30)\nh.Update(40)\nfmt.Println((h.Max()))  // prints 40\nfmt.Println(h.Min())    // prints 10\nfmt.Println(h.Mean())   // prints 25\nfmt.Println(h.Count())  // prints 4\nfmt.Println(h.Percentile(0.25))  //prints 12.5\nfmt.Println(h.Variance())  //prints 125\nfmt.Println(h.Sample())  //prints &amp;{4 {0 0} 4 [10 20 30 40]}\n</code></pre> <ul> <li>Timer: measures both the rate a particular piece of code is called and the distribution of its duration<ul> <li>Example use:  how often an app service function gets called and how long it takes get through the function</li> <li>Operations:  update and get min, max, count, rate1, rate5, rate15, mean, percentile, sum and variance from the collection</li> </ul> </li> </ul> <pre><code>t := metrics.NewTimer()\nt.Update(10)\ntime.Sleep(15 * time.Second)\nt.Update(20)\ntime.Sleep(15 * time.Second)\nt.Update(30)\ntime.Sleep(15 * time.Second)\nt.Update(40)\ntime.Sleep(15 * time.Second)\nfmt.Println((t.Max()))  // prints 40\nfmt.Println(t.Min())    // prints 10\nfmt.Println(t.Mean())   // prints 25\nfmt.Println(t.Count())  // prints 4\nfmt.Println(t.Sum())    // prints 100\nfmt.Println(t.Percentile(0.25))  //prints 12.5\nfmt.Println(t.Variance())  //prints 125\nfmt.Println(t.Rate1())  // prints 0.1116017821771607\nfmt.Println(t.Rate5())  // prints 0.1755821073441404\nfmt.Println(t.Rate15()) // prints 0.1913711954736821\nfmt.Println(t.RateMean()) //prints 0.06665773963998162\n</code></pre> <p>Note</p> <p>The go-metrics package does offer some variants of these like the GaugeFloat64 to hold 64 bit floats.</p>"},{"location":"design/adr/0006-Metrics-Collection/#consequences","title":"Consequences","text":"<ul> <li>Should there be a global configuration option to turn all metrics off/on?<ul> <li>EdgeX doesn't yet have global config so this will have to be by service.</li> </ul> </li> <li>Given the potential that each service publishes metrics to the same message topic, 0MQ is not implementation option unless each service uses a different 0MQ pipe (0MQ topics do not allow multiple publishers).  <ul> <li>Like the DS to App Services implementation, do we allow 0MQ to be used, but only if each service sends to a different 0MQ topic?  Probably not.</li> </ul> </li> <li>We need to avoid service bloat.  EdgeX is not an enterprise system.  How can we implement in a concise and economical way?<ul> <li>Use of Go metrics helps on the Go side since this is already a module used by EdgeX modules (and brought in by default).  Care and concern must be given to not cause too much bloat on the C side.</li> </ul> </li> <li>SMA reports on service CPU, memory, configuration and provides the means to start/stop/restart the services.  This is currently outside the scope of the new metric collection/monitoring.<ul> <li>In the future, 3rd party mechanisms which offer the same capability as SMA may warrant all of SMA irrelevant.</li> </ul> </li> <li>The existing notifications service serves to send a notification via alternate protocol outside of EdgeX.  This communication service is provided as a generic communication instrument from any micro service and is independent of any type of data or concern.<ul> <li>In the future, the notification service could be configured to be a subscriber of the metric messages and trigger appropriate external notification (via email, SMTP, etc.).</li> </ul> </li> </ul>"},{"location":"design/adr/0006-Metrics-Collection/#reference","title":"Reference","text":"<p>Possible standards for implementation</p> <ul> <li>Open Telemetry</li> <li>statsd</li> <li>go-metrics</li> <li>OpenCensus</li> </ul>"},{"location":"design/adr/0018-Service-Registry/","title":"Service Registry","text":"<ul> <li>Status</li> <li>Context</li> <li>Existing Behavior</li> <li>Device Services<ul> <li>Registry Client Interface Usage</li> </ul> </li> <li>Core and Support Services</li> <li>Security Proxy Setup</li> <li>History</li> <li>Problem Statement</li> <li>Decision</li> <li>References</li> </ul>"},{"location":"design/adr/0018-Service-Registry/#status","title":"Status","text":"<p>Approved (by TSC vote on 3/25/21)</p>"},{"location":"design/adr/0018-Service-Registry/#context","title":"Context","text":"<p>An EdgeX system may be run with an optional service registry, the use of which (see the related ADR 0001-Registry-Refactor [1]) can be controlled on a per-service basis via the <code>-r/-registry</code> commmand line options. For the purposes of this ADR, a base assumption is that the registry has been enabled for all services. The default service registry used by EdgeX is Consul [2] from Hashicorp. Consul is also the default configuration provider for EdgeX.</p> <p>This ADR is meant to address the current usage of the registry by EdgeX services, and in particular whether the EdgeX services are using the registry to determine the location of peer services vs. using static per-service configuration. The reason this is being investigated is that there has been a proposal that EdgeX do away with the registry functionality, as the current implementation is not considered secure, due to the current configuration of Consul as used by the latest version of EdgeX (Hanoi/1.3.0).</p> <p>According to the original Service Name Design document (v6) [3] written during the California (0.6) release of EdgeX, all EdgeX Foundry microservices should be able to accomplish the following tasks:</p> <ul> <li>Register with the configuration/registration (referred to simply as \u201cthe registry\u201d for the rest of this document) provider (today Consul)</li> <li>Respond to availability requests</li> <li>Respond to shutdown requests by:</li> <li>Cleaning up resources in an orderly fashion</li> <li>Unregistering itself from the registry</li> <li>Get the address (host &amp; port) of another EdgeX microservice by service name through the registry (when enabled)</li> </ul> <p>The purpose of this design is to ensure that services themselves advertise their location to the rest of the system by first self- registering. Most service registries (including Consul) implement some sort of health check mechanism. If a service is failing one or more health checks, the registry will stop reporting its availability when queried.</p> <p>Note - the design specifically excludes device services from this service lookup, as Core Metadata maintains a persistent store of DeviceService objects which provide service location for device services.</p>"},{"location":"design/adr/0018-Service-Registry/#existing-behavior","title":"Existing Behavior","text":"<p>This section documents the existing behavior in the Hanoi (1.3.x) version of EdgeX.</p>"},{"location":"design/adr/0018-Service-Registry/#device-services","title":"Device Services","text":"<p>Device Virtual's behavior was first tested using the edgexfoundry snap (which is configured to always use the registry) by doing the following:</p> <p>$ sudo snap install edgexfoundry $ cp /var/snap/edgexfoundry/current/config/device-virtual/res/configuration.toml .</p> <p>I edited the file, removing the <code>[Client.Data]</code> section completely and copied the file back into place. Next I enabled device-virtual while monitoring the journal output.</p> <pre><code>$ sudo cp configuration.toml /var/snap/edgexfoundry/current/config/device-virtual/res/\n$ sudo snap set edgexfoundry device-virtual=on\n</code></pre> <p>The following error was seen in the journal:</p> <pre><code>level=INFO app=device-virtual source=httpserver.go:94 msg=\"Web server starting (0.0.0.0:49990)\"\nerror: fatal error; Host setting for Core Data client not configured\n</code></pre> <p>Next I followed the same steps, but instead of completely removing the client, I instead set the client ports to invalid values. In this case the service logged the following errors and exited:</p> <pre><code>level=ERROR app=device-virtual source=service.go:149 msg=\"DeviceServicForName failed: Get \\\"http://localhost:3112/api/v1/deviceservice/name/device-virtual\\\": dial tcp 127.0.0.1:3112: connect: connection refused\"\nlevel=ERROR app=device-virtual source=init.go:45 msg=\"Couldn't register to metadata service: Get \\\"http://localhost:3112/api/v1/deviceservice/name/device-virtual\\\": dial tcp 127.0.0.1:3112: connect: connection refused\\n\"\n</code></pre> <p>Note - in order to run this second test, the easiest way to do so is to remove and reinstall the snap vs. manually wiping out device-virtual's configuration in Consul. I could have also stopped the service, modified the configuration directly in Consul, and restarted the service.</p>"},{"location":"design/adr/0018-Service-Registry/#registry-client-interface-usage","title":"Registry Client Interface Usage","text":"<p>Next the service's usage of the go-mod-registry <code>Client</code> interface was examined:</p> <pre><code>type Client interface {\n        // Registers the current service with Registry for discover and health check\n        Register() error\n\n        // Un-registers the current service with Registry for discover and health check\n        Unregister() error\n\n        // Simply checks if Registry is up and running at the configured URL\n        IsAlive() bool\n\n        // Gets the service endpoint information for the target ID from the Registry\n        GetServiceEndpoint(serviceId string) (types.ServiceEndpoint, error)\n\n        // Checks with the Registry if the target service is available, i.e. registered and healthy\n        IsServiceAvailable(serviceId string) (bool, error)\n}\n</code></pre>"},{"location":"design/adr/0018-Service-Registry/#summary","title":"Summary","text":"<p>If a device service is started with the registry flag set:</p> <ul> <li>Both Device SDKs register with the registry on startup, and unregister from the registry on normal shutdown.</li> <li>The Go SDK (device-sdk-go) queries the registry to check dependent service availability and health (via <code>IsServiceAvailable</code>) on startup. Regardless of the registry setting, the Go SDK always sources the addresses of its dependent services from the Client* configuration stanzas.</li> <li>The C SDK queries the registry for the addresses of its dependent services. It pings the services directly to determine their availbility and health.</li> </ul>"},{"location":"design/adr/0018-Service-Registry/#core-and-support-services","title":"Core and Support Services","text":"<p>The same approach was used for Core and Support services (i.e. reviewing the usage of go-mod-bootstrap's <code>Client</code> interface), and ironically, the SMA seems to be the only service in edgex-go that actually queries the registry for service location:</p> <pre><code>./internal/system/agent/getconfig/executor.go:      ep, err := e.registryClient.GetServiceEndpoint(serviceName)\n./internal/system/agent/direct/metrics.go:      e, err := m.registryClient.GetServiceEndpoint(serviceName)\n</code></pre> <p>In summary, other than the SMA's configuration and metrics logic, the Core and Support services behave in the same manner as device-sdk-go.</p> <p>Note - the SMA also has a longstanding issue #2486 where it continuousy logs errors if one (or more) of the Support Services are not running. As described in the issue, this could be avoided if the SMA used the registry to determine if the services were actually available. See related issue #1662 ('Look at Driving \"Default Services List\" via Configuration').</p>"},{"location":"design/adr/0018-Service-Registry/#security-proxy-setup","title":"Security Proxy Setup","text":"<p>The security-proxy-setup service also relies on static service address configuration to configure the server routes for each of the services accessible through the API Gateway (aka Kong). Although it uses the same TOML-based client config keys as the other services, these configuration values are only ever read from the security-proxy-setup's local configuration.toml file, as the security services have never supported using our configuration provider (aka Consul).</p> <p>Note - Another point worth mentioning with respect to security services is that in the Geneva and Hanoi releases the service health checks registered by the services (and the associated <code>IsServiceAvailable</code> method) are used to orchestrate the ordered startup of the security services via a set of Consul scripts. This additional orchestration is only performed when EdgeX is deployed via docker, and is slated to to be removed as part of the Ireland release.</p>"},{"location":"design/adr/0018-Service-Registry/#history","title":"History","text":"<p>After a bit of research reaching as far back as the California (0.6.1) release of EdgeX, I've managed to piece together why the current implementation works the way it does. This history focues solely on the core and support services.</p> <p>The California release of EdgeX was released in June of 2018 and was the first to include services written using Go. This version of EdgeX as well as versions through the Fuji release all relied on a bootstrapping service called core-config-seed which was responsible for seeding the configuration of all of the core and support services into Consul prior to any of the services being started.</p> <p>This release actually preceded usage of TOML for configuration files, and instead just used a flat key/value format, with keys converted from legacy Java property names (e.g. meta.db.device.url ) to Camel[Pascal]/Case (e.g. MetaDeviceServiceURL).</p> <p>I chose the config key mentioned above on purpose:</p> <pre><code>MetaDeviceURL = \"http://edgex-core-metadata:48081/api/v1/device\"\n</code></pre> <p>Not only did this config key provide the address of core metadata, it also provided the path of a specific REST endpoint. In later releases of EdgeX, the address of the service and the specific endpoint paths were de-coupled. Instead of following the Service Name design (which was finalized two months earlier), the initial implementation followed the legacy Java implementation and initialized its service clients for each required REST endpoint (belonging to another EdgeX service) directly from the associated *URL config key read from Consul (if enabled) or directly from the configuration file.</p> <p>The shared client initialization code also created an Endpoint monitor goroutine and passed it a go channel channel used by the service to receive updates to the REST API endpoint URL. This monitor goroutine effectively polled Consul every 15s (this became configurable in later versions) for the client's service address and if a change was detected, would write the updated endpoint URL to the given channel, effectively ensuring that the service started using the new URL.</p> <p>It wasn't till late in the Geneva development cycle that I noticed log messages which made me aware of the fact that every one of our services was making a REST call to check the address of a service endpoint every 15s, for every REST endpoint it used! An issue was filed (https://github.com/edgexfoundry/edgex-go/issues/2594), and the client monitoring was removed as part of the Geneva 1.2.1 release.</p>"},{"location":"design/adr/0018-Service-Registry/#problem-statement","title":"Problem Statement","text":"<p>The fundamental problem with the existing implementations (as decribed above), is that there is too much duplication of configuration across services. For instance, Core Data's service port can easily be changed by passing the environment variable SERVICE_PORT to the service on startup. This overrides the configuration read from the configuration provider, and will cause Core Data to listen on the new port, however it has no impact on any services which use Core Data, as the client config for each is read from the configuration provider (excluding security-proxy-setup).</p> <p>This means in order to change a service port, environment variable overrides (e.g. CLIENTS_COREDARA_PORT) need to set for every client service as well as security-proxy-setup (if required).</p>"},{"location":"design/adr/0018-Service-Registry/#decision","title":"Decision","text":"<p>Update the core, support, and security-proxy-setup services to use go-mod-registry's <code>Client.GetServiceEndpoint</code> method (if started with the <code>--registry</code> option) to determine (a) if a service dependency is available and (b) use the returned address information to initialize client endpoints (or setup the correct route in the case of proxy-setup). The same changes also need to be applied to the App Functions SDK and Go Device SDK, with only minor changes required in the C Device SDK (see previous commments re: the current implementation).</p> <p>Note - this design only works if service registration occurs before the service initializes its clients. For instance, Core Data and Core Metadata both depend on the other, and thus if both defer service registration till after client initialization, neither will be able to successfully lookup the address of the other service.</p>"},{"location":"design/adr/0018-Service-Registry/#consquences","title":"Consquences","text":"<p>One impact of this decision is that since the security-proxy-setup service currently runs before any of the core and support services are started, it would not be possible to implement this proposal without also modifying the service to use a lazy initialization of the API Gateway's routes. As such, the implementation of this ADR will require more design work with respect to security-proxy-setup. Some of the issues include:</p> <ul> <li>Splitting the configuration of the API Gateway from the service route intialization logic, either by making the service long-running or splitting     route initialization into it's own service.</li> <li>Handling registry and non-registry scenarios (i.e. add <code>--registry</code> command-line support to security-proxy-setup).</li> <li>Handling changes to service address information (i.e. dynamically update API Gateway routes if/when service addresses change).</li> <li>Finally the proxy-setup's configuration needs to be updated so that its <code>Route</code> entries use service-keys instead of arbitrary names (e.g.     (<code>Route.core-data</code> vs. <code>Route.CoreData</code>).</li> </ul>"},{"location":"design/adr/0018-Service-Registry/#references","title":"References","text":"<ul> <li>[1] ADR 0001-Registry-Refactor</li> <li>[2] Consul</li> <li>[3] Service Name Design v6</li> </ul>"},{"location":"design/adr/0023-North-South-Messaging/","title":"North-South Messaging","text":""},{"location":"design/adr/0023-North-South-Messaging/#status","title":"Status","text":"<p>Approved by TSC Vote on 4/28/22</p>"},{"location":"design/adr/0023-North-South-Messaging/#context-and-proposed-design","title":"Context and Proposed Design","text":"<p>Today, data flowing from sensors/devices (the \u201csouthside\u201d) through EdgeX to enterprise applications, databases and cloud-based systems (the \u201cnorthside\u201d) can be accomplished via REST or Message bus.  That is, sensor or device data collected by a device service can be sent via REST or message bus to core data.  Core data then relays the data to application services via message bus, but the sensor data can also be sent directly from device services to application services via message bus (bypassing core data).  The message bus is implemented via Redis Pub/Sub (default) or via MQTT.  From the application services, data can be sent to northside endpoints in any number of ways \u2013 including via MQTT.</p> <p>So, in summary, data can be collected from a sensor or device and be sent from the southside to the northside entirely using message bus technology when desired.</p> <p>Today, communications from a 3rd party system (enterprise application, cloud application, etc.) to EdgeX in order to acuate a device or get the latest information from a sensor is accomplished via REST.  The 3rd party system makes a REST call of the command service which then relays a request to a device service also using REST.  There is no built in means to make a message-based request of EdgeX or the devices/sensors it manages.  Note, these REST calls are optionally made via the API Gateway in order to provide access control.</p> <p>In a future release of EdgeX, there is a desire to allow 3rd party systems to make requests of the southside via message bus.  Specifically, a 3rd party system will send a command request to the command service via external message broker. The command service would then relay the request via message bus to the managing device service via one of the allowed internal message bus implementations (which could be MQTT or Redis Pub/Sub today).  The device service would use the message to trigger action on the device/sensor as it does when it receives a REST request, and respond via message bus back to the command service.  In turn, the command service would relay the response to the 3rd party system via external message bus.</p> <p>In summary, this ADR proposes that the core command service adds support for an external MQTT connection (in the same manner that app services provide an external MQTT connection), which will allow it to act as a bridge between the internal message bus (implemented via either MQTT or Redis Pub/Sub) and external MQTT message bus.</p> <p></p> <p>Note</p> <p>For the purposes of this initial north-to-south message bus communications, external 3rd party communications to the command service will be limited to use of MQTT.</p>"},{"location":"design/adr/0023-North-South-Messaging/#core-command-as-message-bus-bridge","title":"Core Command as Message Bus Bridge","text":"<p>The core command service will serve as the EdgeX entry point for external, north-to-south message bus requests to the south side.</p> <p></p> <p>3rd party systems should not be granted access to the EdgeX internal message bus.  Therefore, in order to implement north to south communications via message bus (specifically MQTT), the command service needs to take messages from the 3rd party or external MQTT topics and pass them internally onto the EdgeX internal message bus where they can eventually be routed to the device services and then on to the devices/sensors (southside).</p> <p>In reverse, response messages from the southside will also be sent through the internal EdgeX message bus to the command service where they can then be bridged to the external MQTT topics and respond to the 3rd party system requester.</p> <p>Note</p> <p>Note that eKuiper is allowed access directly to the internal EdgeX message bus.  This is a special circumstance of 3rd party external system communication as eKuiper is a sister project that is deemed the EdgeX reference implementation rules engine.  In future releases of EdgeX, even eKuiper may be routed through an external to internal message bus bridge for better decoupling and security.</p>"},{"location":"design/adr/0023-North-South-Messaging/#message-bus-subscriptions-and-publishing","title":"Message Bus Subscriptions and Publishing","text":"<p>The command service will require the means to publish messages to device services via the EdgeX message bus (internal message bus).  It would use the messaging client (go-mod-messaging) to create a new MessageClient, connect to the message bus, and publish to designated request message topics (see topic configuration below).</p> <p>The command service will also need to connect to the EdgeX message bus (internal message bus) in order to receive responses from the device services after a request by message bus has been made.  Again, core command will use the go-mod-messaging MessageClient to subscribe and receive response messages from the device services.</p> <p>In a similar fashion, device services will need to both subscribe and publish to the EdgeX message bus (internal message bus) to get command requests and push back any responses to the command service.  Go lang device services will, like the command service, use the go-mod-messaging module and MessagingClient to get command requests and send command responses to and from the EdgeX message bus.  C based device services will use a C alternative to subscribe and publish to the EdgeX message bus (internal message bus).  Note, device services already use go-mod-messaging when publishing events/readings to the message bus (internal message bus).</p> <p>The command service will also need to subscribe to 3rd party MQTT topics (external message bus) in order to get command requests from the 3rd party system.  The command service will then relay command requests on to the appropriate device service via the internal message bus (forming the message bus to message bus bridge).  Likewise, the command service will accept responses from the device services on the EdgeX message bus (internal message bus) and then publish responses to the 3rd party system via the 3rd party MQTT topics (external message bus).</p>"},{"location":"design/adr/0023-North-South-Messaging/#command-queries-via-command-service","title":"Command Queries via Command Service","text":"<p>Today, 3rd party systems can make a REST call of core command to get the possible commands that can be executed.  There are two query REST API endpoints:  /device/all (to get the commands for all devices) and device/name/{name} (to get the commands for a specific device by name).</p> <p>It stands to reason that if a 3rd party system wants to send commands via messaging that they would also want to get an understanding of what commands are available via messaging.  For this reason, the core command service will also allow message requests to get all command or get all commands for a particular device name.  In other words, the core command service must support command \"queries\" via messaging just as it supports command requests via messaging.</p> <p>In the case of command queries, the REST responses include the actual REST command endpoints.  For example, the REST query would return core command paths, urls and parameters used to construct REST command requests (as shown in the example below).</p> <pre><code> \"coreCommands\": [\n{\n\"name\": \"coolingpoint1\",\n\"get\": true,\n\"path\": \"/api/v2/device/name/testDevice1/command/coolingpoint1\",\n\"url\": \"http://localhost:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"resource1\",\n\"valueType\": \"Int32\"\n}\n]\n}\n]\n</code></pre> <p>When using messaging to make the \"queries\" the response message must return information about how to pass a message to the appropriate topic to make the command request.  Therefore, the query response when using messaging would include something like the following:</p> <pre><code> \"coreCommands\": [\n{\n\"name\": \"coolingpoint1\",\n\"topic\": \"/edgex/command/request/testDevice1/coolingpoint/get\",\n\"parameters\": [\n{\n\"resourceName\": \"resource1\",\n\"valueType\": \"Int32\"\n}          ]\n},\n{\n\"name\": \"coolingpoint1\",\n\"topic\": \"/edgex/command/request/testDevice1/coolingpoint1/set\",\n\"parameters\": [\n{\n\"resourceName\": \"resource1\",\n\"valueType\": \"Int32\"\n}          ]\n}\n]\n</code></pre> <p>Note</p> <p>Per Core WG meeting of 4/7/22 - the JSON above serves as a general example.  The implementation will have to address get/set (or read/write) differentiation, but this is considered an implementation detail to be resolved by the developers.</p> <p>Note</p> <p>The query response does not contain a URL since it is assumed that the broker address must already be known in order to make the query.</p>"},{"location":"design/adr/0023-North-South-Messaging/#message-structure","title":"Message Structure","text":"<p>In REST based command requests (and responses), the HTTP request line contains important information such as the path or target of the request, and the HTTP method type (indicating a GET or PUT request).  The HTTP status line provides the information such as the response code (ex: 200 for OK).  The body or payload of the HTTP message contains the request details (such as parameters to a device PUT call) or response information (such as events and associated readings from a GET call).  </p> <p>Since most message bus protocols lack a generic message header mechanism (as in HTTP), providing request/response metadata is accomplished by defining a <code>message</code> envelope object associated with each request/response.  Therefore, messages described in this ADR must provide JSON <code>envelope</code> and <code>payload</code> objects for each request/response.</p> <p>The message topic names act like the HTTP paths and methods in REST requests.  That is, the topic names specify the device receiver of any command request as paths do in the HTTP requests.</p> <p></p>"},{"location":"design/adr/0023-North-South-Messaging/#message-envelope","title":"Message Envelope","text":"<p>The messages defined in this ADR are JSON formatted requests and responses that share a common base structure. The outer most JSON object represents the message <code>envelope</code>, which is used to convey metadata about request/response (e.g. a correlation identifier which will be added to any relayed request message as well as the response message envelope so that the 3rd party system will know to associate the responses to the original request).</p> <p>Note<p>A Correlation ID (see this article for a more detailed description) is a unique value that is added to every request and response involved in a transaction which could include multiple requests/responses between one or more microservices. It's not meant to correlate requests to responses, its meant to label every message involved in a potentially multi-request transaction.</p> <p>A Request ID should be an identifier returned on the response to a request (providing traceability between single request/response).</p> </p> <p>The <code>envelope</code> will also contain the API version (something provided in the HTTP path when using REST).</p> <p>Command requests in HTTP may also contain ds-pushevent and ds-returnevent query parameters (for GET commands).  These will be optionally provided key/value pairs represented in the message <code>envelope</code>'s query parameters (and optionally allows for other parameters in the future).</p> <pre><code>{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"API\":\"V2\",\n\"queryParams\": {\n\"ds-pushevent\":\"yes\",\n\"ds-returnevent\":\"yes\",\n}\n...\n}\n</code></pre> <p>Note</p> <p>As with REST requests, if the ds-returnvent was <code>no</code>, then a message with envelope would be returned but with no payload as there would be no events to return.</p>"},{"location":"design/adr/0023-North-South-Messaging/#command-message-payload","title":"Command Message Payload","text":"<p>The request message <code>payload</code> to the command service and those relayed to the device service would mimic their HTTP/REST request body alternatives.  The <code>payload</code> provides details needed in executing the command at the south side.</p> <p>In the example GET and PUT messages below, note the <code>envelope</code> wraps or encases the message <code>payload</code>.  The payload may be empty (as is typical of GET requests).</p> <pre><code>{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"apiVersion\": \"v2\",\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"queryParams\": {\n\"ds-pushevent\":\"yes\",\n\"ds-returnevent\":\"yes\",\n}\n}\n\n{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"apiVersion\": \"v2\",\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"payload\": {\n\"AHU-TargetTemperature\": \"28.5\",\n\"AHU-TargetBand\": \"4.0\",\n\"AHU-TargetHumidity\": {\n\"Accuracy\": \"0.2-0.3% RH\",\n\"Value\": 59\n}\n}\n}\n</code></pre> <p>Note</p> <p>Payload could be empty and therefore optional in the message structure - and exemplified in the top example here.</p> <p>The response message <code>payload</code> would contain the response from the south side, which is typically EdgeX event/reading objects (in the case of GET requests) but would also include any error message details.</p> <p>Example response messages for a GET and PUT request are shown below.  Again, note that the message <code>envelope</code> wraps the response <code>payload</code>.</p> <pre><code>{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"apiVersion\": \"v2\",\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"errorCode\": 0,\n\"payload\": {\n\"event\": {\n\"apiVersion\": \"v2\",\n\"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n\"deviceName\": \"string\",\n\"profileName\": \"string\",\n\"created\": 0,\n\"origin\": 0,\n\"readings\": [\n\"string\"\n],\n\"tags\": {\n\"Gateway-id\": \"HoustonStore-000123\",\n\"Latitude\": \"29.630771\",\n\"Longitude\": \"-95.377603\"\n}\n}\n}\n}\n\n{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"apiVersion\": \"v2\",\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"errorCode\": 1,\n\"payload\": {\n\"message\": \"string\"\n}\n}\n</code></pre> <p>Note<p>Get command responses may include CBOR data.  The message envelope (which has a content type indicator) will indicate that the payload is either CBOR or JSON.  The same message envelope content type indicator that is used in REST communications will be used in this message bus communications.</p> </p> <p>Alert</p> <p>Open discussions per working group meetings and reviews...</p> <ul> <li>Should we be validating the messages for version (V2 in this case)?  Per @lenny-intel, do we validate incoming REST requests for the particular version of the APIs?<ul> <li>Ans (per monthly architect's meeting of 3/28/22): yes we should be validating, but this is not done in REST either.  We should implement validation for this message communications.  We should also add validation in REST communications in the future (Levski release??).  Add this to future planning meeting topics.</li> </ul> </li> <li>Should API version be in the response at all?  Per @iain-anderson, would the API version be implied in that a V2 request would mean a V2 response?<ul> <li>Ans (per monthly architect's meeting of 3/28/22): the DTO already has API version so it will be in the payload automatically.  Additionally, it was decided to add it to the message envelope.  The reason for this is that when using REST, the path of the request includes the version.  But in message communications which lacks the URL/path, it will be beneficial to also include the version in the envelope (in addition to the payload as part of the DTO) so that it is easily determined from the envelope without having to dig around in the payload.</li> </ul> </li> <li>Per core WG meeting discussion of 2/24/22 - do we really need the request id (is it redundant based on already having correlation id)?<ul> <li>Ans (per monthly architect's meeting of 3/28/22): request id and correlation id are two different things.  Request id should be returned on the response to a request (providing traceability between single request/response).  Correlation id is used to track across an entire transaction of many service request/responses (providing traceability across a \"transaction\" which is often across many services).  So both are needed and should be kept.</li> </ul> </li> <li>If we have request id, should it be in the payload?<ul> <li>Ans (per monthly architect's meeting of 3/28/22): This should be kept in the message envelope (not the message payaload).</li> </ul> </li> <li>Per core WG meeting discussion of 2/24/22 - do we have status code?  If so should it mimic the REST/HTTP status code responses?  Do we really want to mimic HTTP in our message bus approach?  As suggested by @farshidtz, maybe we should just have an <code>error</code> boolean and then have the message indicate the error condition. <ul> <li>Ans (per monthly architect's meeting of 3/28/22): We will use errorCode to provide the indication of error.  The errorCode will be 0 (no error) or 1 (indicating error) as the two enums for error conditions today.  In the future, if we determine the need for additional errors, we will add more \"enums\" or error code numbers.  When there is an error (with errorCode set to 1), then the payload contains a message string indicating more information about the error.  When there is no error (errorCode 0) then there is no message string in the payload. </li> </ul> </li> <li>If we have a status code or error code, where does it belong?  In the payload or in the envelope (as it would be in the header in REST)?  As a reference, the IoTAAP MQTT to REST bridge provides a status code to message string translation as an example means to handle this problem.  Should we use something similar?<ul> <li>Ans (per monthly architect's meeting of 3/28/22): errorCode should be in the message envelope not the payload.  When there is an error, the payload contains a single message string.</li> </ul> </li> </ul>"},{"location":"design/adr/0023-North-South-Messaging/#query-message-payload","title":"Query Message Payload","text":"<p>The request message <code>payload</code> to query the command service would mimic their HTTP/REST request body alternatives.  The <code>payload</code> provides details needed in executing the command at the south side.</p> <p>In the example query to get all commands below, note the <code>envelope</code> wraps or encases the message <code>payload</code>.  The payload will be empty.  The query parameters will include the offset and limit (as per the REST counter parts).</p> <pre><code>{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"apiVersion\": \"v2\",\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"queryParams\": {\n\"offset\":0,\n\"limit\":20,\n}\n}\n\nIn the example query to get commands for a specific device by name, the device name would be in the topic, so the query message would be without information (and removed from the message as queryParams will be optional).\n\n{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"apiVersion\": \"v2\",\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n}\n</code></pre> <p>The response message <code>payload</code> for queries would contain the information necessary to make a message-based command request.</p> <p>An example response message is shown below.  Again, note that the message <code>envelope</code> wraps the response <code>payload</code>.</p> <pre><code>{\n\"Correlation-ID\": \"14a42ea6-c394-41c3-8bcd-a29b9f5e6835\",\n\"apiVersion\": \"v2\",\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"errorCode\": 0,\n\"payload\": {\n\"apiVersion\": \"v2\",\n\"deviceCoreCommands\": [\n{\n\"deviceName\": \"testDevice1\",\n\"profileName\": \"testProfile\",\n\"coreCommands\": [\n{\n\"name\": \"coolingpoint1\",\n\"get\": true,\n\"topic\": \"/edgex/command/request/testDevice1/coolingpoint1/get\",\n\"url\": \"broker.address:1883\",\n\"parameters\": [\n{\n\"resourceName\": \"resource1\",\n\"valueType\": \"Int32\"\n}\n]\n}\n]\n},\n{\n\"deviceName\": \"testDevice1\",\n\"profileName\": \"testProfile\",\n\"coreCommands\": [\n{\n\"name\": \"coolingpoint1\",\n\"set\": true,\n\"topic\": \"/edgex/command/request/testDevice1/coolingpoint1/set\",\n\"url\": \"broker.address:1883\",\n\"parameters\": [\n{\n\"resourceName\": \"resource5\",\n\"valueType\": \"String\"\n},\n{\n\"resourceName\": \"resource6\",\n\"valueType\": \"Bool\"\n}\n]\n}\n]\n}\n]\n}\n}\n</code></pre>"},{"location":"design/adr/0023-North-South-Messaging/#topic-naming","title":"Topic Naming","text":""},{"location":"design/adr/0023-North-South-Messaging/#3rd-party-system-topics","title":"3rd party system topics","text":"<p>The 3rd party system or application must publish command requests messages to an EdgeX specified MQTT topic (external message bus) and subscribe to responses from the same.  Messages topics should follow the following pattern:</p> <ul> <li>Publishing command request topic: <code>/edgex/command/request/&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt;</code></li> <li>Subscribing command response topic: <code>/edgex/command/response/#</code></li> </ul> <p>For queries, the following topics are used - Publishing query command request topic: <code>/edgex/commandquery/request</code> - Subscribing query command response topic: <code>/edgex/commandquery/response</code></p>"},{"location":"design/adr/0023-North-South-Messaging/#command-service-topics","title":"command service topics","text":"<p>The command service must subscribe to the request topics of the 3rd party MQTT topic (external message bus) to get command requests, publish those to a topic to send them to a device service via the EdgeX message bus (internal message bus), subscribe to response messages on topics from device services (internal), and then publish response messages to a topic on the 3rd party MQTT broker (external).  Message topics for the command service would follow the following standard:</p> <ul> <li>Subscribing to 3rd party command request topics: <code>edgex/command/request/#</code></li> <li>Publishing to device service request topic: <code>edgex/command/request/&lt;device-service&gt;/&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt;</code></li> <li>Subscribing to device service command response topics: <code>edgex/command/response/#</code></li> <li>Publishing to 3rd party command response topic: <code>edgex/command/response/&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt;</code></li> </ul> <p>For queries, the following topics are used:</p> <ul> <li>Subscribing to 3rd party command query request topics: <code>edgex/commandquery/request</code></li> <li>Publishing to 3rd party command query response topic: <code>edgex/commandquery/response</code></li> </ul>"},{"location":"design/adr/0023-North-South-Messaging/#device-service-topics","title":"device service topics","text":"<p>The device services must subscribe to the EdgeX command request topic (internal message bus) and publish response messages to an EdgeX command response topic.  The following naming standard will be applied to these topic names:</p> <ul> <li>Subscribing to command request topic: <code>edgex/command/request/#</code></li> <li>Publishing to command response topic: <code>edgex/command/response/&lt;device-service&gt;/&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt;</code></li> </ul>"},{"location":"design/adr/0023-North-South-Messaging/#configuration","title":"Configuration","text":"<p>Both the EdgeX command service and the device services must contain configuration needed to connect to and publish/subscribe to messages from topics on the EdgeX message bus (internal).  This includes configuration to access the message bus when secure or insecure.</p> <p>The command service must also be provided configuration to connect to the 3rd party MQTT broker's topics (external).  Because the communications may be done in a secure or insecure fashion, the core command service will need to be provided access to the 3rd party MQTT broker (external)</p> <p>Similar to EdgeX application services, the command service will have access to an external MQTT broker to get command requests and send 3rd parties a response.  This will require the command service to have two message queue configuration settings (internal and external).</p>"},{"location":"design/adr/0023-North-South-Messaging/#command-service-configuration","title":"command service configuration","text":"<p>Example command service configuration is provided below.</p> <pre><code>[MessageQueue]\n[InternalMessageQueue]\nProtocol = \"redis\"\nHost = \"localhost\"\nPort = 6379\nType = \"redis\"\nRequestTopicPrefix = \"edgex/command/request/\"   # for publishing requests to the device service; &lt;device-service&gt;/&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt; will be added to this publish topic prefix\nResponseTopic = \"edgex/command/response/#\u201d      # for subscribing to device service responses\n    AuthMode = \"usernamepassword\"                   # required for redis messagebus (secure or insecure).\n    SecretName = \"redisdb\"\n    [ExternalMQTT]\n    Protocol = \"tcp\"\n    Host = \"localhost\"\n    Port = 1883\n    RequestCommandTopic = \"edgex/command/request/#\"           # for subscribing to 3rd party command requests\nResponseCommandTopicPrefix = \"edgex/command/response/\"    # for publishing responses back to 3rd party systems /&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt; will be added to this publish topic prefix\nRequestQueryTopic = \"edgex/commandquery/request\"\nResponseQueryTopic = \"edgex/commandquery/response\"\n</code></pre> <p>Note<p>Core command contains no MessageQueue configuration today.  This is all additive/new configuration and therefore backward compatible with EdgeX 2.x implementations.</p> </p>"},{"location":"design/adr/0023-North-South-Messaging/#device-service-configuration","title":"device service configuration","text":"<p>Example device service configuration is provided below.</p> <pre><code>[MessageQueue]\n## already existing message queue configuration (for sending events/readings to the message bus)\nProtocol = \"redis\"\nHost = \"localhost\"\nPort = 6379\nType = \"redis\"\nAuthMode = \"usernamepassword\"                           # required for redis messagebus (secure or insecure).\nSecretName = \"redisdb\"\nPublishTopicPrefix = \"edgex/events/device\" # /&lt;device-profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt; will be added to this Publish Topic prefix\n[MessageQueue.Optional]\n# Default MQTT Specific options that need to be here to enable environment variable overrides of them\n# Client Identifiers\nClientId = \"device-rest\"\n# Connection information\nQos = \"0\" # Quality of Service values are 0 (At most once), 1 (At least once) or 2 (Exactly once)\nKeepAlive = \"10\" # Seconds (must be 2 or greater)\nRetained = \"false\"\nAutoReconnect = \"true\"\nConnectTimeout = \"5\" # Seconds\nSkipCertVerify = \"false\" # Only used if Cert/Key file or Cert/Key PEMblock are specified\n\n## new configuration to allow device services to also communicate via message bus with core command\nCommandRequestTopic = \"edgex/command/request/#\"         # subscribing for inbound command requests\nCommandResponseTopicPrefix = \"edgex/command/response/\"  # publishing outbound command responses; &lt;device-service&gt;/&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt; will be added to this publish topic prefix\n</code></pre> <p>Note<p>Most of the device service configuration is existing based on its need to already communicate with the message bus for publishing events/readings.  The last two lines are added to allow device services to subscribe and publish command messages from/to the message bus.</p> </p>"},{"location":"design/adr/0023-North-South-Messaging/#edgex-service-internal-message-bus-requests","title":"EdgeX Service (Internal) Message Bus Requests","text":"<p>Application services (or other EdgeX services in the future) may want to also use message communications to make command requests.  Application services make command requests today via REST.</p> <p>In order to support this, the following need to be added:</p> <ul> <li> <p>The command service will also need an internal request topic and internal response topic prefix configuration to allow internal EdgeX services to make command requests (and query requests).</p> <pre><code>    [MessageQueue]\n[InternalMessageQueue]\nProtocol = \"redis\"\nHost = \"localhost\"\nPort = 6379\nType = \"redis\"\nRequestTopicPrefix = \"edgex/command/request/\"   # for publishing requests to the device service; &lt;device-service&gt;/&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt; will be added to this publish topic prefix\nResponseTopic = \"edgex/command/response/#\u201d      # for subscribing to device service responses\n        InternalRequestCommandTopic = \"/command/request/#\"     # for subscribing to internal command requests\nInternalResponseCommandTopicPrefix = \"/command/response/\"    # for publishing responses back to internal service /&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt; will be added to this publish topic prefix\nInternalRequestQueryTopic = \"/commandquery/request\"\nInternalResponseQueryTopic = \"/commandquery/response\"\nAuthMode = \"usernamepassword\"                   # required for redis messagebus (secure or insecure).\nSecretName = \"redisdb\"\n</code></pre> </li> <li> <p>A new command message client will need to be created to allow internal services (app services in this instance) to conveniently use the message bus communications with core command.  The client service's configuration will also be expanded to include the corresponding topic and <code>UseMessageBus</code> flag that enables the new messaging based CommandClient to be created.   Example client configuration would look something like the following:</p> <pre><code>    [Clients]\n[Clients.core-command]\nUseMessageBus = true\nProtocol = \"redis\"\nHost = \"localhost\"\nPort = 6379\nCommandRequestTopicPrefix = \"/command/request\"  /&lt;device-name&gt;/&lt;command-name&gt;/&lt;method&gt; will be added to this publish topic prefix\nCommandResponseTopic = \"/command/response/#\"\nCommandQueryRequestTopic = \"/commandquery/request\"\nCommandQueryResponseTopic = \"/commandquery/response\"\n</code></pre> </li> </ul>"},{"location":"design/adr/0023-North-South-Messaging/#questions","title":"Questions","text":"<ul> <li> <p>Do we need separate topics for all the devices or would one on the device service suffice?</p> <ul> <li>Ans:  we have defined the deviceName in the parameterized topic, so one topic should be sufficient for Device Service- edgex/command/request/... <li> <p>Would clients (non EdgeX services and applications) want to get a list of available commands via message (instead of calling REST)?</p> <ul> <li>Ans:  this is a valid question and could be provided via later additions to the command service (or other service like metadata) in the future.  It does not have to be tackled immediately.  </li> </ul> </li> <li> <p>Dynamic configuration of the message subscription is not a user friendly operation today (requiring configuration changes).</p> <ul> <li>Ans:  In the future, we might want to think about creating additional APIs for Adding/Updating/Deleting/Query the external subscription (and store them to the RedisDB).  One could also use the Consul UI to change configuration, but this would require the configuration in question be added to the writable section.</li> </ul> </li> <li> <p>Is it acceptable for more than one response to be published by the device service on the same correlation ID? Eg, send back \"Acknowledged\", then \"Scheduled\", then \"Starting\", then \"Done\" statuses?</p> <ul> <li>Ans:  No, the correlation id has a life span to/from the initial requester to the response back to the requester.</li> </ul> </li> <li> <p>Would it make sense to echo the command name into the response, as a reality check?</p> <ul> <li>Ans: solved via topic naming.  Also, per @lenny-intel: \"not needed as we don't do this in the HTTP response. The response topic doesn't need the extra path info. The request ID or correlation ID is all that is needed to match the response to the request. No need to make it more complex.\"</li> </ul> </li> <li> <p>Would sending/receiving binary data (e.g. CBOR) be supported in this north-south message implementation?</p> <ul> <li>Ans:  today, command service and device services support CBOR get operations but not set (C SDK suppports both).  Suggest getting feature parity in place between the SDKs before exploring CBOR support messaging binary/CBOR payloads.</li> <li>Ans update per Monthly Architect's meeting of 2/28/22: support get with CBOR payload.</li> </ul> </li> <li> <p>Use of the message bus communications (by the non-EdgeX 3rd party service or application) would bypass the API Gateway.</p> <ul> <li>Ans:  (per Monthly Architect's meeting of 3/28/22) Since the command service is serving as an external to internal message bus broker.  While not an issue, it is worth calling out that the message bus security paradigm in use is not quite the same as what's provided by the API Gateway, which provides access control for EdgeX. When the API Gateway is used, the security configuration is defined by the EdgeX instance. When an EdgeX service acts as a bridge to an external message bus, if the external bus is properly configured, then any application on the bus can now interact with the EdgeX instance. Thus the security configuration is defined by the external broker, not EdgeX. Finally, note that most MQTT brokers support topic ACLs based on client username.</li> </ul> </li> <li> <p>Note a number of open questions in the Message Structure section that still need to be addressed.</p> </li> <p>Alert</p> <p>Per TSC meeting of 4/27/22 - the discussion around error response was reopened.  There is still some polite disagreement as to whether to keep the error response simple (as documented in this ADR) or to offer errorCode enumerations that are similar to HTTP response codes for common problems (such as ).  As part of this discussion, the question is whether the error code enumerations should be exactly that of the HTTP response codes (400, 404, 423, 500, etc.) or more generic (i.e., non-HTTP) response error codes unique to this implementation.</p> <p>The resolution to this question was to explore some options at implementation time.  The use of an enumeration (HTTP or other) can be explored during development and options brought forth via PR.</p> <p>Info<p>This ADR does not handle securing the message bus communications between services.  This need is to be covered universally in an upcoming ADR.</p> </p>"},{"location":"design/adr/0023-North-South-Messaging/#future-considerations","title":"Future Considerations","text":"<ul> <li>If desired, the query commands could return information to make either a REST or message request.  Presumably, the query responses would be the same then for both REST and message query requests so that information returned allows the 3rd party application to choose whether to use REST or message bus to make the command requests.</li> <li>As mentioned in this ADR, eKuiper is allowed access directly to the internal EdgeX message bus.  This is a special circumstance of 3rd party external system communication.  In future releases of EdgeX, even eKuiper may be routed through an external to internal message bus bridge for better decoupling and security.</li> <li>As noted, validation of all communications (REST or message bus) should be done in the future.</li> <li>In the future, we might want to think about creating additional APIs for Adding/Updating/Deleting/Query the external subscription (and store them to the RedisDB).  As part of this consideration, it should be noted that one could also use the Consul UI to change configuration, but this would require the configuration in question be added to the writable section.</li> </ul>"},{"location":"design/adr/0023-North-South-Messaging/#consequences","title":"Consequences","text":""},{"location":"design/adr/0023-North-South-Messaging/#references","title":"References","text":"<ul> <li>Core Command API</li> <li>IoTAAP MATT REST Bridge</li> </ul>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/","title":"Device Services Send Events via Message Bus","text":"<ul> <li>Status</li> <li>Context</li> <li>Decision</li> <li>Which Message Bus implementations?</li> <li>Go Device SDK</li> <li>C Device SDK</li> <li>Core Data and Persistence</li> <li>V2 Event DTO<ul> <li>Validation</li> </ul> </li> <li>Message Envelope</li> <li>Application Services</li> <li>MessageBus Topics</li> <li>Configuration<ul> <li>Device Services</li> <li>[MessageQueue]</li> <li>Core Data</li> <li>[MessageQueue]</li> <li>Application Services</li> <li>[MessageBus]</li> <li>[Binding]</li> </ul> </li> <li>Secure Connections</li> <li>Consequences</li> </ul>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#context","title":"Context","text":"<p>Currently EdgeX Events are sent from Device Services via HTTP to Core Data, which then puts the Events on the MessageBus after optionally persisting them to the database. This ADR details how Device Services will send EdgeX Events to other services via the EdgeX MessageBus. </p> <p>Note: Though this design is centered on device services, it does have cross cutting impacts with other EdgeX services and modules</p> <p>Note: This ADR is dependent on the Secret Provider for All to provide the secrets for secure Message Bus connections.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#decision","title":"Decision","text":""},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#which-message-bus-implementations","title":"Which Message Bus implementations?","text":"<p>Multiple Device Services may need to be publishing Events to the MessageBus concurrently.  <code>ZMQ</code> will not be a valid option if multiple Device Services are configured to publish. This is because <code>ZMQ</code> only allows for a single publisher. <code>ZMQ</code> will still be valid if only one Device Service is publishing Events. The <code>MQTT</code> and <code>Redis Streams</code> are valid options to use when multiple Device Services are required, as they both support multiple publishers. These are the only other implementations currently available for Go services. The C base device services do not yet have a MessageBus implementation.  See the C Device SDK below for details.</p> <p>Note: Documentation will need to be clear when <code>ZMQ</code> can be used and when it can not be used.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#go-device-sdk","title":"Go Device SDK","text":"<p>The Go Device SDK will take advantage of the existing <code>go-mod-messaging</code> module to enable use of the EdgeX MessageBus. A new bootstrap handler will be created which initializes the MessageBus client based on configuration. See Configuration section below for details.  The Go Device SDK will be enhanced to optionally publish Events to the MessageBus anywhere it currently POSTs Events to Core Data. This publish vs POST option will be controlled by configuration with publish as the default.  See Configuration section below for details. </p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#c-device-sdk","title":"C Device SDK","text":"<p>The C Device SDK will implement its own MessageBus abstraction similar to the one in <code>go-mod-messaging</code>.  The first implementation type (MQTT or Redis Streams) is TBD. Using this abstraction allows for future implementations to be added when use cases warrant the additional implementations.  As with the Go SDK, the C SDK will be enhanced to optionally publish Events to the MessageBus anywhere it currently POSTs Events to Core Data. This publish vs POST option will be controlled by configuration with publish as the default.  See Configuration section below for details.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#core-data-and-persistence","title":"Core Data and Persistence","text":"<p>With this design, Events will be sent directly to Application Services w/o going through Core Data and thus will not be persisted unless changes are made to Core Data. To allow Events to optionally continue to be persisted, Core Data will become an additional or secondary (and optional) subscriber for the Events from the MessageBus. The Events will be persisted when they are received. Core Data will also retain the ability to receive Events via HTTP, persist them and publish them to the MessageBus as is done today. This allows for the flexibility to have some device services to be configured to POST Events and some to be configured to publish Events while we transition the Device Services to all have the capability to publishing Events. In the future, once this new <code>Publish</code> approach has been proven, we may decide to remove POSTing Events to Core Data from the Device SDKs.</p> <p>The existing <code>PersistData</code> setting will be ignored by the code path subscribing to Events since the only reason to do this is to persist the Events. </p> <p>There is a race condition for <code>Marked As Pushed</code> when Core Data is persisting Events received from the MessageBus. Core Data may not have finished persisting an Event before the Application Service has processed the Event and requested the Event be <code>Marked As Pushed</code>. It was decided to remove <code>Mark as Pushed</code> capability and just rely on time based scrubbing of old Events.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#v2-event-dto","title":"V2 Event DTO","text":"<p>As this development will be part of the Ireland release all Events published to the MessageBus will use the V2 Event DTO. This is already implemented in Core Data for the V2 AddEvent API.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#validation","title":"Validation","text":"<p>Services receiving the Event DTO from the MessageBus will log validation errors and stop processing the Event.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#message-envelope","title":"Message Envelope","text":"<p>EdgeX Go Services currently uses a custom Message Envelope for all data that is published to the MessageBus. This envelope wraps the data with metadata, which is <code>ContentType</code> (JSON or CBOR), <code>Correlation-Id</code> and the obsolete <code>Checksum</code>. The <code>Checksum</code> is used when the data is CBOR encoded to identify the Event in V1 API to be mark it as pushed. This checksum is no longer needed as the V2 Event DTO requires the ID be set by the Device Services which will always be used in the V2 API to mark the Events as pushed. The Message Envelope will be updated to remove this property.</p> <p>The C SDK will recreate this Message Envelope.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#application-services","title":"Application Services","text":"<p>As part of the V2 API consumption work in Ireland the App Services SDK will be changed to expect to receive V2 Event DTOs rather than the V1 Event model. It will also be updated to no longer expect or use the <code>Checksum</code> currently on the  Message Envelope. Note these changes must occur for the V2 consumption and are not directly tied to this effort. </p> <p>The App Service SDK will be enhanced for the secure MessageBus connection described below. See Secure Connections for details</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#messagebus-topics","title":"MessageBus Topics","text":"<p>Note: The change recommended here is not required for this design, but it provides a good opportunity to adopt it.</p> <p>Currently Core Data publishes Events to the simple <code>events</code> topic. All Application Services running receive every Event published, whether they want them or not. The Events can be filtered out using the <code>FilterByDeviceName</code> or <code>FilterByResourceName</code> pipeline functions, but the Application Services still receives every Event and process all the Events to some extent. This could cause load issues in a deployment with many devices and large volume of Events from various devices or a very verbose device that the Application Services is not interested in.</p> <p>Note: The current <code>FilterByDeviceName</code> is only good if the device name is known statically and the only instance of the device defined by the <code>DeviceProfileName</code>. What we really need is <code>FilterByDeviceProfileName</code> which allows multiple instances of a device to be filtered for, rather than a single instance as it it now. The V2 API will be adding <code>DeviceProfileName</code> to the Events, so in Ireland this  filter will be possible.</p> <p>Pub/Sub systems have advanced topic schema, which we can take advantage of from Application Services to filter for just the Events the Application Service actual wants. Publishers of Events must add the <code>DeviceProfileName</code>, <code>DeviceName</code> and <code>SourceName</code> to the topic in the form <code>edgex/events/&lt;device-profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt;</code>. The <code>SourceName</code> is the <code>Resource</code> or <code>Command</code> name used to create the Event. This allows Application Services to filter for just the Events from the device(s) it wants by only subscribing to those <code>DeviceProfileNames</code> or the specific <code>DeviceNames</code> or just the specific <code>SourceNames</code>  Example subscribe topics if above schema is used:</p> <ul> <li>edgex/events/#</li> <li>All Events </li> <li>Core Data will subscribe using this topic schema</li> <li>edgex/events/Random-Integer-Device/# </li> <li>Any Events from devices created from the Random-Integer-Device device profile</li> <li>edgex/events/Random-Integer-Device/Random-Integer-Device1 </li> <li>Only Events from the Random-Integer-Device1 Device</li> <li>edgex/events/Random-Integer-Device/#/Int16</li> <li>Any Events with Readings from<code>Int16</code> device resource from devices created from the Random-Integer-Device device profile. </li> <li>**edgex/events/Modbus-Device/#/HVACValues</li> <li>Any Events with Readings from <code>HVACValues</code> device command from devices created from the Modbus-Device device profile.</li> </ul> <p>The MessageBus abstraction allows for multiple subscriptions, so an Application Service could specify to receive data from multiple specific device profiles or devices by creating multiple subscriptions. i.e.  <code>edgex/Events/Random-Integer-Device/#</code> and  <code>edgex/Events/Random-Boolean-Device/#</code>. Currently the App SDK only allows for a single subscription topic to be configured, but that could easily be expanded to handle a list of subscriptions. See Configuration section below for details. </p> <p>Core Data's existing publishing of Events would also need to be changed to use this new topic schema. One challenge with this is Core Data doesn't currently know the <code>DeviceProfileName</code> or <code>DeviceName</code> when it receives a CBOR encoded event. This is because it doesn't decode the Event until after it has published it to the MessageBus. Also, Core Data doesn't know of <code>SourceName</code> at all. The V2 API will be enhanced to change the AddEvent endpoint from <code>/event</code> to <code>/event/{profile}/{device}/{source}</code> so that <code>DeviceProfileName</code>, <code>DeviceName</code>, and <code>SourceName</code> are always know no matter how the request is encoded.</p> <p>This new topic approach will be enabled via each publisher's <code>PublishTopic</code> having the <code>DeviceProfileName</code>, <code>DeviceName</code>and <code>SourceName</code>  added to the configured <code>PublishTopicPrefix</code></p> <pre><code>PublishTopicPrefix = \"edgex/events\" # /&lt;device-profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt; will be added to this Publish Topic prefix\n</code></pre> <p>See Configuration section below for details. </p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#configuration","title":"Configuration","text":""},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#device-services","title":"Device Services","text":"<p>All Device services will have the following additional configuration to allow connecting and publishing to the MessageBus. As describe above in the  MessageBus Topics section, the <code>PublishTopic</code> will include the <code>DeviceProfileName</code> and <code>DeviceName</code>.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#messagequeue","title":"[MessageQueue]","text":"<p>A  MessageQueue section will be added, which is similar to that used in Core Data today, but with <code>PublishTopicPrefix</code> instead of <code>Topic</code>.To enable secure connections, the <code>Username</code> &amp; <code>Password</code> have been replaced with ClientAuth &amp; <code>SecretPath</code>, See Secure Connections section below for details. The added <code>Enabled</code> property controls whether the Device Service publishes to the MessageBus or POSTs to Core Data. </p> <pre><code>[MessageQueue]\nEnabled = true\nProtocol = \"tcp\"\nHost = \"localhost\"\nPort = 1883\nType = \"mqtt\"\nPublishTopicPrefix = \"edgex/events\" # /&lt;device-profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt; will be added to this Publish Topic prefix\n[MessageQueue.Optional]\n# Default MQTT Specific options that need to be here to enable environment variable overrides of them\n# Client Identifiers\nClientId =\"&lt;device service key&gt;\"\n# Connection information\nQos          =  \"0\" # Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once)\nKeepAlive    =  \"10\" # Seconds (must be 2 or greater)\nRetained     = \"false\"\nAutoReconnect  = \"true\"\nConnectTimeout = \"5\" # Seconds\nSkipCertVerify = \"false\" # Only used if Cert/Key file or Cert/Key PEMblock are specified\nClientAuth = \"none\" # Valid values are: `none`, `usernamepassword` or `clientcert`\nSecretpath = \"messagebus\"  # Path in secret store used if ClientAuth not `none`\n</code></pre>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#core-data","title":"Core Data","text":"<p>Core data will also require additional configuration to be able to subscribe to receive Events from the MessageBus. As describe above in the  MessageBus Topics section, the <code>PublishTopicPrefix</code> will have <code>DeviceProfileName</code> and <code>DeviceName</code> added to create the actual Public Topic.</p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#messagequeue_1","title":"[MessageQueue]","text":"<p>The <code>MessageQueue</code> section will be  changed so that the <code>Topic</code> property changes to <code>PublishTopicPrefix</code> and <code>SubscribeEnabled</code> and <code>SubscribeTopic</code> will be added. As with device services configuration, the <code>Username</code> &amp; <code>Password</code> have been replaced with <code>ClientAuth</code> &amp; <code>SecretPath</code> for secure connections. See Secure Connections section below for details. In addition, the Boolean <code>SubscribeEnabled</code> property will be used to control if the service subscribes to Events from the MessageBus or not.</p> <pre><code>[MessageQueue]\nProtocol = \"tcp\"\nHost = \"localhost\"\nPort = 1883\nType = \"mqtt\"\nPublishTopicPrefix = \"edgex/events\" # /&lt;device-profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt; will be added to this Publish Topic prefix\nSubscribeEnabled = true\nSubscribeTopic = \"edgex/events/#\"\n[MessageQueue.Optional]\n# Default MQTT Specific options that need to be here to enable evnironment variable overrides of them\n# Client Identifiers\nClientId =\"edgex-core-data\"\n# Connection information\nQos          =  \"0\" # Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once)\nKeepAlive    =  \"10\" # Seconds (must be 2 or greater)\nRetained     = \"false\"\nAutoReconnect  = \"true\"\nConnectTimeout = \"5\" # Seconds\nSkipCertVerify = \"false\" # Only used if Cert/Key file or Cert/Key PEMblock are specified\nClientAuth = \"none\" # Valid values are: `none`, `usernamepassword` or `clientcert`\nSecretpath = \"messagebus\"  # Path in secret store used if ClientAuth not `none`\n</code></pre>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#application-services_1","title":"Application Services","text":""},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#messagebus","title":"[MessageBus]","text":"<p>Similar to above, the Application Services <code>MessageBus</code> configuration will change to allow for secure connection to the MessageBus. The <code>Username</code> &amp; <code>Password</code> have been replaced with <code>ClientAuth</code> &amp; <code>SecretPath</code> for secure connections. See Secure Connections section below for details.</p> <pre><code>[MessageBus.Optional]\n# MQTT Specific options\n# Client Identifiers\nClientId =\"&lt;app sevice key&gt;\"\n# Connection information\nQos          =  \"0\" # Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once)\nKeepAlive    =  \"10\" # Seconds (must be 2 or greater)\nRetained     = \"false\"\nAutoReconnect  = \"true\"\nConnectTimeout = \"5\" # Seconds\nSkipCertVerify = \"false\" # Only used if Cert/Key file or Cert/Key PEMblock are specified\nClientAuth = \"none\" # Valid values are: `none`, `usernamepassword` or `clientcert`\nSecretpath = \"messagebus\"  # Path in secret store used if ClientAuth not `none`\n</code></pre>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#binding","title":"[Binding]","text":"<p>The <code>Binding</code> configuration section will require changes for the subscribe topics scheme described in the MessageBus Topics section above to filter for Events from specific device profiles or devices. <code>SubscribeTopic</code> will change from a string property containing a single topic to the <code>SubscribeTopics</code> string property containing a comma separated list of topics. This allows for the flexibility for the property to be a single topic with the <code>#</code> wild card so the Application Service receives all Events as it does today.</p> <p>Receive only Events from the <code>Random-Integer-Device</code> and <code>Random-Boolean-Device</code> profiles</p> <p><pre><code>[Binding]\nType=\"messagebus\"\nSubscribeTopics=\"edgex/events/Random-Integer-Device, edgex/events/Random-Boolean-Device\"\n</code></pre> Receive only Events from the  <code>Random-Integer-Device1</code> from the <code>Random-Integer-Device</code> profile</p> <pre><code>[Binding]\nType=\"messagebus\"\nSubscribeTopics=\"edgex/events/Random-Integer-Device/Random-Integer-Device1\"\n</code></pre> <p>or receives all Events:</p> <pre><code>[Binding]\nType=\"messagebus\"\nSubscribeTopics=\"edgex/events/#\"\n</code></pre>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#secure-connections","title":"Secure Connections","text":"<p>As stated earlier,  this ADR is dependent on the  Secret Provider for All ADR to provide a common Secret Provider for all Edgex Services to access their secrets. Once this is available, the MessageBus connection can be secured via the following configurable client authentications modes which follows similar implementation for secure MQTT Export and secure MQTT Trigger used in Application Services.</p> <ul> <li>none - No authentication </li> <li>usernamepassword - Username &amp; password authentication. </li> <li>clientcert - Client certificate and key for authentication. </li> <li>The secrets specified for the above options are pulled from the <code>Secret Provider</code> using the configured <code>SecretPath</code>.</li> </ul> <p>How the secrets are injected into the <code>Secret Provider</code> is out of scope for this ADR and covered in the Secret Provider for All ADR. </p>"},{"location":"design/adr/013-Device-Service-Events-Message-Bus/#consequences","title":"Consequences","text":"<ul> <li>If C SDK doesn't support <code>ZMQ</code> or <code>Redis Streams</code> then there must be a MQTT Broker running when a C Device service is in use and configured to publish to MessageBus.</li> <li>Since we've adopted the publish topic scheme with <code>DeviceProfileName</code> and <code>DeviceName</code> the V2 API must restrict the characters used in device names to those allowed in a topic.  An issue for V2 API already exists for restricting the allowable characters to RFC 3986 , which will suffice.</li> <li>Newer ZMQ may allow for multiple publishers. Requires investigation and very likely rework of the ZMQ implementation in go-mod-messaging. No alternative has been found.</li> <li>Mark as Push V2 Api will be removed from Core Data, Core Data Client and the App SDK</li> <li>Consider moving App Service Binding to Writable.  (out of scope for this ADR)</li> </ul>"},{"location":"design/adr/014-Secret-Provider-For-All/","title":"Secret Provider for All","text":"<ul> <li>Status</li> <li>Context</li> <li>Existing Implementations<ul> <li>What is a Secret?</li> <li>Service Exclusive vs Service Shared Secrets</li> <li>Known and Unknown Services</li> <li>Static Secrets and Runtime Secrets</li> <li>Interfaces and factory methods</li> <li>Bootstrap's current implementation<ul> <li>Interfaces</li> <li>Factory and bootstrap handler methods</li> </ul> </li> <li>App SDK's current implementation<ul> <li>Interface</li> <li>Factory and bootstrap handler methods</li> </ul> </li> <li>Secret Store for non-secure mode</li> <li>InsecureSecrets Configuration</li> </ul> </li> <li>Decision</li> <li>Only Exclusive Secret Stores</li> <li>Abstraction Interface</li> <li>Implementation<ul> <li>Factory Method and Bootstrap Handler</li> <li>Caching of Secrets</li> <li>Insecure Secrets</li> <li>Handling on-the-fly changes to <code>InsecureSecrets</code></li> <li>Mocks</li> <li>Where will <code>SecretProvider</code> reside?</li> <li>Go Services</li> <li>C Device Service</li> </ul> </li> <li>Consequences</li> </ul>"},{"location":"design/adr/014-Secret-Provider-For-All/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#context","title":"Context","text":"<p>This ADR defines the new <code>SecretProvider</code> abstraction that will be used by all EdgeX services, including Device Services. The Secret Provider is used by services to retrieve secrets from the Secret Store. The Secret Store, in secure mode, is currently Vault. In non-secure mode it is configuration in some form, i.e. <code>DatabaseInfo</code> configuration or <code>InsecureSecrets</code> configuration for Application Services.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#existing-implementations","title":"Existing Implementations","text":"<p>The Secret Provider abstraction defined in this ADR is based on the Secret Provider abstraction implementations in the Application Functions SDK (App SDK) for Application Services and the one in go-mod-bootstrap (Bootstrap) used by the Core, Support &amp; Security services in edgex-go. Device Services do not currently use secure secrets. The App SDK implementation was initially based on the Bootstrap implementation.</p> <p>The similarities and differences between these implementations are:</p> <ul> <li>Both wrap the <code>SecretClient</code> from go-mod-secrets</li> <li>Both initialize the <code>SecretClient</code> based on the <code>SecretStore</code> configuration(s)</li> <li>Both have factory methods, but they differ greatly</li> <li>Both implement the <code>GetDatabaseCredentials</code> API</li> <li>Bootstrap's uses split interfaces definitions (<code>CredentialsProvider</code> &amp; <code>CertificateProvider</code>) while the App SDK's use a single interface (<code>SecretProvider</code>) for the abstraction </li> <li>Bootstrap's includes the bootstrap handler while the App SDK's has the bootstrap handler separated out</li> <li>Bootstrap's implements the <code>GetCertificateKeyPair</code> API, which the App SDK's does not</li> <li>App SDK's implements the following, which the Bootstrap's does not</li> <li><code>Initialize</code> API (Bootstrap's initialization is done by the bootstrap handler)</li> <li><code>StoreSecrets</code> API </li> <li><code>GetSecrets</code> API</li> <li><code>InsecureSecretsUpdated</code> API</li> <li><code>SecretsLastUpdated</code> API</li> <li>Wraps a second <code>SecretClient</code> for the Application Service instance's exclusive secrets.<ul> <li>Used by the <code>StoreSecrets</code> &amp; <code>GetSecrets</code> APIs</li> </ul> </li> <li>The standard <code>SecretClient</code> is considered the shared client for secrets that all Application Service instances share. It is only used by the <code>GetDatabaseCredentials</code> API</li> <li>Configuration based secret store for non-secure mode called <code>InsecureSecrets</code></li> <li>Caching of secrets<ul> <li>Needed so that secrets used by pipeline functions do not cause call out to Vault for every Event processed</li> </ul> </li> </ul>"},{"location":"design/adr/014-Secret-Provider-For-All/#what-is-a-secret","title":"What is a Secret?","text":"<p>A secret is a collection of key/value pairs stored in a <code>SecretStore</code> at specified path whose values are sensitive in nature. Redis database credentials are an example of a <code>Secret</code> which contains the <code>username</code> and <code>password</code> key/values stored at the <code>redisdb</code> path.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#service-exclusive-vs-service-shared-secrets","title":"Service Exclusive vs Service Shared Secrets","text":"<p>Service Exclusive secrets are those that are exclusive to the instance of the running service. An example of exclusive secrets are the HTTP Auth tokens used by two running instances of app-service-configurable (http-export) which export different device Events to different endpoints with different Auth tokens in the HTTP headers.  Service Exclusive secrets are seeded by POSTing the secrets to the <code>/api/vX/secrets</code> endpoint on the running instance of each Application Service.</p> <p>Service Shared secrets are those that all instances of a class of service, such a Application Services, share. Think of Core Data as it own class of service. An example of shared secrets are the database credentials for the single database instance for Store and Forward data that all Application Services may need to access. Another example is the database credentials for each of instance the Core Data. It is shared, but only one instance of Core Data is currently ever run. Service Shared secrets are seeded by security-secretstore-setup using static configuration for static secrets for known services. Currently database credentials are the only shared secrets. In the future we may have Message Bus credentials as shared secrets, but these will be truly shared secrets for all services to securely connect to the Message Bus, not just shared between instances of a service.</p> <p>Application Services currently have the ability to configure <code>SecretStores</code> for Service Exclusive and/or Service Shared secrets depending on their needs.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#known-and-unknown-services","title":"Known and Unknown Services","text":"<ul> <li> <p>Known Services are those identified in the static configuration by security-secretstore-setup</p> </li> <li> <p>These currently are Core Data, Core Metadata, Support Notifications, Support Scheduler and Application Service (class)</p> </li> <li> <p>Unknown Services are those not known in the static configuration that become known when added to the Docker compose file or Snap. </p> </li> <li> <p>Application Service (instance) are examples of these services. </p> </li> <li> <p>Service exclusive <code>SecretStore</code> can be created for these services by adding the services' unique name , i.e. appservice-http-export, to the <code>ADD_SECRETSTORE_TOKENS</code> environment variable for security-secretstore-setup</p> <pre><code>ADD_SECRETSTORE_TOKENS: \"appservice-http-export, appservice-mqtt-export\"\n</code></pre> <p>This creates an exclusive secret store token for each service listed. The name provided for each service must be used in the service's <code>SecretStore</code> configuration and Docker volume mount  (if applicable). Typically the configuration is set via environment overrides or is already in an existing configuration profile (http-export profile for app-service-configurable). </p> <p>Example docker-compose file entries:</p> <pre><code>environment:\n...\nSecretStoreExclusive_Path: \"/v1/secret/edgex/appservice-http-export/\"\nTokenFile: \"/tmp/edgex/secrets/appservice-http-export/secrets-token.json\"\n\nvolumes:\n...\n- /tmp/edgex/secrets/appservice-http-export:/tmp/edgex/secrets/appservice-http-export:ro,z\n</code></pre> </li> </ul>"},{"location":"design/adr/014-Secret-Provider-For-All/#static-secrets-and-runtime-secrets","title":"Static Secrets and Runtime Secrets","text":"<ul> <li>Static Secrets are those identified by name in the static configuration whose values are randomly generated at seed time. These secrets are seeded on start-up of EdgeX.</li> <li> <p>Database credentials are currently the only secrets of this type</p> </li> <li> <p>Runtime Secrets are those not known in the static configuration and that become known during run time. These secrets are seeded at run time via the Application Services <code>/api/vX/secrets</code> endpoint</p> </li> <li>HTTP header authorization credentials for HTTP Export are types of these secrets</li> </ul>"},{"location":"design/adr/014-Secret-Provider-For-All/#interfaces-and-factory-methods","title":"Interfaces and factory methods","text":""},{"location":"design/adr/014-Secret-Provider-For-All/#bootstraps-current-implementation","title":"Bootstrap's current implementation","text":""},{"location":"design/adr/014-Secret-Provider-For-All/#interfaces","title":"Interfaces","text":"<pre><code>type CredentialsProvider interface {\nGetDatabaseCredentials(database config.Database) (config.Credentials, error)\n}\n</code></pre> <p>and</p> <pre><code>type CertificateProvider interface {\nGetCertificateKeyPair(path string) (config.CertKeyPair, error)\n}\n</code></pre>"},{"location":"design/adr/014-Secret-Provider-For-All/#factory-and-bootstrap-handler-methods","title":"Factory and bootstrap handler methods","text":"<pre><code>type SecretProvider struct {\nsecretClient pkg.SecretClient\n}\n\nfunc NewSecret() *SecretProvider {\nreturn &amp;SecretProvider{}\n}\n\nfunc (s *SecretProvider) BootstrapHandler(\nctx context.Context,\n_ *sync.WaitGroup,\nstartupTimer startup.Timer,\ndic *di.Container) bool {\n...\nIntializes the SecretClient and adds it to the DIC for both interfaces.\n...\n}\n</code></pre>"},{"location":"design/adr/014-Secret-Provider-For-All/#app-sdks-current-implementation","title":"App SDK's current implementation","text":""},{"location":"design/adr/014-Secret-Provider-For-All/#interface","title":"Interface","text":"<pre><code>type SecretProvider interface {\nInitialize(_ context.Context) bool\nStoreSecrets(path string, secrets map[string]string) error\nGetSecrets(path string, _ ...string) (map[string]string, error)\nGetDatabaseCredentials(database db.DatabaseInfo) (common.Credentials, error)\nInsecureSecretsUpdated()\nSecretsLastUpdated() time.Time\n}\n</code></pre>"},{"location":"design/adr/014-Secret-Provider-For-All/#factory-and-bootstrap-handler-methods_1","title":"Factory and bootstrap handler methods","text":"<pre><code>type SecretProviderImpl struct {\nSharedSecretClient    pkg.SecretClient\nExclusiveSecretClient pkg.SecretClient\nsecretsCache          map[string]map[string]string // secret's path, key, value\nconfiguration         *common.ConfigurationStruct\ncacheMuxtex           *sync.Mutex\nloggingClient         logger.LoggingClient\n//used to track when secrets have last been retrieved\nLastUpdated time.Time\n}\n\nfunc NewSecretProvider(\nloggingClient logger.LoggingClient, configuration *common.ConfigurationStruct) *SecretProviderImpl {\nsp := &amp;SecretProviderImpl{\nsecretsCache:  make(map[string]map[string]string),\ncacheMuxtex:   &amp;sync.Mutex{},\nconfiguration: configuration,\nloggingClient: loggingClient,\nLastUpdated:   time.Now(),\n}\n\nreturn sp\n}\n</code></pre> <pre><code>type Secrets struct {\n}\n\nfunc NewSecrets() *Secrets {\nreturn &amp;Secrets{}\n}\n\nfunc (_ *Secrets) BootstrapHandler(\nctx context.Context,\n_ *sync.WaitGroup,\nstartupTimer startup.Timer,\ndic *di.Container) bool {\n...\nCreates NewNewSecretProvider, calls Initailizes() and adds it to the DIC\n...\n}\n</code></pre>"},{"location":"design/adr/014-Secret-Provider-For-All/#secret-store-for-non-secure-mode","title":"Secret Store for non-secure mode","text":"<p>Both Bootstrap's and App SDK's implementation use the <code>DatabaseInfo</code> configuration for <code>GetDatabaseCredentials</code> API in non-secure mode. The App SDK only uses it, for backward compatibility,  if the database credentials are not found in the new <code>InsecureSecrets</code> configuration section. For Ireland it was planned to only use the new <code>InsecureSecrets</code> configuration section in non-secure mode.</p> <p>Note: Redis credentials are <code>blank</code> in non-secure mode</p> <p>Core Data</p> <pre><code>[Databases]\n[Databases.Primary]\nHost = \"localhost\"\nName = \"coredata\"\nUsername = \"\"\nPassword = \"\"\nPort = 6379\nTimeout = 5000\nType = \"redisdb\"\n</code></pre> <p>Application Services</p> <pre><code>[Database]\nType = \"redisdb\"\nHost = \"localhost\"\nPort = 6379\nUsername = \"\"\nPassword = \"\"\nTimeout = \"30s\"\n</code></pre>"},{"location":"design/adr/014-Secret-Provider-For-All/#insecuresecrets-configuration","title":"InsecureSecrets Configuration","text":"<p>The App SDK defines a new <code>Writable</code> configuration section called <code>InsecureSecrets</code>. This structure mimics that of the secure <code>SecretStore</code> when <code>EDGEX_SECURITY_SECRET_STORE</code>environment variable is set to <code>false</code>. Having the <code>InsecureSecrets</code> in the <code>Writable</code>  section allows for the secrets to be updated without restarting the service. Some minor processing must occur when the <code>InsecureSecrets</code> section is updated. This is to call the <code>InsecureSecretsUpdated</code> API. This API simply sets the time the secrets were last updated. The <code>SecretsLastUpdated</code> API returns this timestamp so pipeline functions that use credentials for exporting know if their client needs to be recreated with new credentials, i.e MQTT export.</p> <pre><code>type WritableInfo struct {\nLogLevel        string\n...\nInsecureSecrets InsecureSecrets\n}\n\ntype InsecureSecrets map[string]InsecureSecretsInfo\n\ntype InsecureSecretsInfo struct {\nPath    string\nSecrets map[string]string\n}\n</code></pre> <pre><code>[Writable.InsecureSecrets]\n[Writable.InsecureSecrets.DB]\npath = \"redisdb\"\n[Writable.InsecureSecrets.DB.Secrets]\nusername = \"\"\npassword = \"\"\n[Writable.InsecureSecrets.mqtt]\npath = \"mqtt\"\n[Writable.InsecureSecrets.mqtt.Secrets]\nusername = \"\"\npassword = \"\"\ncacert = \"\"\nclientcert = \"\"\nclientkey = \"\"\n</code></pre>"},{"location":"design/adr/014-Secret-Provider-For-All/#decision","title":"Decision","text":"<p>The new <code>SecretProvider</code> abstraction defined by this ADR is a combination of the two implementations described above in the Existing Implementations section.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#only-exclusive-secret-stores","title":"Only Exclusive Secret Stores","text":"<p>To simplify the <code>SecretProvider</code> abstraction, we need to reduce to using only exclusive <code>SecretStores</code>. This allows all the APIs to deal with a single <code>SecretClient</code>, rather than the split up way we currently have in Application Services. This requires that the current Application Service shared secrets (database credentials) must be copied into each Application Service's exclusive <code>SecretStore</code> when it is created.</p> <p>The challenge is how do we seed static secrets for unknown services when they become known.  As described above in the Known and Unknown Services section above,  services currently identify themselves for exclusive <code>SecretStore</code> creation via the <code>ADD_SECRETSTORE_TOKENS</code> environment variable on security-secretstore-setup. This environment variable simply takes a comma separated list of service names.</p> <pre><code>ADD_SECRETSTORE_TOKENS: \"&lt;service-name1&gt;,&lt;service-name2&gt;\"\n</code></pre> <p>If we expanded this to add an optional list of static secret identifiers for each service, i.e.  <code>appservice/redisdb</code>, the exclusive store could also be seeded with a copy of static shared secrets. In this case the Redis database credentials for the Application Services' shared database. The environment variable name will change to <code>ADD_SECRETSTORE</code> now that it is more than just tokens.</p> <pre><code>ADD_SECRETSTORE: \"app-service-xyz[appservice/redisdb]\"\n</code></pre> <p>Note: The secret identifier here is the short path to the secret in the existing appservice <code>SecretStore</code>. In the above example this expands to the full path of <code>/secret/edgex/appservice/redisdb</code></p> <p>The above example results in the Redis credentials being copied into app-service-xyz's <code>SecretStore</code> at <code>/secret/edgex/app-service-xyz/redis</code>.</p> <p>Similar approach could be taken for Message Bus credentials where a common <code>SecretStore</code> is created with the Message Bus credentials saved. The services request the credentials are copied into their exclusive <code>SecretStore</code> using <code>common/messagebus</code> as the secret identifier.</p> <p>Full specification for the environment variable's value is a comma separated list of service entries defined as:</p> <pre><code>&lt;service-name1&gt;[optional list of static secret IDs sperated by ;],&lt;service-name2&gt;[optional list of static secret IDs sperated by ;],...\n</code></pre> <p>Example with one service specifying IDs for static secrets and one without static secrets </p> <pre><code>ADD_SECRETSTORE: \"appservice-xyz[appservice/redisdb; common/messagebus], appservice-http-export\"\n</code></pre> <p>When the <code>ADD_SECRETSTORE</code> environment variable is processed to create these <code>SecretStores</code>, it will copy the specified saved secrets from the initial <code>SecretStore</code> into the service's <code>SecretStore</code>. This all depends on the completion of database or other credential bootstrapping and the secrets having been stored prior to the environment variable being processed. security-secretstore-setup will need to be refactored to ensure this sequencing.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#abstraction-interface","title":"Abstraction Interface","text":"<p>The following will be the new <code>SecretProvider</code> abstraction interface used by all Edgex services</p> <pre><code>type SecretProvider interface {\n// Stores new secrets into the service's exclusive SecretStore at the specified path.\nStoreSecrets(path string, secrets map[string]string) error\n// Retrieves secrets from the service's exclusive SecretStore at the specified path.\nGetSecrets(path string, _ ...string) (map[string]string, error)\n// Sets the secrets lastupdated time to current time. \nSecretsUpdated()\n// Returns the secrets last updated time\nSecretsLastUpdated() time.Time\n}\n</code></pre> <p>Note: The <code>GetDatabaseCredentials</code> and <code>GetCertificateKeyPair</code> APIs have been removed. These are no longer needed since insecure database credentials will no longer be stored in the <code>DatabaseInfo</code> configuration and certificate key pairs are secrets like any others. This allows these secrets to be retrieved via the <code>GetSecrets</code> API.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#implementation","title":"Implementation","text":""},{"location":"design/adr/014-Secret-Provider-For-All/#factory-method-and-bootstrap-handler","title":"Factory Method and Bootstrap Handler","text":"<p>The factory method and bootstrap handler will follow that currently in the Bootstrap implementation with some tweaks. Rather than putting the two split interfaces into the DIC, it will put just the single interface instance into the DIC. See details in the Interfaces and factory methods section above under Existing Implementations.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#caching-of-secrets","title":"Caching of Secrets","text":"<p>Secrets will be cached as they are currently in the Application Service implementation</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#insecure-secrets","title":"Insecure Secrets","text":"<p>Insecure Secrets will be handled as they are currently in the Application Service implementation. <code>DatabaseInfo</code> configuration will no longer be an option for storing the insecure database credentials. They will be stored in the <code>InsecureSecrets</code> configuration only.</p> <pre><code>[Writable.InsecureSecrets]\n[Writable.InsecureSecrets.DB]\npath = \"redisdb\"\n[Writable.InsecureSecrets.DB.Secrets]\nusername = \"\"\npassword = \"\"\n</code></pre>"},{"location":"design/adr/014-Secret-Provider-For-All/#handling-on-the-fly-changes-to-insecuresecrets","title":"Handling on-the-fly changes to <code>InsecureSecrets</code>","text":"<p>All services will need to handle the special processing when <code>InsecureSecrets</code> are changed on-the-fly via Consul. Since this will now be a common configuration item in <code>Writable</code> it can be handled in <code>go-mod-bootstrap</code> along with existing log level processing. This special processing will be taken from App SDK.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#mocks","title":"Mocks","text":"<p>Proper mock of the <code>SecretProvider</code> interface will be created with <code>Mockery</code> to be used in unit tests. Current mock in App SDK is hand written rather then generated with <code>Mockery</code>.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#where-will-secretprovider-reside","title":"Where will <code>SecretProvider</code> reside?","text":""},{"location":"design/adr/014-Secret-Provider-For-All/#go-services","title":"Go Services","text":"<p>The final decision to make is where will this new <code>SecretProvider</code> abstraction reside? Originally is was assumed that it would reside in <code>go-mod-secrets</code>, which seems logical. If we were to attempt this with the implementation including the bootstrap handler, <code>go-mod-secrets</code> would have a dependency on <code>go-mod-bootstrap</code> which will likely create a circular dependency. </p> <p>Refactoring the existing implementation in <code>go-mod-bootstrap</code> and have it reside there now seems to be the best choice.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#c-device-service","title":"C Device Service","text":"<p>The C Device SDK will implement the same <code>SecretProvider</code> abstraction, InsecureSercets configuration and the underling <code>SecretStore</code> client.</p>"},{"location":"design/adr/014-Secret-Provider-For-All/#consequences","title":"Consequences","text":"<ul> <li>All service's will have <code>Writable.InsecureSecrets</code> section added to their configuration</li> <li><code>InsecureSecrets</code> definition will be moved from App SDK to go-mod-bootstrap</li> <li>Go Device SDK will add the SecretProvider to it's bootstrapping </li> <li>C Device SDK implementation could be big lift?</li> <li><code>SecretStore</code>configuration section will be added to all Device Services</li> <li>edgex-go services will be modified to use the single <code>SecretProvider</code> interface from the DIC in place of current usage of the <code>GetDatabaseCredentials</code> and <code>GetCertificateKeyPair</code> interfaces.</li> <li>Calls to <code>GetDatabaseCredentials</code> and <code>GetCertificateKeyPair</code> will be replaced with calls to <code>GetSecrets</code> API and appropriate processing of the returned secrets will be added. </li> <li>App SDK will be modified to use <code>GetSecrets</code> API in place of the <code>GetDatabaseCredentials</code> API</li> <li>App SDK will be modified to use the new <code>SecretProvider</code> bootstrap handler</li> <li>app-service-configurable's configuration profiles as well as all the Application Service examples configurations will be updated to remove the <code>SecretStoreExclusive</code> configuration and just use the existing <code>SecretStore</code> configuration</li> <li>security-secretstore-setup will be enhanced as described in the Only Exclusive Secret Stores section above</li> <li>Adding new services that need static secrets added to their <code>SecretStore</code> requires stopping and restarting all the services. The is because security-secretstore-setup has completed but not stopped. If it is rerun without stopping the other services, there tokens and static secrets will have changed. The planned refactor of <code>security-secretstore-setup</code> will attempt to resolve this.</li> <li>Snaps do not yet support setting the environment variable for adding SecretStore. It is planned for Ireland release.</li> </ul>"},{"location":"design/adr/core/0003-V2-API-Principles/","title":"Geneva API Guiding Principles","text":""},{"location":"design/adr/core/0003-V2-API-Principles/#status","title":"Status","text":"<p>Accepted by EdgeX Foundry working groups as of Core Working Group meeting 16-Jan-2020</p> <p>Note</p> <p>This ADR was written pre-Geneva with an assumption that the V2 APIs would be available in Geneva.  In actuality, the full V2 APIs will be delivered in the Ireland release (Spring 2020)</p>"},{"location":"design/adr/core/0003-V2-API-Principles/#context","title":"Context","text":"<p>A redesign of the EdgeX Foundry API is proposed for the Geneva release. This is understood by the community to warrant a 2.0 release that will not be backward compatible. The goal is to rework the API using solid principles that will allow for extension over the course of several release cycles, avoiding the necessity of yet another major release version in a short period of time.</p> <p>Briefly, this effort grew from the acknowledgement that the current models used to facilitate requests and responses via the EdgeX Foundry API were legacy definitions that were once used as internal representations of state within the EdgeX services themselves. Thus if you want to add or update a device, you populate a full device model rather than a specific Add/UpdateDeviceRequest. Currently, your request model has the same definition, and thus validation constraints, as the response model because they are one and the same! It is desirable to separate and be specific about what is required for a given request, as well as its state validity, and the bare minimum that must be returned within a response.</p> <p>Following from that central need, other considerations have been used when designing this proposed API. These will be enumerated and briefly explained below.</p> <p>1.) Transport-agnostic Define the request/response data transfer objects (DTO) in a manner whereby they can be used independent of transport. For example, although an OpenAPI doc is implicitly coupled to HTTP/REST, define the DTOs in such a way that they could also be used if the platform were to evolve to a pub/sub architecture.</p> <p>2.) Support partial updates via PATCH Given a request to, for example, update a device the user should be able to update only some properties of the device. Previously this would require an endpoint for each individual property to be updated since the \"update device\" endpoint, facilitated by a PUT, would perform a complete replacement of the device's data. If you only wanted to update the LastConnected timestamp, then a separate endpoint for that property was required. We will leverage PATCH in order to update an entity and only those properties populated on the request will be considered. Properties that are missing or left blank will not be touched. </p> <p>3.) Support multiple requests at once Endpoints for the addition or updating of data (POST/PATCH) should accept multiple requests at once. If it were desirable to add or update multiple devices with one request, for example, the API should facilitate this.</p> <p>4.) Support multiple correlated responses at once Following from #3 above, each request sent to the endpoint must result in a corresponding response. In the case of HTTP/REST, this means if four requests are sent to a POST operation, the return payload will have four responses. Each response must expose a \"code\" property containing a numeric result for what occurred. These could be equivalent to HTTP status codes, for example. So while the overall call might succeed, one or more of the child requests may not have. It is up to the caller to examine each response and handle accordingly.</p> <p>In order to correlate each response to its original request, each request must be assigned its own ID (in GUID format). The caller can then tie a response to an individual request and handle the result accordingly, or otherwise track that a response to a given request was not received. </p> <p>5.) Use of 207 HTTP Status (Multi-Result) In the case where an endpoint can support multiple responses, the returned HTTP code from a REST API will be 207 (Multi-status)</p> <p>6.) Each service should provide a \"batch\" request endpoint In addition to use-case specific endpoints that you'd find in any REST API, each service should provide a \"batch\" endpoint that can take any kind of request. This is a generic endpoint that allows you to group requests of different types within a single call. For example, instead of having to call two endpoints to get two jobs done, you can call a single endpoint passing the specific requests and have them routed appropriately within the service. Also, when considering agnostic transport, the batch endpoint would allow for the definition and handling of \"GET\" equivalent DTOs which are now implicit in the format of a URL.</p> <p>7.) GET endpoints returning a list of items must support pagination URL parameters must be supported for every GET endpoint to support pagination. These parameters should indicate the current page of results and the number of results on a page.</p>"},{"location":"design/adr/core/0003-V2-API-Principles/#decision","title":"Decision","text":"<p>Commnunity has accepted the reasoning for the new API and the design principles outlined above. The approach will be to gradually implement the V2 API side-by-side with the current V1 APIs. We believe it will take more than a single release cycle to implement the new specification. Releases of that occur prior to the V2 API implementation completion will continue to be major versioned as 1.x. Subsequent to completion, releases will be major versioned as 2.x.</p>"},{"location":"design/adr/core/0003-V2-API-Principles/#consequences","title":"Consequences","text":"<ul> <li>Backward incompatibility with EdgeX Foundry's V1 API requires a major version increment (e.g. v2.x).</li> <li>Service-level testing (e.g. blackbox tests) needs to be rewritten.</li> <li>Specification-first development allows for different implementations of EdgeX services to be certified as \"EdgeX Compliant\" in reference to an objective standard.</li> <li>Transport-agnostic focus enables different architectural patterns (pub/sub versus REST) using the same data representation.</li> </ul>"},{"location":"design/adr/core/0019-EdgeX-CLI-V2/","title":"EdgeX-CLI V2 Design","text":""},{"location":"design/adr/core/0019-EdgeX-CLI-V2/#status","title":"Status","text":"<p>Approved (by TSC vote on 10/6/21)</p>"},{"location":"design/adr/core/0019-EdgeX-CLI-V2/#context","title":"Context","text":"<p>This ADR presents a technical plan for creation of a 2.0 version of edgex-cli which supports the new V2 REST APIs developed as part of the Ireland release of EdgeX.</p>"},{"location":"design/adr/core/0019-EdgeX-CLI-V2/#existing-behavior","title":"Existing Behavior","text":"<p>The latest version of edgex-cli  (1.0.1) only supports the V1 REST APIs and thus cannot be used with V2 releases of EdgeX.</p> <p>As the edgex-cli was developed organically over time, the current implementation has a number of bugs mostly involving a lack of consistent behavior, especially with respect to formatting of output.</p> <p>Other issues with the existing client include:</p> <ul> <li>lack of tab completion</li> <li>default output of commands is too verbose</li> <li>verbose output sometime prevents use of jq </li> <li>static configuration file required (i.e. no registry support)</li> <li>project hierarchy not conforming to best practice guidelines </li> </ul>"},{"location":"design/adr/core/0019-EdgeX-CLI-V2/#history","title":"History","text":"<p>The original Hanoi V1 client was created by a team at VMWare which is no longer participating in the project.  Canonical will lead the development of the Ireland/Jakarta V2 client.</p>"},{"location":"design/adr/core/0019-EdgeX-CLI-V2/#decision","title":"Decision","text":"<ol> <li>Use standardized command-line args/flags</li> </ol> Argument/Flag Description <code>-d</code>, <code>--debug</code> show additional output for debugging purposes (e.g. REST URL, request JSON, \u2026). This command-line arg will replace -v, --verbose and will no longer trigger output of the response JSON (see -j, --json). <code>-j</code>, <code>--json</code> output the raw JSON response returned by the EdgeX REST API and nothing else. This output mode is used for script-based usage of the client. <code>--version</code> output the version of the client and if available, the version of EdgeX installed on the system (using the version of the metadata data service) <ol> <li> <p>Restructure the Go code hierarchy to follow the most recent recommended guidelines. For instance /cmd should just contain the main application for the project, not an implementation for each command - that should be in /internal/cmd</p> </li> <li> <p>Take full advantage of the features of the underlying command-line library, Cobra, such as tab-completion of commands.</p> </li> <li> <p>Allow overlap of command names across services by supporting an argument to specify the service to use: <code>-m/--metadata</code>, <code>-c/--command</code>, <code>-n/--notification</code>, <code>-s/--scheduler</code> or <code>--data</code> (which is the default). Examples:</p> <ul> <li><code>edgex-cli ping --data</code></li> <li><code>edgex-cli ping -m</code></li> <li><code>edgex-cli version -c</code></li> </ul> </li> <li> <p>Implement all required V2 endpoints for core services</p> <p>Core Command - <code>edgex-cli command</code> <code>read | write | list</code></p> <p>Core Data - <code>edgex-cli event</code> <code>add | count | list | rm | scrub**</code> - <code>edgex-cli reading</code> <code>count | list</code></p> <p>Metadata - <code>edgex-cli device</code> <code>add | adminstate | list | operstate | rm | update</code> - <code>edgex-cli deviceprofile</code> <code>add | list | rm | update</code> - <code>edgex-cli deviceservice</code> <code>add | list | rm | update</code> - <code>edgex-cli provisionwatcher</code> <code>add | list | rm | update</code></p> <p>Support Notifications - <code>edgex-cli notification</code> <code>add | list | rm</code> - <code>edgex-cli subscription</code> <code>add | list | rm</code></p> </li> </ol> <p>Support Scheduler     - <code>edgex-cli interval</code> <code>add | list | rm | update</code></p> <pre><code>**Common endpoints in all services**\n- **`edgex-cli version`**\n- **`edgex-cli ping`**\n- **`edgex-cli metrics`**\n- **`edgex-cli status`**\n\nThe commands will support arguments as appropriate. For instance:\n- `event list` using `/event/all` to return all events\n- `event list --device {name}` using `/event/device/name/{name}` to return the events sourced from the specified device.\n</code></pre> <ol> <li> <p>Currently, some commands default to always displaying GUIDs in objects when they're not really needed. Change this so that by default GUIDs aren't displayed, but add a flag which causes them to be displayed.</p> </li> <li> <p>scrub may not work with Redis being secured by default. That might also apply to the top-level <code>db</code> command (used to wipe the entire db). If so, then the commands will be disabled in secure mode, but permitted in non-secure mode.</p> </li> <li> <p>Have built-in defaults with port numbers for all core services and allow overrides, avoiding the need for static configuration file or configuration provider.</p> </li> <li> <p>(Stretch) implement a <code>-o</code>/<code>--output</code> argument which could be used to customize the pretty-printed objects (i.e. non-JSON).</p> </li> <li> <p>(Stretch) Implement support for use of the client via the API Gateway, including being able to connect to a remote EdgeX instance. This might require updates in go-mod-core-contracts.</p> </li> </ol>"},{"location":"design/adr/core/0019-EdgeX-CLI-V2/#references","title":"References","text":"<ul> <li>Command Line Interface Guidelines</li> <li>The Unix Programming Environment, Brian W. Kernighan and Rob Pike</li> <li>POSIX Utility Conventions</li> <li>Program Behavior for All Programs, GNU Coding Standards</li> <li>12 Factor CLI Apps, Jeff Dickey</li> <li>CLI Style Guide, Heroku</li> <li>Standard Go Project Layout</li> </ul>"},{"location":"design/adr/core/0021-Device-Profile-Changes/","title":"Changes to Device Profiles","text":""},{"location":"design/adr/core/0021-Device-Profile-Changes/#status","title":"Status","text":"<p> Approved  By TSC Vote on 2/14/22</p> <p>Please see a prior PR on this topic that detailed much of the debate and context on this issue.  For clarity and simplicity, that PR was closed in favor of this simpler ADR.</p>"},{"location":"design/adr/core/0021-Device-Profile-Changes/#context","title":"Context","text":"<p>While the device profile has always been the way to describe a device/sensor and template its communications to the rest of the EdgeX platform, over the course of EdgeX evolution there have been changes in what could change in a profile (often based on its associations to other EdgeX objects).  This document is meant to address the issue of change surrounding device profiles in EdgeX going forward \u2013 specifically when can a device profile (or its sub-elements such as device resources) be added, modified or removed.</p>"},{"location":"design/adr/core/0021-Device-Profile-Changes/#summary-of-device-profile-rules","title":"Summary of Device Profile Rules","text":"<p>These rules will be implemented in core metadata on device profile API calls.</p> <ul> <li>A device profile can be added anytime</li> <li>Device resources or device commands can be added to a device profile anytime</li> <li>Attributes can be added to a device profile anytime</li> <li>A device profile can be removed or modified when the device profile is not associated to a device or provision watcher<ul> <li>this includes modifying any field (except identifiers like names and ids)</li> <li>this includes changes to the array of device resources, device commands</li> <li>this includes changes to attributes (of device resources)</li> <li>even when a device profile is associated to a device or provision watcher, fields of the device profile or device resource can be modified when the field change will not affect the behavior of the system.<ul> <li>on profile, the following fields do not affect the behavior: description, manufacturer, model, labels.</li> <li>on device resource, the following fields do not affect the behavior: description and tag</li> </ul> </li> </ul> </li> <li>A device profile cannot be removed when it is associated to a device or provision watcher.</li> <li>A device profile can be removed or modified even when associated to an event or reading.  However, configuration options (see New Configuration Settings below) are available to block the change or removal of a device profile for any reason.<ul> <li>the rationale behind the new configuraton settings was specifically to protect the event/reading association to device profiles.  Events and readings are generally considered short lived (ephemeral) objects and already contain the necessary device profile information that are needed by the system during their short life without having to refer to and keep the device profile.  But if an adopter wants to make sure the device profile is unmodified and still exists for any event/readings association (or for any reason), then the new config setting will block device profile changes or removals.</li> <li>see note below in Consequences that a new Units property must be added to the Reading object in order to support this rule and the need for all relevant profile data to be in the reading.</li> </ul> </li> </ul>"},{"location":"design/adr/core/0021-Device-Profile-Changes/#ancillary-rules-associated-to-device-profiles","title":"Ancillary Rules associated to Device Profiles","text":"<ul> <li>Name and ID fields (identifying fields) for device profiles, device resources, etc. cannot be modified and can never be null.</li> <li>A device profile can begin life \u201cempty\u201d - meaning that it has no device resources or device commands.</li> </ul>"},{"location":"design/adr/core/0021-Device-Profile-Changes/#new-apis","title":"New APIs","text":"<p>The following APIs would be added to the metadata REST service in order to meet the design specified above.</p> <ul> <li>Add Profile General Property PATCH API (allow to modify profile's description, manufacturer, model and label fields)</li> <li>Add Profile Device Resource POST API</li> <li>Add Profile Device Resource PATCH API (allow to modify Description and IsHidden only)</li> <li>Add Profile Device Resource DELETE API (allow as described above)</li> <li>Add Profile Device Command POST API</li> <li>Add Profile Device Command PATCH API (allow as described above)</li> <li>Add Profile Device Command DELETE API (allow as described above)</li> </ul>"},{"location":"design/adr/core/0021-Device-Profile-Changes/#new-configuration-settings","title":"New Configuration Settings","text":"<p>Some adopters may not view event/reading data as ephemeral or short lived.  These adopters may choose not to allow device profiles to be modified or removed when associated to an event or reading. For this reason, two new configuration options, in the <code>[Writable.ProfileChange]</code> section, will be added to metadata configuration that are used to reject modifications or deletions.</p> <ul> <li>StrictDeviceProfileChanges (set to false by default)</li> <li>StrictDeviceProfileDeletes (set to false by default)</li> </ul> <p>When either of these config settings are set to true, metadata would accordingly reject changes to or removal of profiles (note: metadata will not check that there are actually events or readings - or any object - associated to the device profile when these are set to true.  It simply rejects all modification or deletes to device profiles with the assumption that there could be events, readings or other objects associated and which need to be preserved).</p>"},{"location":"design/adr/core/0021-Device-Profile-Changes/#consequencesconsiderations","title":"Consequences/Considerations","text":"<p>In order to allow device profiles to be updated or removed even when associated to an EdgeX event/reading, a new property needs to be added to the reading object.</p> <ul> <li>Readings will now contain a \u201cUnits\u201d (string) property.  This property will indicate the units of measure for the Value in the Reading and will be populated based on the Units for the device resource.<ul> <li>A new device service configuration property, <code>ReadingUnits</code> (set true by default) will allow adopters to indicate they do not want units to be added to the readings (for cases where there is a concern about the number of readings and the extra data of adding units).</li> <li>The <code>ReadingUnits</code> configuration option will be added to the <code>[Writable.Reading]</code> section of device services (and addressed in the device service SDKs).</li> </ul> </li> <li>This allows the event/reading to contain all relevant information from the device profile that is needed by the system during the course of the event/reading\u2019s life.</li> <li>This allows the device profile to be modified or even removed even when there are events/readings in the system that were created from information in the device profile.</li> </ul>"},{"location":"design/adr/core/0021-Device-Profile-Changes/#references","title":"References","text":"<ul> <li>Metadata API</li> <li>Device Service SDK Required Functionality</li> </ul>"},{"location":"design/adr/core/0022-UoM/","title":"EdgeX Unit of Measure (UoM)","text":""},{"location":"design/adr/core/0022-UoM/#status","title":"Status","text":"<p>Approved by TSC Vote on 3/16/2022</p> <p>This ADR began under a different ADR pull request.  The prior ADR recommended a UoM per device resource and just allowed for the association of an arbitrary set of unit of measure references against the resource.  However, it did not include any specific units of measure or validation of those units against the actual profiles (and ultimately the associated readings). See the previous UoM ADR for details and prior debate.</p> <p>Implementation: to be determined, but could be as soon as Kamakura (Spring 2022).</p>"},{"location":"design/adr/core/0022-UoM/#context","title":"Context","text":"<p>Unit of measurement (UoM) is defined as \"a standard amount of a physical quantity, such as length, mass, energy, etc, specified multiples of which are used to express magnitudes of that physical quantity\".  In EdgeX, data collected from sensors are physical quantities which should be associated to some unit of measure to express magnitude of that physical quantity.  For example, if EdgeX collected a temperature reading from a thermostat as <code>45</code>, the user of that sensor reading would want to know if the unit of measure for the <code>45</code> quantity was expressed in Celsius, Fahrenheit or even the Kelvin scale.</p> <p>Since the founding of the project, there has been consensus that a unit of measure should be associated to any sensor or metric quantity collected by EdgeX.  Also since the founding of the project, a unit of measure has therefore been specified (directly or indirectly) to each device resource (found in device profiles) and associated values collected as part of readings.</p> <p>The unit of measure was, however, in all cases just a string reference to some arbitrary unit (which may or may not be in a UoM standard) to be interpreted by the consumer of EdgeX data.  The reporting sensor/device or programmer of the device service could choose what UoM string was associated to the device resources (and readings produced by the device service) as the unit of measure for any piece of data.  Per the temperature example above, the unit of measure could have been \"F\" or \"C\", \"Celsius\" or \"Fahrenheit\", or any other representation.  In other words, the associated unit of measure for all data in EdgeX was left to agreement and interpretation by the data provider/producer and EdgeX data consumer.</p> <p>There are various specifications and standards around unit of measure.  Specifically, there are several options to choose from as it relates to the exchange of data in electronic communications - and units of measure associated in that exchange.  As examples, two big competing standards around EDI (electronic data exchange) that both have associated unit of measure codes are:</p> <ul> <li>ANSI X12: EDI standard used mostly in the US</li> <li>EDIFACT: UN EDI standard used mostly in Europe and Asia</li> </ul> <p>The Unified Code for Units of Measure provides an alternative list (not a standard) that is used by various organizations like OSGI and the Eclipse Foundation.</p> <p>While standards exist, use by various open source projects (especially IoT/edge projects) is inconsistent and haphazard.   Groups like oneM2M seem to define their own selection of units in specifications per vertical (home for example) while Kura doesn't even appear to use the UoM JSR (a Java related unit of measure specification for Java applications like Kura).</p>"},{"location":"design/adr/core/0022-UoM/#decision","title":"Decision","text":"<p>It would be speculative and inappropriate for EdgeX to select a unit of measure standard which is not widely adopted in the industry or choose a static unit of measure list that is incomplete with regard to possible IoT / edge use case needs.  At this time, there does not appear to be a single and unequivocal standard for units of measure that encompasses all EdgeX related use cases (now and in the future). </p> <p>Therefore, EdgeX chooses not to select or adopt a unit of measure specification, standard, or code list to apply across the platform.  Instead, EdgeX adopters will be allowed to optionally specify which unit of measure specification, standard, or unit of measure code list they would like used in their instance(s) of EdgeX.</p>"},{"location":"design/adr/core/0022-UoM/#specifying-the-units-of-measure","title":"Specifying the Units of Measure","text":"<p>Units of measure allowed by the instance of EdgeX will be specified in a configuration file (in TOML format called <code>uom.toml</code> by default).  Note:  the UoM configuration is a separate configuration TOML file (separate from the metadata service configuration file - <code>configuration.toml</code>).  </p> <p>The units of measure in the configuration file can be attributed, optionally, to a specification, document, or other UoM definition source.  The <code>source</code> only helps provide the location of documentation about the origins and details of the units specified for the reader, but it will not be used or checked by EdgeX.  An optional default source can be provided at the top level configuration (as shown in the examples below) so that other sources are only needed when there are specific units used that are not found in the default source.</p> <p>The units of measure can be categorized for better organization and to allow for different sources to be specified for different units.  The categories are defined by the TOML section names (the UoM dot labels).</p> <p>Sample TOML unit of measure configuration</p> <pre><code>[Uom]\nSource=\"reference to source for all UoM if not specified below\"\n[Uom.temperature]\nSource=\"www.weather.com\"\nValues=\"C,F,K\"\n[Uom.weights]\nSource=\"www.usa.gov/federal-agencies/weights-and-measures-division\"\nValues=\"lbs,ounces,kilos,grams\"\n</code></pre>"},{"location":"design/adr/core/0022-UoM/#specifying-the-uom-file-location","title":"Specifying the UoM File Location","text":"<p>The location of the UoM file will be specified in core metadata's configuration (currently in <code>res/configuration.toml</code>) - see example A below.  </p> <p>Example Metadata Configuration - location of of the UoM configuration file <pre><code>[Writable]\n[Writable.UoM]\nValidation=false  ## false (meaning off) by default\n\n## in the non-writable area - example file specified to units of measure\n[UoM]\nUoMFile=\"./res/uom.toml\"  # the UoMFile location can be either absolute or relative path location\n</code></pre></p> <p>The location of the UoM file should point to an accessible file (relative to application executable or absolute path).  The file must be something that the service can reach (ex: in shared volume, volume mount, etc.) in order to allow for the adopter to provide the units of measure independently during configuration/setup of the EdgeX instance without requiring a build of the metadata service or a reconstruction of the Docker image/container.</p> <p>Info<p>In future versions, multiple UoM definition files might be specified.  This may help the organization of the units in the future.</p> </p> <p>Note</p> <p>The environmental overrides can be used to specify and override the location of the UoM configuration file.</p> <p>Info<p>It was discussed that the file location could be done via URI and even allow for HTTP, HTTPS or other protocol access of the file.  For this first implementation, it was decided (per Monthly Architect's meeting of 2/28/22) to only allow for a simple file path reference (relative or absolute).  Future implementation can consider URI use.</p> </p>"},{"location":"design/adr/core/0022-UoM/#specifying-validation-on-or-off","title":"Specifying Validation on or off","text":"<p>Additionally, in metadata's configuration, a configuration option for unit of measure validation being <code>on</code> or <code>off</code> will be provided (note <code>Validation</code> in both example above).  The location of the UoM file is static, but the ability to turn validation on/off is dynamic and therefore in the writable area of configuration.  For backward compatibility, validation will be off by default.</p> <p>Note</p> <p><code>on</code> and <code>off</code> are specified by boolean values <code>true</code> and <code>false</code> in the configuration file.</p>"},{"location":"design/adr/core/0022-UoM/#validation-of-the-units-of-measure","title":"Validation of the Units of Measure","text":"<p>Core metadata will read the units of measure from its configuration file.  Like all configuration information, this data will be stored in the configuration service (Consul today) on initial startup of the core metadata service.</p> <p>When validation is turned <code>on</code> (Writable.UoM.validation is set to true), all device profile <code>units</code> (in device resource, device properties) will be validated against the list of units of measure by core metadata.  In other words, when a device profile is created or updated or when a device resource is added or updated via the core metadata API, the units specified in the device resource's <code>units</code> field (see resource example below) will be checked against the valid list of UoM provided via core metadata configuration.  If the <code>units</code> value matches any one of the configuration units of measure, then the device resource is considered valid - allowing the create or update operation to continue.  </p> <p></p> <p>If the <code>units</code> value does not match any one of the configuration units of measure, then the device profile or device resource operation (create or update) is rejected (error code 500 is returned) and an appropriate error message is returned in the response to the caller of the core metadata API.</p> <p>Note</p> <p>Importantly (as discussed in Core WG 2/17/22), the <code>units</code> field on a profile is and shall remain optional.  If the <code>units</code> field is not specified in the device profile, then it is assumed that the device resource does not have well defined units of measure.  In other words, core metadata will not fail a profile with no <code>units</code> field specified on a device resource.</p> <p>In the example device resource below, core metadata would check that <code>C</code> is in the list of units of measure in the configuration.</p> <pre><code>deviceResources:\n-\nname: \"RoomTemperature\"\nisHidden: false\ndescription: \"Room Temperature x10 \u00b0C (Read Only)\"\nattributes:\n{ primaryTable: \"INPUT_REGISTERS\", startingAddress: 3, rawType: \"Int16\" }\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"R\"\nscale: \"0.1\"\nunits: \"C\"    ## core metadata checks this value against its list of valid units of measure\n</code></pre> <p>By checking the <code>units</code> property of the device resources (on creation or updates of the device profile or create/update of the device resources), and rejecting any additions or changes that include non-valid units of measure, then we can be assured that all readings created by the device service will contain valid units by default (assuming that validation of the units of measure is always on) or that the units are inconsequential (when the <code>units</code> field is not specified for a device resource).  This means, the units in a reading do not need to be validated separately.</p>"},{"location":"design/adr/core/0022-UoM/#considerations","title":"Considerations","text":""},{"location":"design/adr/core/0022-UoM/#validation-important-and-architecturally-significant","title":"Validation important and architecturally significant","text":"<p>Based on discussion in the Core WG meeting of 2/3/22, it was decided that without validation and some valid list of actual UoM, the ADR was just adding metadata to the profile and thus did not even rise to the level of \"significant\" architectural decision.  It was further felt that in order to really provide any value to adopters and to get adherence to their chosen units of measure, EdgeX had to allow for a valid list of units of measure to be specified and be used to check profile units - but in a way that is easy to configure/provide without having to rebuild a service for example.  If the units of measure were defined just in the standard configuration file, it would make it hard to change this list in deployments. </p> <p>This new UoM ADR is the result of that discussion.  In general, it specifies, through adopter provided configuration, the exact unit of measures that are allowed for the EdgeX instance and any optional reference (such as a specification) where those units are defined.  It does so through a separate core metadata configuration file making it easier to change.</p>"},{"location":"design/adr/core/0022-UoM/#use-of-senml","title":"Use of SenML","text":"<p>SenML was suggested as a specification (currently a proposed standard) from which EdgeX may draw some guidance or inspiration with regard to unit of measure representation in \"simple sensor measurements and device parameters.\"</p> <p>In fact, SenML defines a simple data model (in JSON, CBOR, XML, EXI) for the exchange of what EdgeX would call readings.  A JSON example is below:</p> <pre><code>[{\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"Cel\",\"v\":23.1}]\n</code></pre> <p>In the example above, the array (what EdgeX would consider a collection of readings) has a single SenML Record with a measurement for a sensor named \"urn:dev:ow:10e2073a01080063\" with a current value of 23.1 for degrees measured in Celsius (Cel) unit of measure.  However, SenML suggests the use of short names for the keys in most cases, but long names could be used.  In which case, the JSON SenML reading would look like the following:</p> <pre><code>[{\"Name\":\"urn:dev:ow:10e2073a01080063\",\"Unit\":\"Cel\",\"Value\":23.1}]\n</code></pre> <p>In this way, the parallels to EdgeX model are, by accident, uncanny - at least in the JSON instance.  SenML goes to much more depth to provide extensions and more definitions around measurements.  But at its base, the EdgeX format is not unlike SenML and could easily be aligned with SenML in the future (or allow for an application service to export in SenML with an additional function fairly easily and if there were demand).</p> <p>However, on the basis of \"unit of measure\", SenML is actually light on details.  With regard to UoM, the SenML specification only says:</p> <p>Quote</p> <p>If the Record has no Unit, the Base Unit is used as the Unit.  Having no Unit and no Base Unit is allowed; any information that may be required about units applicable to the value then needs to be provided by the application context.</p> <p>A SenML Units Registry provides for a list of unit symbols (the \"SenML Units registry\").  This list could be used as one of the sources for EdgeX UoM definition.</p> <p>SenML should be examined for future versions of EdgeX with regard to data model, but its relevance to unit of measure is believed to be minimal at this time.</p>"},{"location":"design/adr/core/0022-UoM/#future-considerationsadditionsimprovements","title":"Future Considerations/Additions/Improvements","text":"<p>In the future, validation may be turned <code>on</code> or <code>off</code> per device service; allowing the decision to validate units of measure to be accomplished on a service or even allow the device service to validate/not validate based on particular devices.</p> <p>In the future, additional criteria may be added to the unit of measure information to all for more specific (or allowing more granularity) validation.  For example, the category of units of measure could be specified in a device resource so that a profile's units are validated against specific sources or collections of unit of measure.</p> <p>Use of URI to specify the unit of measures file was discussed.  This would be novel with regard to providing EdgeX information.  Per core working group of 2/17/22 and then again at the monthly architect's meeting of 2/28/22, we may look to use a URI to specify a configuration file to specify UoM in the future.  Indeed, URIs may be used (an EdgeX 3.0 consideration) to point to device profiles, configuration files, and other information in the future.  This would even allow multiple EdgeX instances to use the same configuration or profile (multiple EdgeX instances using the same URI to use a shared profile for example).  However, it was deemed scope creep and too much to do for this first iteration.</p> <p>Initially, this ADR allowed for the UoM to also or alternately to be defined in the standard metadata service configuration file (`configuration.toml').  During the Core WG meeting of 3/3/22, it was decided to simplify the design and strictly limit UoM to a separate configuration file.  If future use cases or adopters request inline definition, this can be implemented in a future release.</p>"},{"location":"design/adr/core/0022-UoM/#consequences","title":"Consequences","text":"<ul> <li>Validation could impact performance.  Therefore allowing it to be turned on or off is critical to some use cases.  However, it will only impact performance of profile creation/updates (and associated device resources) in core metadata.</li> </ul>"},{"location":"design/adr/core/0022-UoM/#references","title":"References","text":""},{"location":"design/adr/core/0022-UoM/#uom-standards","title":"UoM Standards","text":"<ul> <li>https://ediacademy.com/blog/x12-unit-of-measurement-codes/</li> <li>https://unece.org/fileadmin/DAM/cefact/recommendations/rec20/rec20_rev3_Annex2e.pdf</li> <li>https://en.wikipedia.org/wiki/Unified_Code_for_Units_of_Measure</li> <li>https://www.ogc.org/standards/sensorthings</li> <li>https://datatracker.ietf.org/doc/html/rfc8428</li> <li>https://datatracker.ietf.org/doc/html/rfc8428#section-12.1</li> </ul>"},{"location":"design/adr/core/0022-UoM/#uom-tools-and-databases","title":"UoM Tools and Databases","text":"<ul> <li>https://ucum.nlm.nih.gov/ucum-lhc/demo.html</li> <li>https://project-haystack.org/doc/Units</li> <li>https://github.com/fantom-lang/fantom/blob/master/etc/sys/units.txt</li> <li>https://gs1.github.io/UnitConverterUNECERec20/</li> </ul>"},{"location":"design/adr/device-service/0002-Array-Datatypes/","title":"Array Datatypes Design","text":"<ul> <li>Status</li> <li>Context</li> <li>Decision</li> <li>Consequences</li> </ul>"},{"location":"design/adr/device-service/0002-Array-Datatypes/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/device-service/0002-Array-Datatypes/#context","title":"Context","text":"<p>The current data model does not directly provide for devices which provide array data. Small fixed-length arrays may be handled by defining multiple device resources - one for each element - and aggregating them via a resource command. Other array data may be passed using the Binary type. Neither of these approaches is ideal: the binary data is opaque and any service processing it would need specific knowledge to do so, and aggregation presents the device service implementation with a multiple-read request that could in many cases be better handled by a single request.</p> <p>This design adds arrays of primitives to the range of supported types in EdgeX. It comprises an extension of the DeviceProfile model, and an update to the definition of Reading.</p>"},{"location":"design/adr/device-service/0002-Array-Datatypes/#decision","title":"Decision","text":""},{"location":"design/adr/device-service/0002-Array-Datatypes/#deviceprofile-extension","title":"DeviceProfile extension","text":"<p>The permitted values of the <code>Type</code> field in <code>PropertyValue</code> are extended to include:   \"BoolArray\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint64Array\", \"Int8Array\", Int16Array\", \"Int32Array\", \"Int64Array\", \"Float32Array\", \"Float64Array\"</p>"},{"location":"design/adr/device-service/0002-Array-Datatypes/#readings","title":"Readings","text":"<p>In the API (v1 and v2), <code>Reading.Value</code> is a string representation of the data. If this is maintained, the representation for Array types will follow the JSON array syntax, ie <code>[\"value1\", \"value2\", ...]</code></p>"},{"location":"design/adr/device-service/0002-Array-Datatypes/#consequences","title":"Consequences","text":"<p>Any service which processes Readings will need to be reworked to account for the new Reading type.</p>"},{"location":"design/adr/device-service/0002-Array-Datatypes/#device-service-considerations","title":"Device Service considerations","text":"<p>The API used for interfacing between device SDKs and devices service implementations contains a local representation of reading values. This will need to be updated in line with the changes outlined here. For C, this will involve an extension of the existing union type. For Go, additional fields may be added to the <code>CommandValue</code> structure.</p> <p>Processing of numeric data in the device service, ie <code>offset</code>, <code>scale</code> etc will not be applied to the values in an array.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/","title":"Device Service REST API","text":""},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#context","title":"Context","text":"<p>This ADR details the REST API to be provided by Device Service implementations in EdgeX version 2.x. As such, it supercedes the equivalent sections of the earlier \"Device Service Functional Requirements\" document. These requirements should be implemented as far as possible within the Device Service SDKs, but they also apply to any Device Service implementation.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#decision","title":"Decision","text":""},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#common-endpoints","title":"Common endpoints","text":"<p>The DS should provide the REST endpoints that are expected of all EdgeX microservices, specifically:</p> <ul> <li>config</li> <li>metrics</li> <li>ping</li> <li>version</li> </ul>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#callback","title":"Callback","text":"Endpoint Methods callback/device <code>PUT</code> and <code>POST</code> callback/device/name/{name} <code>DELETE</code> callback/profile <code>PUT</code> callback/watcher <code>PUT</code> and <code>POST</code> callback/watcher/name/{name} <code>DELETE</code> parameter meaning {name} the name of the device or watcher <p>These endpoints are used by the Core Metadata service to inform the device service of metadata updates. Endpoints are defined for each of the objects of interest to a device service, ie Devices, Device Profiles and Provision Watchers. On receipt of calls to these endpoints the device service should update its internal state accordingly. Note that the device service does not need to be informed of the creation or deletion of device profiles, as these operations may only occur where no devices are associated with the profile. To avoid stale profile entries the device service should delete a profile from its cache when the last device using it is deleted.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#object-deletion","title":"Object deletion","text":"<p>When an object is deleted, the Metadata service makes a <code>DELETE</code> request to the relevant callback/{type}/name/{name} endpoint.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#object-creation-and-updates","title":"Object creation and updates","text":"<p>When an object is created or updated, the Metadata service makes a <code>POST</code> or <code>PUT</code> request respectively to the relevant callback/{type} endpoint. The payload of the request is the new or updated object, ie one of the Device, DeviceProfile or ProvisionWatcher DTOs.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#device","title":"Device","text":"Endpoint Methods device/name/{name}/{command} <code>GET</code> and <code>PUT</code> parameter meaning {name} the name of the device {command} the command name <p>The command specified must match a deviceCommand or deviceResource name in the device's profile</p> <p>body (for <code>PUT</code>): An <code>application/json</code> SettingRequest, which is a set of key/value pairs where the keys are valid deviceResource names, and the values provide the command argument for that resource. Example: <code>{\"AHU-TargetTemperature\": \"28.5\", \"AHU-TargetBand\": \"4.0\"}</code></p> Return code Meaning 200 the command was successful 404 the specified device does not exist, or the command/resource is unknown 405 attempted write to a read-only resource 423 the specified device is locked (admin state) or disabled (operating state) 500 the device driver is unable to process the request <p>response body: A successful <code>GET</code> operation will return a JSON-encoded EventResponse object, which contains one or more Readings. Example: <code>{\"apiVersion\":\"v2\",\"deviceName\":\"Gyro\",\"origin\":1592405201763915855,\"readings\":[{\"deviceName\":\"Gyro\",\"name\":\"Xrotation\",\"value\":\"124\",\"origin\":1592405201763915855,\"valueType\":\"int32\"},{\"deviceName\":\"Gyro\",\"name\":\"Yrotation\",\"value\":\"-54\",\"origin\":1592405201763915855,\"valueType\":\"int32\"},{\"deviceName\":\"Gyro\",\"name\":\"Zrotation\",\"value\":\"122\",\"origin\":1592405201763915855,\"valueType\":\"int32\"}]}</code></p> <p>This endpoint is used for obtaining readings from a device, and for writing settings to a device.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#data-formats","title":"Data formats","text":"<p>The values obtained when readings are taken, or used to make settings, are expressed as strings.</p> Type EdgeX types Representation Boolean <code>Bool</code> \"true\" or \"false\" Integer <code>Uint8-Uint64</code>, <code>Int8-Int64</code> Numeric string, eg \"-132\" Float <code>Float32</code>, <code>Float64</code> Decimal with exponent, eg \"1.234e-5\" String <code>String</code> string Binary <code>Bytes</code> octet array Array <code>BoolArray</code>, <code>Uint8Array-Uint64Array</code>, <code>Int8Array-Int64Array</code>, <code>Float32Array</code>, <code>Float64Array</code> JSON Array, eg \"[\"1\", \"34\", \"-5\"]\" <p>Notes: - The presence of a Binary reading will cause the entire Event to be encoded using CBOR rather than JSON - Arrays of String and Binary data are not supported</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#readings-and-events","title":"Readings and Events","text":"<p>A Reading represents a value obtained from a deviceResource. It contains the following fields</p> Field name Description deviceName The name of the device profileName The name of the Profile describing the Device resourceName The name of the deviceResource origin A timestamp indicating when the reading was taken value The reading value valueType The type of the data <p>Or for binary Readings, the following fields</p> Field name Description deviceName The name of the device profileName The name of the Profile describing the Device resourceName The name of the deviceResource origin A timestamp indicating when the reading was taken binaryValue The reading value mediaType The MIME type of the data <p>An Event represents the result of a <code>GET</code> command. If the command names a deviceResource, the Event will contain a single Reading. If the command names a deviceCommand, the Event will contain as many Readings as there are deviceResources listed in the deviceCommand.</p> <p>The fields of an Event are as follows:</p> Field name Description deviceName The name of the Device from which the Readings are taken profileName The name of the Profile describing the Device origin The time at which the Event was created readings An array of Readings"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#query-parameters","title":"Query Parameters","text":"<p>Calls to the device endpoints may include a Query String in the URL. This may be used to pass parameters relating to the request to the device service. Individual device services may define their own parameters to control specific behaviors. Parameters beginning with the prefix <code>ds-</code> are reserved to the Device SDKs and the following parameters are defined for GET requests:</p> Parameter Valid Values Default Meaning ds-pushevent \"yes\" or \"no\" \"no\" If set to yes, a successful <code>GET</code> will result in an event being pushed to the EdgeX system ds-returnevent \"yes\" or \"no\" \"yes\" If set to no, there will be no Event returned in the http response"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#device-states","title":"Device States","text":"<p>A Device in EdgeX has two states associated with it: the Administrative state and the Operational state. The Administrative state may be set to <code>LOCKED</code> (normally <code>UNLOCKED</code>) to block access to the device for administrative reasons. The Operational state may be set to <code>DOWN</code> (normally <code>UP</code>) to indicate that the device is not currently working. In either case access to the device via this endpoint will be denied and HTTP 423 (\"Locked\") will be returned.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#data-transformations","title":"Data Transformations","text":"<p>A number of simple data transformations may be defined in the deviceResource. The table below shows these transformations in the order in which they are applied to outgoing data, ie Readings. The transformations are inverted and applied in reverse order for incoming data.</p> Transform Applicable reading types Effect mask Integers The reading is masked (bitwise-and operation) with the specified value. shift Integers The reading is bit-shifted by the specified value. Positive values indicate right-shift, negative for left. base Integers and Floats The reading is replaced by the specified value raised to the power of the reading. scale Integers and Floats The reading is multiplied by the specified value. offset Integers and Floats The reading is increased by the specified value. <p>The operation of the mask transform on incoming data (a setting) is that the value to be set on the resource is the existing value bitwise-anded with the complement of the mask, bitwise-ored with the value specified in the request.</p> <p>ie, <code>new-value = (current-value &amp; !mask) | request-value</code></p> <p>The combination of mask and shift can therefore be used to access data contained in a subdivision of an octet.</p> <p>It is possible that following the application of the specified transformations, a value may exceed the range that may be represented by its type. Should this occur on a set operation, a suitable error should be logged and returned, along with the <code>Bad Request</code> http code 400. If it occurs as part of a get operation, the Reading's value should be set to the String <code>\"overflow\"</code> and its valueType to <code>String</code>.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#assertions-and-mappings","title":"Assertions and Mappings","text":"<p>Assertions are another attribute in a device resource's PropertyValue, which specify a string which the reading value is compared against. If the comparison fails, then the http request returns a string of the form \"Assertion failed for device resource: \\, with value: \\\", this also has a side-effect of setting the device operatingstate to <code>DISABLED</code>. A 500 status code is also returned. Note that the error response and status code should be returned regardless of the <code>ds-returnevent</code> setting. <p>Assertions are also checked where an event is being generated due to an AutoEvent, or asynchronous readings are pushed. In these cases if the assertion is triggered, an error should be logged and the operating state should be set as above.</p> <p>Assertions are not checked for settings, only for readings.</p> <p>Mappings may be defined in a deviceCommand. These allow Readings of string type to be remapped. Mappings are applied after assertions are checked, and are the final transformation before Readings are created. Mappings are also applied, but in reverse, to settings (<code>PUT</code> request data).</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#lastconnected-timestamp","title":"lastConnected timestamp","text":"<p>Each Device has as part of its metadata a timestamp named <code>lastConnected</code>, this indicates the most recent occasion when the device was successfully interacted with. The device service should update this timestamp every time a GET or PUT operation succeeds, unless it has been configured not to do so (eg for performance reasons).</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#discovery","title":"Discovery","text":"Endpoint Methods discovery <code>POST</code> <p>A call to this endpoint triggers the device discovery process, if enabled. See Discovery Design for details.</p>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#consequences","title":"Consequences","text":""},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#changes-from-v1x-api","title":"Changes from v1.x API","text":"<ul> <li>The callback endpoint is split according to the type of object being updated</li> <li>Callbacks for new and updated objects take the object in the request body</li> <li>The device/all form is removed</li> <li><code>GET</code> requests take parameters controlling what is to be done with resulting Events, and the default behavior does not send the Event to core-data</li> </ul>"},{"location":"design/adr/device-service/0011-DeviceService-Rest-API/#references","title":"References","text":"<p>OpenAPI definition of v2 API : https://github.com/edgexfoundry/device-sdk-go/blob/master/openapi/v2/device-sdk.yaml</p> <p>Device Service Functional Requirements (Geneva) : https://wiki.edgexfoundry.org/download/attachments/329488/edgex-device-service-requirements-v11.pdf?version=1&amp;modificationDate=1591621033000&amp;api=v2</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/","title":"Device Service Filters","text":""},{"location":"design/adr/device-service/0012-DeviceService-Filters/#status","title":"Status","text":"<p> Approved  (by TSC vote on 3/15/21)</p> <ul> <li>design (initially) for Hanoi - but now being considered for Ireland</li> <li>implementation TBD (desired feature targeted for Ireland or Jakarata)</li> </ul>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#context","title":"Context","text":"<p>In EdgeX today, sensor/device data collected can be \"filtered\" by application services before being exported or sent to some north side application or system. Built-in application service functions (available through the app services SDK) allow EdgeX event/reading objects to be filtered by device name or by device ResourceName.  That is, event/readings can be filtered by:</p> <ul> <li>which device sent the event/reading (as determined by the Event device property).</li> <li>the classification or origin (such as temperature or humidity) of data produced by the device as determined by the Reading's name property (which used to be the value descriptor and now refers to the device ResourceName).</li> </ul>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#two-levels-of-device-service-filtering","title":"Two Levels of Device Service Filtering","text":"<p>There are potentially two places where \"filtering\" in a device service could be useful.  </p> <ul> <li>One (Sensor Data Filter) - after the device service has communicated with the sensor or device to get sensor values (but before the service creates <code>Event/Reading</code> objects and pushes those to core data).  A sensor data filter would allow the device service to essentially ignore some of the raw sensed data.  This would allow for some device service optimization in that the device service would not have perform type transformations and creation of event/reading objects if the data can be eliminated at this early stage.  This first level filtering would, if put in place, likely occur in code associated with the read command gets done by the <code>ProtocolDriver</code>.</li> <li>Two (Reading Filter) - after the sensor data has been collected and read and put into <code>Event/Reading</code> objects, there is a desire to filter some of the <code>Readings</code> based on the <code>Reading</code> values or <code>Reading</code> name (which is the device ResourceName) or some combination of value and name.</li> </ul> <p>At this time, this design only addresses the need for the second filter (Reading Filter).  At the time of this writing, no applicable use case has yet to be defined to warrant the Sensor Data Filter.</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#reading-filters","title":"Reading Filters","text":"<p>Reading filters will allow, not unlike application service filter functions today, to have <code>Readings</code> in an <code>Event</code> to be removed if:</p> <ul> <li> <p>the value was outside or inside some range, or the value was greater than, less than or equal to some value</p> <ul> <li>based on the <code>Reading</code> value (numeric) of a <code>Reading</code> outside a specified range (min/max) described in the service configuration.  Thus avoiding sending in outlier or jittery data <code>Readings</code> that could negatively effect analytics.</li> <li>Future scope:  based on the <code>Reading</code> value (numeric) equal to or near (with in some specified range) the last reading.  This allows a device service to reduce sending in <code>Event/Readings</code> that do not represent any significant change.  This differs from the already implemented onChangeOnly in that it is filtering <code>Readings</code> within a specified degree of change.  Note: this feature would require caching of readings which has not fully been implemented in the SDK.  The existing mechanism for <code>autoevents</code> provides a partial cache.  Added for future reference, but this feature would not be accomplished in the initial implementation; requiring extra design work on caching to be implemented.</li> </ul> </li> <li> <p>the value was the same as some or not the same as some specified value or values (for strings, boolean and other non-numeric values)</p> </li> <li>the value matches a pattern (glob and/or regex) when the value is a string.</li> <li>the name (the device ResourceName) matched a particular value; in other words match <code>temperature</code> or <code>humidity</code> as example device resources.</li> </ul> <p>Unlike application services, there is not a need to filter on a device name (or identifier).  Simply disable the device in the device service if all <code>Event/Readings</code> are to be stopped for the device.</p> <p>In the case that all <code>Readings</code> of an <code>Event</code> are filtered, it is assumed the entire <code>Event</code> is deemed to be worthless and not sent to core data by the device service.  If only some <code>Readings</code> from and <code>Event</code> are filtered, the <code>Event</code> minus the filtered <code>Readings</code> would be sent to core data.</p> <p>The filter behaves the same whether the collection of <code>Readings</code> and <code>Events</code> is triggered by a scheduled collection of data from the underlying sensor/device or triggered by a command request (as from the command service).  Therefore, the call for a command request still results in a successful status code and a return of no results (or partial results) if the filter causes all or some of the readings to be removed.</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#design-architecture","title":"Design / Architecture","text":"<p>A new function interface shall be defined that, when implemented, performs a Reading Filter operation.  A ReadingFilter function would take a parameter (an <code>Event</code> containing readings), check whether the <code>Readings</code> of the <code>Event</code> match on the filtering configuration (see below) and if they do then remove them from the <code>Event</code>.  The ReadingFilter function would return the <code>Event</code> object (minus filtered <code>Readings</code>) or <code>nil</code> if the <code>Event</code> held no more <code>Readings</code>.  Pseudo code for the generic function is provided below.  The results returned will include a boolean to indicate whether any <code>Reading</code> objects were removed from the <code>Event</code> (allowing the receiver to know if some were filtered from the original list).</p> <pre><code>func (f Filter) ReadingFilter(lc logger.LoggingClient, event *models.Event) (*models.Event, error, boolean) {\n// depending on impl; filtering for values in/out of a range, &gt;, &lt;, =, same, not same, from a particular name (device resource), etc.\n// The boolean will indicate whether any Readings were filtered from the Event.  \nif (len(event.Reading )) &gt; 0)\nif (len filteredReadings &gt; 0)\nreturn event, true\nelse return event, false\nelse\nreturn nil, true\n}\n</code></pre> <p>Based on current needs/use cases, implementations of the function interface could include the following filter functions:</p> <pre><code>func (f Filter) FilterByValue (lc logger.LoggingClient, event *models.Event) (*models.Event, error, boolean) {}\n\nfunc (f Filter) FilterByResourceNamesMatch (lc logger.LoggingClient, event *models.Event) (*models.Event, error, boolean) {}\n</code></pre> <p>Note</p> <p>The app functions SDK comes with <code>FilterByDeviceName</code> and <code>FilterByResourceName</code> functions today. The FilterByResourceName would behave similarly to FilterByResourceNameMatch.</p> <p>The Filter structure houses the configuration parameters for which the filter functions work and filter on.</p> <p>Note</p> <p>The app functions SDK uses a fairly simple Filter structure.</p> <pre><code>    type Filter struct {\nFilterValues []string\nFilterOut    bool\n}\n</code></pre> <p>Given the collection of filter operations (in range, out of range, equal or not equal), the following structure is proposed:</p> <pre><code>    type Filter struct {\nFilterValues []string\nTargetResourceName string\nFilterOp string  // enum of in (in range inclusive), out (outside a range exclusive), eq (equal) or ne (not equal)\n}\n</code></pre> <p>Examples use of the Filter structure to specify filtering:</p> <pre><code>    Filter {FilterValues: {10, 20}, \"Int64\", FilterOp: \"in\"} // filter for those Int64 readings with values between 10-20 inclusive\nFilter {FilterValues: {10, 20}, \"Int64\", FilterOp: \"out\"} // filter for those Int64 readings with values outside of 10-20.\nFilter {FilterValues: {8, 10, 12}, \"Int64\", FilterOp: \"eq\"} //filter for those Int64 readings with values of 8, 10, or 12.\nFilter {FilterValues: {8, 10}, \"Int64\", FilterOp: \"ne\"}  //filter for those Int64 readings with values not equal to 8 or 10\nFilter {FilterValues: {\"Int32\", \"Int64\"}, nil, FilterOp: \"eq\"} //filter to be used with FilterByResourceNameMatch.  Filter for resource names of Int32 or Int64.\nFilter {FilterValues: {\"Int32\"}, nil, FilterOp: \"ne\"} //filter to be used with FilterByResourceNameMatch.  Filter for resource names not equal to (excluding) Int32.\n</code></pre> <p>A NewFilter function creates, initializes and returns a new instance of the filter based on the configuration provided.</p> <pre><code>func NewReadingNameFilter(filterValues []string, filterOp string) Filter {\nreturn Filter{FilterValues: filterValues, TargetResourceName string, FilterOp: filterOp}\n}\n</code></pre>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#sharing-filter-functions","title":"Sharing filter functions","text":"<p>If one were to explore the filtering functions in the app functions SDK filter.go (both <code>FilterByDeviceName</code> and <code>FilterByValueDescriptor</code>), the filters operate on the <code>Event</code> model object and return the same objects (<code>Event</code> or nil).  Ideally, since both app services and device services generally share the same interface model (from <code>go-mod-core-contracts</code>), it would be the desire to share the same filter functions functions between SDKs and associated services.</p> <p>Decisions on how to do this in Go - whether by shared module for example - is left as a future release design and implementation task - and as the need for common filter functions across device services and application services are identified in use cases.  C needs are likely to be handled in the SDK directly.</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#additional-design-considerations","title":"Additional Design Considerations","text":"<p>As Device Services do not have the concept of a functions pipeline like application services do, consideration must be given as to how and where to:</p> <ul> <li>provide configuration to specify which filter functions to invoke</li> <li>create the filter</li> <li>invoke the filtering functions</li> </ul> <p>At this time, custom filters will not be supported as the custom filters would not be known by the SDK and therefore could not be specified in configuration.  This is consistent with the app functions SDK and filtering.</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#function-inflection-point","title":"Function Inflection Point","text":"<p>It is precisely after the convert to <code>Event/Reading</code> objects (after the async readings are assembled into events) and before returning that result in <code>common.SendEvent</code> (in utils.go) function that the device service should invoke the required filter functions.  In the existing V1 implementation of the device-sdk-go, commands, async readings, and auto-events all call the function <code>common.SendEvent()</code>.  Note: V2 implementation will require some re-evaluation of this inflection point.  Where possible, the implementation should locate a single point of inflection if possible.  In the C SDK, it is likely that the filters will be called before conversion to Event/Reading objects - they will operate on commandresult objects (equivalent to CommandValues).</p> <p>The order in which functions are called is important when more than one filter is provided.  The order that functions are called should be reflected in the order listed in the configuration of the filters.</p> <p>Events containing binary values (event.HasBinaryValue), will not be filtered.  Future releases may include binary value filters.</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#setting-filter-function-and-configuration","title":"Setting Filter Function and Configuration","text":"<p>When filter functions are shared (or appear to be doing the same type of work) between SDKs, the configuration of the similar filter functions should also look similar.  The app functions SDK configuration model for filters should therefore be followed.</p> <p>While device services do not have pipelines, the inclusion and configuration of filters for device services should have a similar look (to provide symmetry with app services). The configuration has to provide the functions required and parameters to make the functions work - even though the association to a pipeline is not required.  Below is the common app service configuration as it relates to filters:</p> <pre><code>[Writable.Pipeline]\nExecutionOrder = \"FilterByDeviceName, TransformToXML, SetOutputData\"\n[Writable.Pipeline.Functions.FilterByDeviceName]\n[Writable.Pipeline.Functions.FilterByDeviceName.Parameters]\nDeviceNames = \"Random-Float-Device,Random-Integer-Device\"\nFilterOut = \"false\"\n</code></pre> <p>Suggested and hypothetical configuration for the device service reading filters should look something like that below.</p> <pre><code>[Writable.Filters]\n# filter readings where resource name equals Int32 \nExecutionOrder = \"FilterByResourceNamesMatch, FilterByValue\"\n[Writable.Filter.Functions.FilterByResourceNamesMatch]\n[Writable.Filter.Functions.FilterByResourceNamesMatch.Parameters]\nFilterValues = \"Int32\"\nFilterOps =\"eq\"\n# filter readings where the Int64 readings (resource name) is Int64 and the values are between 10 and 20\n[Writable.Filter.Functions.FilterByValue]\n[Writable.Filter.Functions.FilterByValue.Parameters]\nTargetResourceName = \"Int64\"\nFilterValues = {10,20}\nFilterOp = \"in\"\n</code></pre>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#decision","title":"Decision","text":"<p>To be determined</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#consequences","title":"Consequences","text":"<p>This design does not take into account potential changes found with the V2 API.</p>"},{"location":"design/adr/device-service/0012-DeviceService-Filters/#references","title":"References","text":""},{"location":"design/adr/devops/0007-Release-Automation/","title":"Release Automation","text":""},{"location":"design/adr/devops/0007-Release-Automation/#status","title":"Status","text":"<p>Approved by TSC 04/08/2020</p>"},{"location":"design/adr/devops/0007-Release-Automation/#context","title":"Context","text":"<p>EdgeX Foundry is a framework composed of microservices to ease development of IoT/Edge solutions. With the framework getting richer, project growth, the number of artifacts to be released has increased. This proposal outlines a method for automating the release process for the base artifacts.</p>"},{"location":"design/adr/devops/0007-Release-Automation/#requirements","title":"Requirements","text":""},{"location":"design/adr/devops/0007-Release-Automation/#release-artifact-definition","title":"Release Artifact Definition","text":"<p>For the scope of Hanoi release artifact types are defined as:</p> <ul> <li>GitHub tags in the repositories.</li> <li>Docker images in our Nexus repository and Docker hub.</li> <li>*Snaps in the Snapcraft store.</li> </ul> <p>This list is likely to expand in future releases.</p> <p>*The building and publishing of snaps was removed from community scope in September 2020 and is managed outside the community by Canonical.</p>"},{"location":"design/adr/devops/0007-Release-Automation/#general-requirements","title":"General Requirements","text":"<p>As the EdgeX Release Czar I gathered the following requirements for automating this part of the release.</p> <ol> <li>The release automation needs a manual trigger to be triggered by the EdgeX Release Czar or the Linux Foundation Release Engineers. The goal of this automation is to have a \"push button\" release mechanism to reduce human error in our release process.</li> <li>Release artifacts can come from one or more GitHub repositories at a time.</li> <li>GitHub repositories can have one or more release artifact types to release.</li> <li>GitHub repositories can have one or more artifacts of a specific type to release. (For example: The mono repository, edgex-go, has more than 20 docker images to release.)</li> <li>GitHub repositories may be released at different times. (For example: Application and Device service repositories can be released on a different day than the Core services in the mono repository.)</li> <li>Ability to track multiple release streams for the project.</li> <li>An audit trail history for releases.</li> </ol>"},{"location":"design/adr/devops/0007-Release-Automation/#location","title":"Location","text":"<p>The code that will manage the release automation for EdgeX Foundry will live in a repository called <code>cd-management</code>. This repository will have a branch named <code>release</code> that will track the releases of artifacts off the <code>main</code> branch of the EdgeX Foundry repositories.</p>"},{"location":"design/adr/devops/0007-Release-Automation/#multiple-release-streams","title":"Multiple Release Streams","text":"<p>EdgeX Foundry has this idea of multple release streams that basically coincides with different named branches in GitHub. For the majority of the main releases we will be targeting those off the <code>main</code> branch. In our <code>cd-management</code> repository we will have a <code>release</code> branch that will track the <code>main</code> branches EdgeX repositories. In the future we will mark a specific release for long term support (LTS). When this happens we will have to branch off <code>main</code> in the EdgeX repositories and create a separate release stream for the LTS. The suggestion at that point will be to branch off the <code>release</code> branch in <code>cd-management</code> as well and use this new release branch to track the LTS branches in the EdgeX repositories.</p>"},{"location":"design/adr/devops/0007-Release-Automation/#release-flow","title":"Release Flow","text":""},{"location":"design/adr/devops/0007-Release-Automation/#go-modules-device-and-application-sdks","title":"Go Modules, Device and Application SDKs","text":""},{"location":"design/adr/devops/0007-Release-Automation/#during-development","title":"During Development","text":"<p>Go modules, Application and Device SDKs only release a GitHub tag as their release. Go modules, Application and Device SDKs are set up to automatically increment a developmental version tag on each merge to <code>main</code>. (IE: 1.0.0-dev.1 -&gt; 1.0.0-dev.2)</p>"},{"location":"design/adr/devops/0007-Release-Automation/#release","title":"Release","text":"<p>The release automation for Go Modules, Device and Application SDKs is used to set the final release version git tag. (IE: 1.0.0-dev.X -&gt; 1.0.0) For each release, the Go Modules, Device and Application SDK repositories will be tagged with the release version.</p>"},{"location":"design/adr/devops/0007-Release-Automation/#core-services-including-security-and-system-management-services-application-services-device-services-and-supporting-docker-images","title":"Core Services (Including Security and System Management services), Application Services, Device Services and Supporting Docker Images","text":""},{"location":"design/adr/devops/0007-Release-Automation/#during-development_1","title":"During Development","text":"<p>For the Core Services, Application Services, Device Services and Supporting Docker Images we release Github tags and docker images. On every merge to the <code>main</code> branch we will do the following; increment a developmental version tag on GitHub, (IE: 1.0.0-dev.1 -&gt; 1.0.0-dev.2), stage docker images in our Nexus repository (docker.staging).</p>"},{"location":"design/adr/devops/0007-Release-Automation/#release_1","title":"Release","text":"<p>The release automation will need to do the following:</p> <ol> <li>Set version tag on GitHub. (IE: 1.0.0-dev.X -&gt; 1.0.0)</li> <li>Promote docker images in our Nexus repository from docker.staging to docker.release and public Docker hub.</li> </ol>"},{"location":"design/adr/devops/0007-Release-Automation/#supporting-assets-eg-edgex-cli","title":"Supporting Assets (e.g. edgex-cli)","text":""},{"location":"design/adr/devops/0007-Release-Automation/#during-development_2","title":"During Development","text":"<p>For supporting release assets (e.g. edgex-cli) we release GitHub tags on every merge to the <code>main</code> branch. For every merge to <code>main</code> we will do the following; increment a developmental version tag on GitHub, (IE: 1.0.0-dev.1 -&gt; 1.0.0-dev.2) and store the build artifacts in our Nexus repository.</p>"},{"location":"design/adr/devops/0007-Release-Automation/#release_2","title":"Release","text":"<p>For EdgeX releases the release automation will set the final release version by creating a git tag (e.g. 1.0.0-dev.X -&gt; 1.0.0) and produce a Github Release containing the binary assets targeted for release.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/","title":"Release Artifacts","text":""},{"location":"design/adr/devops/0010-Release-Artifacts/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#context","title":"Context","text":"<p>During the Geneva release of EdgeX Foundry the DevOps WG transformed the CI/CD process with new Jenkins pipeline functionality. After this new functionality was added we also started adding release automation. This new automation is outlined in ADR 0007 Release Automation. However, in ADR 0007 Release Automation only two release artifact types are outlined. This document is meant to be a living document to try to outlines all currently supported artifacts associated with an EdgeX Foundry release, and should be updated if/when this list changes.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#release-artifact-types","title":"Release Artifact Types","text":""},{"location":"design/adr/devops/0010-Release-Artifacts/#docker-images","title":"Docker Images","text":"<p>Tied to Code Release? Yes</p> <p>Docker images are released for every named release of EdgeX Foundry. During development the community releases images to the <code>docker.staging</code> repository in Nexus. At the time of release we promote the last tested image from <code>docker.staging</code> to <code>docker.release</code>. In addition to that we will publish the docker image on DockerHub.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#nexus-retention-policy","title":"Nexus Retention Policy","text":""},{"location":"design/adr/devops/0010-Release-Artifacts/#dockersnapshots","title":"docker.snapshots","text":"<p>Retention Policy: 90 days since last download</p> <p>Contains: Docker images that are not expected to be released. This contains images to optimize the builds in the CI infrastructure. The definitions of these docker images can be found in the edgexfoundry/ci-build-images Github repository.</p> <p>Docker Tags Used: Version, Latest</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#dockerstaging","title":"docker.staging","text":"<p>Retention Policy: 180 days since last download</p> <p>Contains: Docker images built for potential release and testing purposes during development.</p> <p>Docker Tags Used: Version (ie: v1.x), Release Branch (master, fuji, etc), Latest</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#dockerrelease","title":"docker.release","text":"<p>Retention Policy: No automatic removal. Requires TSC approval to remove images from this repository.</p> <p>Contains: Officially released docker images for EdgeX.</p> <p>Docker Tags Used:\u2022Version (ie: v1.x), Latest</p> <p>Nexus Cleanup Policies Reference</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#docker-compose-files","title":"Docker Compose Files","text":"<p>Tied to Code Release? Yes</p> <p>Docker compose files are released alongside the docker images for every release of EdgeX Foundry. During development the community maintains compose files a folder named <code>nightly-build</code>. These compose files are meant to be used by our testing frameworks. At the time of release the community makes compose files for that release in a folder matching it's name. (ie: <code>geneva</code>)</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#dockerhub-image-descriptions-and-overviews","title":"DockerHub Image Descriptions and Overviews","text":"<p>Tied to Code Release? No</p> <p>After Docker images are published to DockerHub, automation should be run to update the image Overviews and Descriptions of the necessary images. This automation is located in the <code>edgex-docker-hub-documentation</code> branch of the cd-management repository. In preparation for the release the community makes changes to the Overview and Description metadata as appropriate. The Release Czar will coordinate the execution of the automation near the release time.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#github-page-edgex-docs","title":"Github Page: EdgeX Docs","text":"<p>Tied to Code Release? No</p> <p>EdgeX Foundry releases a set of documentation for our project at http://docs.edgexfoundry.org. This page is a Github page that is managed by the edgex/foundry/edgex-docs Github repository. As a community we make our best effort to keep these docs up to date. On this page we are also versioning the docs with the semantic versions of the named releases. As a community we try to version our documentation site shortly after the official release date but documentation changes are addressed as we find them throughout the release cycle.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#github-tags","title":"GitHub Tags","text":"<p>Tied to Code Release? Yes, for the final semantic version</p> <p>Github tags are used to track the releases of EdgeX Foundry. During development the tags are incremented automatically for each commit using a development suffix (ie: <code>v1.1.1-dev.1</code> -&gt; <code>v1.1.1-dev.2</code>). At the time of release we release a tag with the final semantic version (ie: <code>v1.1.1</code>).</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#snaps","title":"Snaps","text":"<p>Tied to Code Release? Yes</p> <p>The building of snaps was removed from community scope in September 2020 but are still available on the snapcraft store.</p> <p>Canonical publishes daily arm64 and amd64 releases of the following snaps to latest/edge in the Snap Store. These builds take place on the Canonical Launchpad platform and use the latest code from the master branch of each EdgeX repository, versioned using the latest git tag.</p> <p>edgexfoundry edgex-app-service-configurable edgex-device-camera edgex-device-rest edgex-device-modbus edgex-device-mqtt edgex-device-grove edgex-cli (work-in-progress) Note - this list may expand over time.</p> <p>At code freeze the edgexfoundry snap revision in the edge channel is promoted to latest/beta and $TRACK/beta. Publishing to beta will trigger the Canonical checkbox automated tests, which include tests on a variety of hardware hosted by Canonical.</p> <p>When the project tags a release of any of the snaps listed above, the resulting snap revision is first promoted from the edge channel to latest/candidate and $TRACK/candidate. Canonical tests this revision, and if all looks good, releases to latest/stable and $TRACK/stable.</p> <p>Canonical may also publish updates to the EdgeX snaps after release to address high/critical bugs and CVEs (common vulnerabilities and exposures).</p> <p>Note - in the above descriptions, $TRACK corresponds to the named release tracks (e.g. fuji, geneva, hanoi, ...) which are created for every major/minor release of EdgeX Foundry.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#swaggerhub-api-docs","title":"SwaggerHub API Docs","text":"<p>Tied to Code Release? No</p> <p>In addition to our documentation site EdgeX foundry also releases our API specifications on Swaggerhub.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#testing-framework","title":"Testing Framework","text":"<p>Tied to Code Release? Yes</p> <p>The EdgeX Foundry community has a set of tests we maintain to do regression testing during development this framework is tracking the <code>master</code> branch of the components of EdgeX. At the time of release we will update the testing frameworks to point at the released Github tags and add a version tag to the testing frameworks themselves. This creates a snapshot of testing framework at the time of release for validation of the official release.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#github-release-artifacts","title":"GitHub Release Artifacts","text":"<p>Tied to Code Release? Yes</p> <p>GitHub release functionality is utilized on some repositories to release binary artifacts/assets (e.g. zip/tar files). These are versioned with the semantic version and found on the repository's GitHub Release page under 'Assets'.</p>"},{"location":"design/adr/devops/0010-Release-Artifacts/#known-build-dependencies-for-edgex-foundry","title":"Known Build Dependencies for EdgeX Foundry","text":"<p>There are some internal build dependencies within the EdgeX Foundry organization. When building artifacts for validation or a release you will need to take into the account the build dependencies to make sure you build them in the correct order.</p> <p></p> <ul> <li>Application services have a dependency on the Application Functions SDK.</li> <li>Go Device services have a dependency on the Go Device SDK.</li> <li>C Device services have a dependency on the C Device SDK.</li> </ul>"},{"location":"design/adr/devops/0010-Release-Artifacts/#decision","title":"Decision","text":""},{"location":"design/adr/devops/0010-Release-Artifacts/#consequences","title":"Consequences","text":"<p>This document is meant to be a living document of all the release artifacts of EdgeX Foundry. With this ADR we would have a good understanding on what needs to be released and when they are released. Without this document this information will remain tribal knowledge within the community.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/","title":"Creation and Distribution of Secrets","text":""},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#context","title":"Context","text":"<p>This ADR seeks to clarify and prioritize the secret handling approach taken by EdgeX.</p> <p>EdgeX microservices need a number of secrets to be created and distributed in order to create a functional, secure system. Among these secrets are:</p> <ul> <li>Privileged administrator passwords (such as a database superuser password)</li> <li>Service account passwords (e.g. non-privileged database accounts)</li> <li>PKI private keys</li> </ul> <p>There is a lack of consistency on how secrets are created and distributed to EdgeX microservices, and when developers need to add new components to the system, it is unclear on what the preferred approach should be.</p> <p>This document assumes a threat model wherein the EdgeX services are sandboxed (such as in a snap or a container) and the host system is trusted, and all services running in a single snap share a trust boundary.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#terms","title":"Terms","text":"<p>The following terms will be helpful for understading the subsequent discussion:</p> <ul> <li>SECRETSLOC is a protected file system path where bootstrapping secrets are stored.</li> </ul> <p>While EdgeX implements a sophisticated secret handling mechanism,   that mechanism itself requires secrets.   For example, every microservice that talks to Vault   must have its own unique secret to authenticate:   Vault itself cannot be used to distribute these secrets.   SECRETSLOC fulfills the role that the non-routable   instance data IP address, 169.254.169.254,   fulfills in the public cloud:   delivery of bootstrapping secrets.   As EdgeX does not have a hypervisor nor virtual machines for this purpose,   a protected file system path is used instead.</p> <p>SECRETSLOC is implementation-dependent.    A desirable feature of SECRETSLOC would be that data written here   is kept in RAM and is not persisted to storage media.   This property is not achieveable in all circumstances.</p> <p>For Docker, a list of suggested paths--in preference order--is:</p> <ul> <li><code>/run/edgex/secrets</code> (a <code>tmpfs</code> volume on a Linux host)</li> <li><code>/tmp/edgex/secrets</code> (a temporary file area on Linux and MacOS hosts)</li> <li>A persistent docker volume (use when host bind mounts are not available)</li> </ul> <p>For snaps, a list of suggested paths-in preference order--is:   * <code>/run/snap.</code>$SNAP_NAME<code>/</code> (a <code>tmpfs</code> volume on a Linux host)   * $SNAP_DATA<code>/secrets</code> (a snap-specific persistent data area)   * TBD (a content interface that allows for sharing of secrets from the core snap)</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#current-practices-survey","title":"Current practices survey","text":"<p>A survey on the existing EdgeX secrets reveals the following appoaches.</p> <p>A designation of \"compliant\" means that the current implementation is aligned with the recommended practices documented in the next section. A designation of \"non-compliant\" means that the current implementation uses an implemention mechanism outside of the recommended practices documented in the next section. A \"non-compliant\" implementation is a candidate for refactoring to bring the implementation into conformance with the recommended practices.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#system-managed-secrets","title":"System-managed secrets","text":"<ul> <li>PKI private keys</li> <li>Docker: PKI generated by standalone utility every cold start of the framework. Distribution via SECRETSLOC. (Compliant.)</li> <li> <p>Snaps: PKI generated by standalone utility every cold start of the framework. Deployed to SECRETSLOC. (Compliant.)</p> </li> <li> <p>Secret store master password</p> </li> <li>Docker: Distribution via persistent docker volume. (Non-compliant.)</li> <li> <p>Snaps: Stored in <code>$SNAP_DATA/config/security-secrets-setup/res</code>. (Non-compliant.)</p> </li> <li> <p>Secret store per-service authentication tokens</p> </li> <li>Docker: Distribution via SECRETSLOC generated every cold start of the framework. (Compliant.)</li> <li> <p>Snaps: Distribution via SECRETSLOC, generated every cold start of the framework. (Compliant.)</p> </li> <li> <p>Postgres superuser password</p> </li> <li>Docker: Hard-coded into docker-compose file, checked in to source control. (Non-compliant.)</li> <li> <p>Snaps: Generated at snap install time via \"apg\" (\"automatic password generator\") tool, installed into Postgres, cached to <code>$SNAP_DATA/config/postgres/kongpw</code> (non-compliant), and passed to Kong via <code>$KONG_PG_PASSWORD</code>. </p> </li> <li> <p>MongoDB service account passwords</p> </li> <li>Docker: Direct consumption from secret store. (Compliant.)</li> <li> <p>Snaps: Direct consumption from secret store. (Compliant.)</p> </li> <li> <p>Redis authentication password</p> </li> <li>Docker: Server--staged to secrets volume and injected via command line. (Non-compliant.). Clients--direct consumption from secret store. (Compliant.)</li> <li> <p>Snaps: Server--staged to <code>$SNAP_DATA/secrets/edgex-redis/redis5-password</code> and injected via command line. (Non-compliant.). Clients--direct consumption from secret store. (Compliant.)</p> </li> <li> <p>Kong client authentication tokens</p> </li> <li>Docker: System of reference is unencrypted Postgres database. (Non-compliant.)</li> <li>Snaps: System of reference is unencrypted Postgres database. (Non-compliant.)</li> </ul> <p>Note: in the current implementation, Consul is being operated as a public service. Consul will be a subject of a future \"bootstrapping ADR\" due to its role in serivce location.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#user-managed-secrets","title":"User-managed secrets","text":"<p>User-managed secrets functionality is provided by <code>app-functions-sdk-go</code>.</p> <p>If security is enabled, secrets are retrieved from Vault. If security is disabled, secrets are retreived from the configuration provider. If the configuration provider is not available, secrets are read from the underlying <code>.toml</code>. It is taken as granted in this ADR that secrets originating in the configuration provider or from <code>.toml</code> configuration files are not secret. The fallback mechanism is provided as a convienience to the developer, who would otherwise have to litter their code with \"if (isSecurityEnabled())\" logic leading to implementation inconsistencies.</p> <p>The central database credential is supplied by <code>GetDatabaseCredentials()</code> and returns the database credential assigned to <code>app-service-configurable</code>. If security is enabled, database credentials are retreived using the standard flow. If security is disabled, secrets are retreived from the configuration provider from a special section called <code>[Writable.InsecureSecrets]</code>. If not found there, the configuration provider is searched for credentials stored in the legacy <code>[Databases.Primary]</code> section using the <code>Username</code> and <code>Password</code> keys.</p> <p>Each user application has its own exclusive-use area of the secret store that is accessed via <code>GetSecrets()</code>. If security is enabled, secret requests are passed along to <code>go-mod-secrets</code> using an application-specific access token. If security is disabled, secret requets are made to the configuration provider from the <code>[Writable.InsecureSecrets]</code> section. There is no fallback configuration location.</p> <p>As user-managed secrets have no framework support for initialization, a special <code>StoreSecrets()</code> method is made available to the application for the application to initialize its own secrets. This method is only available in security-enabled mode.</p> <p>No changes to user-managed secrets are being proposed in this ADR.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#decision","title":"Decision","text":""},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#creation-of-secrets","title":"Creation of secrets","text":"<p>Management of hardware-bound secrets is platform-specific and out-of-scope for the EdgeX framework. EdgeX open source will contain only the necessary hooks to integrate platform-specific functionality.</p> <p>For software-managed secrets, the system of reference of secrets in EdgeX is the EdgeX secret store. The EdgeX secret store provides for encryption of secrets at rest. This term means that if a secret is replicated, the EdgeX secret store is the authoritative source of truth of the secret. Whenever possible, the EdgeX secret store should also be the record of origin of a secret as well. This means creating secrets inside of the EdgeX secret store is preferable to importing an externally-created secret into the secret store. This can often be done for framework-managed secrets, but not possible for user-managed secrets.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#choosing-between-alternative-forms-of-secrets","title":"Choosing between alternative forms of secrets","text":"<p>When given a choice between plain-text secrets and cryptographic keys, cryptographic keys should be preferred.</p> <p>An example situation would be the introduction of an MQTT message broker. A broker may support both TLS client authentication as well as username/password authentication. In such a situation, TLS client authentication would be preferred:</p> <ul> <li>The cryptographic key is typically longer in bits than a plain-text secret.</li> <li>A plain-text secret will require transport encryption in order to protect confidentiality of the secret, such as server-side TLS.</li> <li>Use of TLS client authentication typically eliminates the need for additional assets on the server side (such as a password database) to authenticate the client, by relying on digital signature instead.</li> </ul> <p>TLS client authentication should not be used unless there is a capability to revoke a compromised certificate, such as by replacing the certificate authority, or providing a certificate revokation list to the server. If certificate revokation is not supported, plain-text secrets (such as username/password) should be used instead, as they are typically easier to revoke.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#distribution-and-consumption-of-secrets","title":"Distribution and consumption of secrets","text":""},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#prohibited-practices","title":"Prohibited practices","text":"<p>Use of hard-coded secrets is an instance of CWE-798: Use of hard-coded credentials and is not allowed. A hard-coded secret is a secret that is the same across multiple EdgeX instances. Hard-coded secrets make devices susceptible to BORE (break-once-run-everywhere) attacks, where collections of machines can compromised by a single replicated secret. Specific cases where this is likely to come up are:</p> <ul> <li>Secrets embedded in source control</li> </ul> <p>EdgeX is an open-source project.   Any secret that is present in an EdgeX repository is public to the world,   and therefore not a secret, by definition.   Configuration files, such as .toml files, .json files, .yaml files   (including <code>docker-compose.yml</code>) are specific instances of this practice.</p> <ul> <li>Secrets embedded in binaries</li> </ul> <p>Binaries are usually not protected against confidentiality threats,   and binaries can be easily reverse-engineered to find any secrets therein.   Binaries included compile executables as well as Docker images.</p>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#recommended-practices","title":"Recommended practices","text":"<ol> <li>Direct consumption from process-to-process interaction with secret store</li> </ol> <p>This approach is only possible for components that have native support for    Hashicorp Vault.    This includes any EdgeX service that links to go-mod-secrets.</p> <p>For example, if secretClient is an instance of the go-mod-secrets    secret store client:</p> <pre><code>secrets, err := secretClient.GetSecrets(\"myservice\", \"username\", \"password\")\n</code></pre> <p>The above code will retrieve the <code>username</code> and <code>password</code> properties    of the <code>myservice</code> secret.</p> <ol> <li>Dynamic injection of secret into process environment space</li> </ol> <p>Environment variables are part of a process' environment block    and are mapped into a process' memory.    In this scenario,    an intermediary makes a connection to the secret store to fetch a secret,    store it into an environment variable,    and then launches a target executable,    thereby passing the secret in-memory to the target process.</p> <p>Existing examples of this functionality include    vaultenv,    envconsul,    or env-aws-params.    These tools authenticate to a remote network service,    inject secrets into the process environment,    and then exec's a replacment process    that inherits the secret-enriched enviornment block.</p> <p>There are a few potential risks with this approach:</p> <ul> <li>Environment blocks are passed to child processes by default.</li> <li> <p>Environment-variable-sniffing malware (introduced by compromised 3rd party libaries) is a proven attack method.</p> </li> <li> <p>Dynamic injection of secret into container-scoped <code>tmpfs</code> volume</p> </li> </ul> <p>An example of this approach is consul-template.    This approach is useful when a secret is required to be in a configuration file    and cannot be passed via an environment variable    or directly consumed from a secret store.</p> <ol> <li>Distribution via SECRETSLOC</li> </ol> <p>This option is the most widely supported secret distribution mechanism by container orchestrators.</p> <p>EdgeX supports runtime environments such as standard Docker and snaps    that have no built-in secret management features.</p> <ul> <li> <p>Generic Docker does not have a built-in secrets mechanism.      Manual configuration of a SECRETSLOC should utilize either      a host file file system path or      a Docker volume.</p> </li> <li> <p>Snaps also do not have a built-in secrets mechanism.      The options for SECRETSLOC are limited      to designated snap-writable directories.</p> </li> </ul> <p>For comparison:</p> <ul> <li> <p>Docker Swarm:    Swarm swarm mode is not officially supported by the EdgeX project.    Docker Swarm secrets are shared via the <code>/run/secrets</code> volume,    which is a Linux <code>tmpfs</code> volume created on the host and shared with the container.    For an example of Docker Swarm secrets, see the    docker-compose secrets stanza.    Secrets distributed in this manner become part of the RaftDB,    and thus it becomes necessary to enable swarm autolock mode,    which prevents the Raft database encryption key    from being stored plaintext on disk.    Swarm secrets have an additional limitation in that they are not    mutable at runtime.</p> </li> <li> <p>Kubernetes:    Kubernetes is not officially supported by the EdgeX project.    Kubernetes also supports the secrets volume approach,    though the secrets volume can be mounted anywhere in the container namespace.    For an example of Kubernetes secrets volumes, see the    Kubernetes secrets documentation.    Secrets distributed in this manner become part of the <code>etcd</code> database,    and thus it becomes necessary to specify a    KMS provider for data encryption    to prevent <code>etcd</code> from storing plaintext versions of secrets.</p> </li> </ul>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#consequences","title":"Consequences","text":"<p>As the existing implementation is not fully-compliant with this ADR, significant scope will be added to current and future EdgeX releases in order to bring the project into compliance.</p> <p>List of needed improvements:</p> <ul> <li>PKI private keys</li> <li>All: Move to using Vault as system of origin for the PKI instead of the standalone <code>security-secrets-setup</code> utility.</li> <li>All: Cache the PKI for Consul and Vault on persistent disk; rotate occasionally.</li> <li> <p>All: Investigate hardware protection of cached Consul and Vault PKI secret keys.  (Vault cannot unseal its own TLS certificate.)</p> </li> <li> <p>Special case: Bring-your-own external Kong certificate and key</p> </li> <li> <p>The Kong external certificate and key is already stored in Vault,     however, additional metadata is needed     to signal whether these are auto-generated or manually-installed.     A manually-installed certificate and key     would not be overwritten by the framework bringup logic.     Installing a custom certificate and key can then be implemented by     overwriting the system-generated ones and setting a flag     indicating that they were manually-installed.</p> </li> <li> <p>Secret store master password</p> </li> <li> <p>All: Enable hooks for hardware protection of secret store master password.</p> </li> <li> <p>Secret store per-service authentication tokens</p> </li> <li> <p>No changes required.</p> </li> <li> <p>Postgres superuser password</p> </li> <li>Generate at install time or on cold start of the framework. </li> <li> <p>Cache in Vault and inject into Kong using environment variable injection.</p> </li> <li> <p>MongoDB service account passwords</p> </li> <li> <p>No changes required.</p> </li> <li> <p>Redis(v5) authentication password</p> </li> <li>All: Implement process-to-process injection: start Redis unauthenticated, with a post-start hook to read the secret out of Vault and set the Redis password. (Short race condition between Redis starting, password being set, and dependent services starting.)</li> <li> <p>No changes on client side.</p> </li> <li> <p>Redis(v6) passwords (v6 adds multiple user support)</p> </li> <li>Interim solution: handle like MongoDB service account passwords.     Future ADR to propose use of a Vault database secrets engine.</li> <li> <p>No changes on client side (each service accesses its own credential)</p> </li> <li> <p>Kong authentication tokens</p> </li> <li>All: Implement in-transit authentication with TLS-protected Postgres interface.     (Subject to change if it is decided not to enable a Postgres backend out of the box.)</li> <li>Additional research needed as PostgreSQL does not support transparent data encryption.</li> </ul>"},{"location":"design/adr/security/0008-Secret-Creation-and-Distribution/#references","title":"References","text":"<ul> <li>ADR for secret creation and distribution</li> <li>CWE-798: Use of hard-coded credentials</li> <li>Docker Swarm secrets</li> <li>EdgeX go-mod-secrets</li> <li>Hashicorp Vault</li> </ul>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/","title":"Secure Bootstrapping of EdgeX","text":"<ul> <li>Secure Bootstrapping of EdgeX</li> <li>Status</li> <li>Context<ul> <li>History</li> </ul> </li> <li>Decision<ul> <li>Stage-gate mechanism</li> <li>Docker-specific service changes</li> <li>\"As-is\" startup flow</li> <li>\"To-be\" startup flow</li> <li>New Bootstrap/RTR container</li> </ul> </li> <li>Consequences<ul> <li>Benefits</li> <li>Drawbacks</li> </ul> </li> <li>Alternatives<ul> <li>Event-driven vs commanded staging</li> <li>System management agent (SMA) as the coordinator</li> <li>Create a mega-install container</li> <li>Manual secret provisioning</li> </ul> </li> <li>References</li> </ul>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#status","title":"Status","text":"<p> Approved </p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#context","title":"Context","text":"<p>Docker-compose, the tool used by EdgeX to manage its Docker-based stack, lags in its support for initialization logic.</p> <p>Docker-compose v2.x used to have a <code>depends_on / condition</code> directive that would test a service's HEALTHCHECK and block startup until the service was \"healthy\". Unfortunately, this feature was removed in 3.x docker-compose. (This feature is also unsuppported in swarm mode as well.)</p> <p>Snaps have an explicit install phase and Kubernetes PODs have optional init containers. In other frameworks, initialization is allowed to run to completion prior to application components being started in production mode. This functionality does not exist in Docker nor docker-compose.</p> <p>The current lack of an initialization phase is a blocking issue for implementing microservice communication security, as critical EdgeX core components that are involved with microservice communication (specifically Consul) are being brought up in an insecure configuration. (Consul's insecure configuration is will be addressed in a separate ADR.)</p> <p>Activities that are best done in the initialization phase include the following:</p> <ul> <li>Bootstrapping of crytographic secrets needed by the application.</li> <li>Bootstrapping of database users and passwords.</li> <li>Installation of database schema needed for application logic to function.</li> <li>Initialization of authorization frameworks such as configuring RBAC or ACLs.</li> <li>Other one-time initialization activities.</li> </ul> <p>Workarounds when an installation phase is not present include:</p> <ul> <li>Perform initialization tasks manually,   and manually seed secrets into static configuration files.</li> <li>Ship with known hard-coded secrets in static configuration files.</li> <li>Start in an insecure configuration and remain that way.</li> <li>Provision some secrets at runtime.</li> </ul> <p>EdgeX does not have a manual installation flow, and uses a combination of the last three approaches.</p> <p>The objective of this ADR is to define a framework for Docker-based initialization logic in EdgeX. This will enable the removal of certain hard-coded secrets in EdgeX and enable certain components (such as Consul) to be started in a secure configuration. These improvement are necessary pre-requisites to implementing microservice communication security.</p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#history","title":"History","text":"<p>In previous releases, container startup sequencing has been primarily been driven by Consul service health checks backed healthcheck endpoints of particular services or by sentinel files placed in the file system when certain intialization milestones are reached.</p> <p>The implementation has been plagued by several issues:</p> <ul> <li> <p>Sentinel files are not cleaned up if the framework fails or is shut down.   Invalid state left over from previous instantiations of the framework   causes difficult-to-resolve race conditions.   (Implementation of this ADR will try to remove as many as possible,   focusing on those that are used to gate startup.   Some use of sentinel files may still be required to indicate   completion of initialization steps so that they are not re-done   if there is no API-based mechanism to determine if such   initialization has been completed.)</p> </li> <li> <p>Consul healh checks are reported in a difficult-to-parse   JSON structure, which has lead to the creation of specialized   tools that are insensitive to libc implementations   used by different container images.</p> </li> <li> <p>Consul is being used not only for service health, but for   service location and configuration as well.   The requirement to synchronize framework startup for   the purpose of securely initializing Consul means   that a non-Consul mechanism must be used   to stage-gate EdgeX initialization.</p> </li> </ul> <p>This last point is the primary motivator of this ADR.</p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#decision","title":"Decision","text":""},{"location":"design/adr/security/0009-Secure-Bootstrapping/#stage-gate-mechanism","title":"Stage-gate mechanism","text":"<p>The stage-gate mechanism must work in the following environments:</p> <ul> <li>docker-compose in Linux on a single node/system</li> <li>docker-compose in Microsoft Windows on a single node/system</li> <li>docker-compose in Apple MacOS on a single node/system</li> </ul> <p>Startup sequencing will be driven by two primary mechanisms:</p> <ol> <li> <p>Use of entrypoint scripts to:</p> </li> <li> <p>Block on stage-gate and service dependencies</p> </li> <li>Perform first-boot initialization phase activities as noted in Context</li> </ol> <p>The bootstrap container will inject entrypoint scripts into    the other containers in the case where EdgeX is directly consuming    an upstream container.  Docker will automatically retry    restarting containers if its entrypoint script is missing.</p> <ol> <li>Use of open TCP sockets as semaphores to gate startup sequencing</li> </ol> <p>Use of TCP sockets for startup sequencing is commonly used in Docker environments.    Due to its popularlity, there are several existing tools for this, including    wait-for-it,    dockerize, and    wait-for.    The TCP mechanism is portable across platforms    and will work in distributed multi-node scenarios.</p> <p>At least three new ports will be added to EdgeX for sequencing purposes:</p> <ul> <li><code>bootstrap</code> port. This port will be opened once first-time initialization has been completed.</li> <li><code>tokens_ready</code> port. This port signals that secret-store tokens have been provisioned and are valid.</li> <li><code>ready_to_run</code> port. This port will be opened once stateful services have completed initialization   and it is safe for the majority of EdgeX core services to start.</li> </ul> <p>The stateless EdgeX services should block on <code>ready_to_run</code> port.</p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#docker-specific-service-changes","title":"Docker-specific service changes","text":""},{"location":"design/adr/security/0009-Secure-Bootstrapping/#as-is-startup-flow","title":"\"As-is\" startup flow","text":"<p>The following diagram shows the \"as-is\" startup flow.</p> <p></p> <p>There are several components being removed via activity unrelated with this ADR. These proposed edits are shown to reduce clutter in the TO-BE diagram. * secrets-setup is being eliminated through a separate ADR to eliminate TLS for single-node usage. * kong-migrations is being combined with the kong service via an entrypoint script. * bootstrap-redis will be incorporated into the Redis entrypoint script to set the Redis password before Redis starts to fix the time delay before a Redis password is set.</p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#to-be-startup-flow","title":"\"To-be\" startup flow","text":"<p>The following diagram shows the \"to-be\" startup flow. Note that the bootstrap flows are always processed, but can be short-circuited.</p> <p></p> <p>Another difference to note in the \"to-be\" diagram is that the Vault depdendency on Consul is reversed in order to provide better security.</p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#new-bootstraprtr-container","title":"New Bootstrap/RTR container","text":"<p>The purpose of this new container is to:</p> <ul> <li>Inject entrypoint scripts into third-party containers   (such as Vault, Redis, Consul, PostgreSQL, Kong)   in order to perform first-time initialization and   wait on service dependencies</li> <li>Raise the <code>bootstrap</code> semaphore</li> <li>Wait on dependent semaphores required to raise the <code>ready_to_run</code> semaphore   (these are the stateful components such as databases,   and blocking waiting for sercret store tokens to be provisioned)</li> <li>Raise the <code>ready_to_run</code> semaphore</li> <li>Wait forever (in order to leave TCP sockets open)</li> </ul>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#consequences","title":"Consequences","text":""},{"location":"design/adr/security/0009-Secure-Bootstrapping/#benefits","title":"Benefits","text":"<p>This ADR is expected to yield the following benefits after completion of the related engineering tasks:</p> <ul> <li>Standardization of the stage-gate mechanism.</li> <li>Standardized approach to component initialization in Docker.</li> <li>Reduced fragility in the framework startup flow.</li> <li>Vault no longer uses Consul as its data store (uses file system instead).</li> <li>Ability to use a stock Consul container instead of creating a custom one for EdgeX</li> <li>Elimination of several sentinel files used for Consul health checks</li> <li>/tmp/edgex/secrets/ca/.security-secrets-setup.complete</li> <li>/tmp/edgex/secrets/edgex-consul/.secretstore-setup-done</li> </ul>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#drawbacks","title":"Drawbacks","text":"<ul> <li> <p>Introduction of a new container into the startup flow   (but other containers are eliminated or combined).</p> </li> <li> <p>Expanded scope and responsibility of entrypoint scripts,   which must not only block component startup,   but now must also configure a component for secure operation.</p> </li> </ul>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#alternatives","title":"Alternatives","text":""},{"location":"design/adr/security/0009-Secure-Bootstrapping/#event-driven-vs-commanded-staging","title":"Event-driven vs commanded staging","text":"<p>In this scenario, instead of a service waiting on a TCP-socket semaphore created by another service, services would open a socket and wait for a coordinator/controller to issue a \"go\" command.</p> <p>This solution was not chosen for several reasons:</p> <ol> <li>The code required to open a socket and wait for a command    is much more complicated than the code required to check for an open socket.    Many open source utilities exist to block on a socket opening;    there are no such examples for the reverse.</li> <li>This solution would would duplicate the information regarding    which services need to run: once in the docker-compose file,    and once as a configuration file to the coordinator/controller.</li> </ol>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#system-management-agent-sma-as-the-coordinator","title":"System management agent (SMA) as the coordinator","text":"<p>In this scenario, the system management agent is responsbile bringing up the EdgeX framework. Since the system management agent has access to the Docker socket, it has the ability to start services in a prescribed order, and as a management agent, has knowledge about the desired state of the framework.</p> <p>This solution was not chosen for several reasons:</p> <ol> <li>SMA is an optional EdgeX component--use in this way would make SMA a required core component.</li> <li>SMA, in order to authenticate an authorize remote management requests,    requires access to persistent state and secrets.    To make the same component responsible for initializing that state and secrets    upon which it depends would make the design convoluted.</li> </ol>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#create-a-mega-install-container","title":"Create a mega-install container","text":"<p>This alternative would create a mega-install container that has locally installed verions of critical components needed for bootstrapping such as Vault, Consul, PostgreSQL, and others.</p> <p>A sequential script would start each component in turn, intiailizing each to run in a secure configuration, and then shut them all down again.</p> <p>The same stage-gate mechanism would be used to block startup of these same components, but Docker would start them in production configuration.</p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#manual-secret-provisioning","title":"Manual secret provisioning","text":"<p>A typical cloud-based microservice architecture typically has a manual provisioning step. This step would include activities such as configuring Vault, installing a database schema, setting up database service account passwords, and seeding initial secrets such as PKI private keys that have been generated offline (possibly requiring several days of lead time). A cloud team may have weeks or months to prepare for this event, and it might take the greater part of a day.</p> <p>In contrast, EdgeX up to this point has been a \"turnkey\" middleware framework: it can be deployed with the same ease as an application, such as via a docker-compose file, or via a snap install. This means that most of the secret provisioning must be automated and the provisioning logic must be built into the framework in some way. The proposals presented in this ADR are compatibile with continuance of this functionality.</p>"},{"location":"design/adr/security/0009-Secure-Bootstrapping/#references","title":"References","text":"<ul> <li>ADR 0008 - Creation and Distribution of Secrets</li> <li>ADR 0015 - Encryption between microservices,</li> <li>Hashicorp Consul</li> <li>Hashicorp Vault</li> <li>Issue: ADR for securing access to Consul</li> <li>Issue: Service registry ADR</li> </ul>"},{"location":"design/adr/security/0015-in-cluster-tls/","title":"Use of encryption to secure in-cluster EdgeX communications","text":""},{"location":"design/adr/security/0015-in-cluster-tls/#status","title":"Status","text":"<p> Approved </p>"},{"location":"design/adr/security/0015-in-cluster-tls/#context","title":"Context","text":"<p>This ADR seeks to define the EdgeX direction on using encryption to secure \"in-cluster\" EdgeX communications, that is, internal microservice-to-microservice communication.</p> <p>This ADR will seek to clarify the EdgeX direction in several aspects with regard to:</p> <ul> <li>EdgeX services communicating within a single host</li> <li>EdgeX services communicating across multiple hosts</li> <li>Using encryption for confidentiality or integrity in communication</li> <li>Using encryption for authentication between microservices</li> </ul> <p>This ADR will be used to triage EdgeX feature requests in this space.</p>"},{"location":"design/adr/security/0015-in-cluster-tls/#background","title":"Background","text":""},{"location":"design/adr/security/0015-in-cluster-tls/#why-encrypt","title":"Why encrypt?","text":"<p>Why consider encryption in the first place? Simple. Encryption helps with the following problems:</p> <ul> <li> <p>Client authentication of servers.   The client knows that it is talking to the correct server.   This is typically achieved using TLS server certificates   that the client checks against a trusted root certificate authority.   Since the client is not in charge of network routing,   TLS server authentication provides a good assurance   that the requests are being routed to the correct server.</p> </li> <li> <p>Server authentication of clients.   The server knows the identity of the client that has connected to it.   There are a variety of mechanims to achieve this,   such as usernames and passwords, tokens, claims, et cetera,   but the mechanism under consideration by this ADR   is TLS client authentication   using TLS client certificates.</p> </li> <li> <p>Confidentiality of messages exchanged between services.   Confidentiality is needed to protect authentication data   flowing between communicating microservices as well as   to protect the message payloads if they contain nonpublic data.   TLS provides communication channel confidentiality.</p> </li> <li> <p>Integrity of messages exchanged between services.   Integrity is needed to ensure that messages between   communicating microservices are not maliciously altered,   such as inserting or deleting data in the middle of the exchange.   TLS provides communication channel integrity.</p> </li> </ul> <p>A microservice architecture normally strives for all of the above protections.</p> <p>Besides TLS, there are other mechanisms that can be used to provide some of the above properties. For example, IPSec tunnels provide confidentity, integrity, and authentication of the hosts (network-level protection). SSH tunnels provide confidentiality, integrity, and authentication of the tunnel endpoints (also network-level protection). TLS, however, is preferred, because it operates in-process at the application level and provides better point-to-point security.</p>"},{"location":"design/adr/security/0015-in-cluster-tls/#why-to-not-encrypt","title":"Why to not encrypt?","text":"<p>In the case of TLS communications, microservices depend on an asymmetric private key to prove their identity. To be of value, this private key must be kept secret. Applications typically depend on process-level isolation and/or file system protections for the private key. Moreover, interprocess communication using sockets is mediated by the operating system kernel. An attacker running at the privilege of the operating system has the ability to compromise TLS protections, such as by substituting a private key or certificate authority of their choice, accessing the unencrypted data in process memory, or intercepting the network communications that flow through the kernel. Therefore, within a single host, TLS protections may slow down an attacker, but are not likely to stop them. Additionally, use of TLS requires management of additional security assets in the form of TLS private keys.</p> <p>Microservice communcation across hosts, however, is vulnerable to intereception, and must be protected via some mechanism such as, but not limited to: IPSec or SSH tunnels, encrypted overlay networks, service mesh middlewares, or application-level TLS.</p> <p>Another reason to not encrypt is that TLS adds overhead to microservice communication in the form of additional network around-trips when opening connections and performing cryptographic public key and symmetric key operations.</p>"},{"location":"design/adr/security/0015-in-cluster-tls/#decision","title":"Decision","text":"<p>At this time, EdgeX is primarily a single-node IoT application framework. Should this position change, this ADR should be revisited. Based on the single-node assumption:</p> <ul> <li>TLS will not be used for confidentiality and integrity of internal on-host microservice communication.</li> <li>TLS will be avoided as an authentication mechanism of peer microservices.</li> <li>Integrity and confidentiality of microservice communcations crossing host boundaries is required to secure EdgeX, but are an EdgeX customer responsibility.</li> <li>EdgeX customers are welcome to add extra security to their own EdgeX deployments.</li> </ul>"},{"location":"design/adr/security/0015-in-cluster-tls/#consequences","title":"Consequences","text":"<p>This ADR if approved would close the following issues as will-not-fix.</p> <ul> <li>https://github.com/edgexfoundry/edgex-go/issues/1942</li> <li>https://github.com/edgexfoundry/edgex-go/issues/1941</li> <li>https://github.com/edgexfoundry/edgex-go/issues/2454</li> <li>https://github.com/edgexfoundry/developer-scripts/issues/240</li> <li>https://github.com/edgexfoundry/edgex-go/issues/2495</li> </ul> <p>It would also close https://github.com/edgexfoundry/edgex-go/issues/1925 as there is no current need for TLS as a mutual authentication strategy.</p>"},{"location":"design/adr/security/0015-in-cluster-tls/#alternatives","title":"Alternatives","text":""},{"location":"design/adr/security/0015-in-cluster-tls/#encrypted-overlay-networks","title":"Encrypted overlay networks","text":"<p>Encrypted overlay networks provide varying protection based on the product used. Some can only encrypt data, such as an IPsec tunnel. Some can encrypt and provide for network microsegmentation, such as Docker Swarm networks with encryption enabled. Some can encrypt and enforce network policy such as restrictions on ingress traffic or restrictions on egress traffic.</p>"},{"location":"design/adr/security/0015-in-cluster-tls/#service-mesh-middleware","title":"Service mesh middleware","text":"<p>Service mesh middleware is an alternative that should be investigated if EdgeX decides to fully support a Kubernetes-based deployment using distributed Kubernetes pods.</p> <p>A service mesh typically achieves most of the security objectives of security microservice commuication by intercepting microservice communications and imposing a configuration-driven policy that typically includes confidentiality and integrity protection.</p> <p>These middlewares typically rely on the Kubernetes pod construct and are difficult to support for non-Kubernetes deployments.</p>"},{"location":"design/adr/security/0015-in-cluster-tls/#edgex-public-key-infrastructure","title":"EdgeX public key infrastructure","text":"<p>An EdgeX public key infrastructure that is natively supported by the architecture should be considered if EdgeX decides to support an out-of-box distributed deployment on non-Kubernetes platforms.</p> <p>Native support of TLS requires a significant amount of glue logic, and exceeds the availble resources in the security working group to implement this strategy. The following text outlines a proposed strategy for supporting native TLS in the EdgeX framework:</p> <p>EdgeX will use Hashicorp Vault to secure the EdgeX PKI, through the use of the Vault PKI secrets engine. Vault will be configured with a root CA at initialization time, and a Vault-based sub-CA for dynamic generation of TLS leaf certificates. The root CA will be restricted to be used only by the Vault root token.</p> <p>EdgeX microservices that are based on third-party containers require special support unless they can talk natively to Vault for their secrets. Certain tools, such as those mentioned in the \"Creation and Distribution of Secrets\" ADR (<code>envconsul</code>, <code>consul-template</code>, and others) can be used to facilitiate third-party container integration. These services are:</p> <ul> <li> <p>Consul: Requires TLS certificate set by configuration file or command line, with a TLS certificate injected into the container.</p> </li> <li> <p>Vault: As Vault's database is encrypted, Vault cannot natively bootstrap its own TLS certificate.  Requires TLS certificate to be injected into container and its location set in a configuration file.</p> </li> <li> <p>PostgreSQL: Requires TLS certificate to be injected into '$PGDATA' (default: <code>/var/lib/postgresql/data</code>) which is where the writable database files are kept.</p> </li> <li> <p>Kong (admin): Requires environment variable to be set to secure admin port with TLS, with a TLS certificates injected into the container.</p> </li> <li> <p>Kong (external): Requires a bring-your-own (BYO) external certificate, or as a fallback, a default one should be generated using a configurable external hostname.  (The Kong ACME plugin could possibly be used to automate this process.)</p> </li> <li> <p>Redis (v6): Requires TLS certificate set by configuration file or command line, with a TLS certificate injected into the container.</p> </li> <li> <p>Mosquitto: Requires TLS certificate set by configuration file, with a TLS certificate injected into the container.</p> </li> </ul> <p>Additionally, every EdgeX microservice consumer will require access to the root CA for certificate verification purposes, and every EdgeX microservice server will need a TLS leaf certificate and private key.</p> <p>Note that Vault bootstrapping its own PKI is tricky and not natively supported by Vault. Expect that a non-trivial amount of effort will need to be put into starting Vault in non-secure mode to create the CA hierarchy and a TLS certificate for Vault itself, and then restarting Vault in a TLS-enabled configuration. Periodic certificate rotation is a non-trivial challenge as well.</p> <p>The Vault bootstrapping flow would look something like this:</p> <ol> <li>Bring up vault on localhost with TLS disabled (bootstrapping configuration)</li> <li>Initialize a blank Vault and immediately unseal it</li> <li>Encrypt the Vault keyshares and revoke the root token</li> <li>Generate a new root from the keyshares</li> <li>Generate an on-device root CA (see https://learn.hashicorp.com/vault/secrets-management/sm-pki-engine)</li> <li>Create an intermediate CA for TLS server authentication</li> <li>Sign the intermediate CA using the root CA</li> <li>Configure policy for intermediate CA</li> <li>Generate and store leaf certificates for    Consul,    Vault,    PostgreSQL,    Kong (admin),    Kong (external),    Redis (v6),    Mosquitto</li> <li>Deploy the PKI to the respective services' secrets area</li> <li>Write the production Vault configuration (TLS-enabled) to a Docker volume</li> </ol> <p>There are no current plans for mutual auth TLS. Supporting mutual auth TLS would require creation of a separate PKI hierarchy for generation of TLS client certificates and glue logic to persist the certificates in the service's key-value secret store and provide them when connecting to other EdgeX services.</p>"},{"location":"design/adr/security/0016-docker-image-guidelines/","title":"Docker image guidelines","text":""},{"location":"design/adr/security/0016-docker-image-guidelines/#status","title":"Status","text":"<p>Approved</p>"},{"location":"design/adr/security/0016-docker-image-guidelines/#context","title":"Context","text":"<p>When deploying the EdgeX Docker containers some security measures are recommended to ensure the integrity of the software stack.</p>"},{"location":"design/adr/security/0016-docker-image-guidelines/#decision","title":"Decision","text":"<p>When deploying Docker images, the following flags should be set for heightened security.</p> <ul> <li>To avoid escalation of privileges each docker container should use the <code>no-new-privileges</code> option in their Docker compose file (example below). More details about this flag can be found here. This follows Rule #4 for Docker security found here.</li> </ul> <pre><code>security_opt:\n      - \"no-new-privileges:true\"\n</code></pre> <p>NOTE: Alternatively an AppArmor security profile can be used to isolate the docker container. More details about apparmor profiles can be found here <pre><code>security_opt:  [ \"apparmor:unconfined\" ]\n</code></pre></p> <ul> <li>To further prevent privilege escalation attacks the user should be set for the docker container using the <code>--user=&lt;userid&gt;</code> or <code>-u=&lt;userid&gt;</code> option in their Docker compose file (example below). More details about this flag can be found here. This follows Rule #2 for Docker security found here.</li> </ul> <pre><code>services:\n  device-virtual:\n    image: ${REPOSITORY}/docker-device-virtual-go${ARCH}:${DEVICE_VIRTUAL_VERSION}\nuser: $CONTAINER-PORT:$CONTAINER-PORT # user option using an unprivileged user\n    ports:\n    - \"127.0.0.1:49990:49990\"\ncontainer_name: edgex-device-virtual\n    hostname: edgex-device-virtual\n    networks:\n      - edgex-network\n    env_file:\n      - common.env\n    environment:\n      SERVICE_HOST: edgex-device-virtual\n    depends_on:\n      - consul\n      - data\n      - metadata\n</code></pre> <p>NOTE: exception     Sometimes containers will require root access to perform their fuctions. For example the System Management Agent requires root access to control other Docker containers. In this case you would allow it run as default root user.</p> <ul> <li>To avoid a faulty or compromised containers from consuming excess amounts of the host of its resources <code>resource limits</code> should be set for each container. More details about <code>resource limits</code> can be found here. This follows Rule #7 for Docker security found here.</li> </ul> <pre><code>services:\n  device-virtual:\n    image: ${REPOSITORY}/docker-device-virtual-go${ARCH}:${DEVICE_VIRTUAL_VERSION}\nuser: 4000:4000 # user option using an unprivileged user\n    ports:\n    - \"127.0.0.1:49990:49990\"\ncontainer_name: edgex-device-virtual\n    hostname: edgex-device-virtual\n    networks:\n      - edgex-network\n    env_file:\n      - common.env\n    environment:\n      SERVICE_HOST: edgex-device-virtual\n    depends_on:\n      - consul\n      - data\n      - metadata\n    deploy:  # Deployment resource limits\n      resources:\n        limits:\n          cpus: '0.001'\nmemory: 50M\n        reservations:\n          cpus: '0.0001'\nmemory: 20M\n</code></pre> <ul> <li>To avoid attackers from writing data to the containers and modifying their files the <code>--read_only</code> flag should be set. More details about this flag can be found here. This follows Rule #8 for Docker security found here.</li> </ul> <pre><code>  device-rest:\n    image: ${REPOSITORY}/docker-device-rest-go${ARCH}:${DEVICE_REST_VERSION}\nports:\n      - \"127.0.0.1:49986:49986\"\ncontainer_name: edgex-device-rest\n    hostname: edgex-device-rest\n    read_only: true # read_only option\n    networks:\n      - edgex-network\n    env_file:\n      - common.env\n    environment:\n      SERVICE_HOST: edgex-device-rest\n    depends_on:\n      - data\n      - command\n</code></pre> <p>NOTE: exception     If a container is required to have write permission to function, then this flag will not work. For example, the vault needs to run setcap in order to lock pages in memory. In this case the <code>--read_only</code> flag will not be used.</p> <p>NOTE: Volumes     If writing persistent data is required then a volume can be used. A volume can be attached to the container in the following way</p> <pre><code>  device-rest:\n    image: ${REPOSITORY}/docker-device-rest-go${ARCH}:${DEVICE_REST_VERSION}\nports:\n      - \"127.0.0.1:49986:49986\"\ncontainer_name: edgex-device-rest\n    hostname: edgex-device-rest\n    read_only: true # read_only option\n    networks:\n      - edgex-network\n    env_file:\n      - common.env\n    environment:\n      SERVICE_HOST: edgex-device-rest\n    depends_on:\n      - data\n      - command\n    volumes:\n      - consul-config:/consul/config:z\n</code></pre> <p>NOTE: alternatives     If writing non-persistent data is required (ex. a config file) then a temporary filesystem mount can be used to accomplish this goal while still enforcing <code>--read_only</code>. Mounting a <code>tmpfs</code> in Docker gives the container a temporary location in the host systems memory to modify files. This location will be removed once the container is stopped. More details about <code>tmpfs</code> can be found here</p> <p>for additional docker security rules and guidelines please check the Docker security cheatsheet</p>"},{"location":"design/adr/security/0016-docker-image-guidelines/#consequences","title":"Consequences","text":"<p>Create a more secure Docker environment</p>"},{"location":"design/adr/security/0016-docker-image-guidelines/#references","title":"References","text":"<ul> <li>Docker-compose reference https://docs.docker.com/compose/compose-file</li> <li>OWASP Docker Recommendations https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html</li> <li>CIS Docker Benchmark https://workbench.cisecurity.org/files/2433/download/2786 (registration required)</li> </ul>"},{"location":"design/adr/security/0017-consul-security/","title":"Securing access to Consul","text":""},{"location":"design/adr/security/0017-consul-security/#status","title":"Status","text":"<p> Approved </p>"},{"location":"design/adr/security/0017-consul-security/#context","title":"Context","text":"<p>This ADR defines the motiviation and approach used to secure access to the Consul component in the EdgeX architecture for security-enabled configurations only. Non-secure configuations continue to use Consul in anonymous read-write mode. As this Consul security feature requires Vault to function, if <code>EDGEX_SECURITY_SECRET_STORE=false</code> and Vault is not present, the legacy behavior (unauthenticated Consul access) will be preserved.</p> <p>Consul provides several services for the EdgeX architecture:</p> <ul> <li>Service registry (see ADR in references below)</li> <li>Service health monitoring</li> <li>Mutable configuration data</li> </ul> <p>Use of the services provided by Consul is optional on a service-by-service basis. Use of the registry is controlled by the <code>-r</code> or <code>--registry</code> flag provided to an EdgeX service. Use of mutable configuration data is controlled by the <code>-cp</code> or <code>--configProvider</code> flag provided to an EdgeX service. When Consul is enabled as a configuration provider, the <code>configuration.toml</code> is parsed into individual settings and seeded into the Consul key-value store on the first start of a service. Configuration reads and writes are then done to Consul if it is specified as the configuration provider, otherwise the static <code>configuration.toml</code> is used. Writes to the <code>[Writable]</code> section in Consul trigger per-service callbacks notifying the application of the changed data. Updates to non-<code>[Writable]</code> sections are parsed only once at startup and require a service restart to take effect.</p> <p>Since configuration data can affect the runtime behavior of services, compensating controls must be introduced in order to mitigate the risks introduced by moving configuration from a static file into to an HTTP-accessible service with mutable state.</p> <p>The current practice is that Consul is exposed via unencrypted HTTP in anonymous read/write mode to all processes and EdgeX services running on the host machine.</p>"},{"location":"design/adr/security/0017-consul-security/#decision","title":"Decision","text":"<p>Consul will be configured with access control list (ACL) functionality enabled, and each EdgeX service will utilize a Consul access token to authenticate to Consul. Consul access tokens will be requested from the Vault Consul secrets engine (to avoid introducing additional bootstrapping secrets).</p> <p>DNS will be disabled via configuration as it is not used in EdgeX.</p> <p>Consul Access Via API Gateway</p> <p>In security enabled EdgeX, the API gateway will be configured to proxy the Consul service over the <code>/consul</code> path, using the <code>request-transformer</code> plugin to add the global management token to incoming requests via the <code>X-Consul-Token</code> HTTP header. Thus, ability to access remote APIs also grants the ability to modify Consul's key-value store. At this time, service access via API gateway is all-or-nothing, but this does not preclude future fine-grained authorization at the API gateway layer to specific microservices, including Consul.</p> <p>Proxying of the Consul UI is problematic and there is no current solution, which would involve proper balacing of the externally-visible URL, the path-stripping effect (or not) of the proxy, Consul's <code>ui_content_path</code>, and UI authentication (the <code>request-transfomer</code> does not work on the UI).</p>"},{"location":"design/adr/security/0017-consul-security/#consequences","title":"Consequences","text":"<p>Full implementation of this ADR will deny Consul access to all existing Consul clients. To limit the impacts of the change, deployment will take place in phases. Phase 1 is basic plumbing work and leaves Consul configured in a permissive mode and thus is not a breaking change. Phase 2 will affect the APIs of Go modules and will change the default policy to \"deny\", both of which are breaking changes. Phase 3 is a refinement of access control; presuming the existing services are \"well-behaved\", that is, they do not access configuration of other services, Phase 3 will not introduce any breaking changes on top of the Phase 2 breaking changes.</p>"},{"location":"design/adr/security/0017-consul-security/#phase-1-completed-in-ireland-release","title":"Phase 1 (completed in Ireland release)","text":"<ul> <li>Vault bootstrapper will install Vault Consul secrets engine.</li> <li>Secretstore-setup will create a Vault token for consul secrets engine configuration.</li> <li>Consul will be started with Consul ACLs enabled with persistent agent tokens and a default \"allow\" policy.</li> <li>Consul bootstrapper will create a bootstrap management token   and use the provided Vault token to (re)configure the Consul secrets engine in Vault.</li> <li>Do to a quirk in Consul's ACL behavior   that inverts the meaning of an ACL in default-allow mode,   in phase 1 the Consul bootstrapper will create an agent token   with the global-management policy and install it into the agent.   During phase 2, it will be changed to a specific, limited, policy.   (This change should not be visible to Consul API clients.)</li> <li>The bootstrap management token will also be stored persistently   to be used by the API gateway for proxy authentication,   and will also be needed for local access to Consul's web user interface.</li> <li>(Docker-only) Open a port to signal that Consul bootstrapping is completed.   (Integrate with <code>ready_to_run</code> signal.)</li> </ul>"},{"location":"design/adr/security/0017-consul-security/#phase-2-completed-in-ireland-release","title":"Phase 2 (completed in Ireland release)","text":"<ul> <li>Consul bootstrapper will install a role in Vault that creates global-management tokens in Consul with no TTL.</li> <li>Registry and configuration client libraries will be modified to accept a Consul access token.</li> <li>go-mod-bootstrap will have contain the necessary glue logic to   request a service-specifc Consul access token from Vault   every time the service is started.</li> <li>Consul configuration will be changed to a default \"deny\" policy   once all services have been changed to authenticated access mode.</li> <li>The agent tokens' policy will be changed to a specific agent policy   instead of the global-management policy.</li> </ul>"},{"location":"design/adr/security/0017-consul-security/#phase-3-for-jakarta-release","title":"Phase 3 (for Jakarta release)","text":"<ul> <li>Introduce per-service roles and ACL policies that give each service   access to its own subset of the Consul key-value store   and to register in the service registry.</li> <li>Consul access tokens will be scoped to the needs of the particular service   (ability to update that service's registry data, an access that services's KV store).</li> <li>Create a separate management token (non-bootstrap) for API gateway proxy authentication   and Consul UI access that is different from boostrap management token stored in Vault.   This token will need to be requested outside of Vault in order for it to be non-expiring.</li> <li>Glue logic will ensure that expired Consul tokens are replaced with fresh ones   (token freshness can be pre-checked by a request made to <code>/acl/token/self</code>).</li> </ul>"},{"location":"design/adr/security/0017-consul-security/#unintended-consequences-and-mitigation-for-jakarta-stabilization-release","title":"Unintended consequences and mitigation (for Jakarta stabilization release)","text":"<ul> <li>Consul token lifetime will be tied to the Vault token lifetime.   Vault deliberately revokes any Consul tokens that it issues   in order to ensure that they don't outlive the parent token's lifetime.   If Consul is not fully initialized when token revokation is attempted,   Vault will be unable to revoke these tokens.</li> </ul> <p>Migtigations:</p> <ul> <li>Consul will be started concurrently with Vault to give time for Consul to fully initialize.</li> <li>secretstore-setup will delay starting until Consul has completed leader election.</li> <li>secretstore-setup will be modified to less aggressively revoke tokens.     Alternatives include     revoke-and-orphan     which should leave the Consul tokens intact if the secret store is restarted     but may leave garbage tokens in the Consul database, or     tidy-tokens     which cleans up invalid entries in the token database, or     simply leave Vault to its own devices and let Vault clean itself up.     Testing will be performed and an appropriate mechanism selected.</li> </ul>"},{"location":"design/adr/security/0017-consul-security/#references","title":"References","text":"<ul> <li>ADR for secret creation and distribution</li> <li>ADR for secure bootstrapping</li> <li>ADR for service registry</li> <li>Hashicorp Vault</li> </ul>"},{"location":"design/adr/security/0020-spiffe/","title":"Use SPIFFE/SPIRE for On-demand Secret Store Token Generation","text":""},{"location":"design/adr/security/0020-spiffe/#status","title":"Status","text":"<p> Approved  via TSC vote on 2021-12-14</p>"},{"location":"design/adr/security/0020-spiffe/#context","title":"Context","text":"<p>In security-enabled EdgeX, there is a component called <code>security-secretstore-setup</code> that seeds authentication tokens for Hashicorp Vault--EdgeX's secret store--into directories reserved for each EdgeX microservice. The implementation is provided by a sub-component, <code>security-file-token-provider</code>, that works off of a static configuration file (<code>token-config.json</code>) that configures known EdgeX services, and an environment variable that lists additional services that require tokens. The token provider creates a unique token for each service and attaches a custom policy to each token that limits token access in a manner that paritions the secret store's namespace.</p> <p>The current solution has some problematic aspects:</p> <ul> <li> <p>These tokens have an initial TTL of one hour (1h)   and become invalid if not used and renewed within that time period.   It is not possible to delay the start of EdgeX services until a later time   (that is, greater than the default token TTL),   as they will not be able to connect to the EdgeX secret store   to obtain required secrets.</p> </li> <li> <p>Transmission of the authentication token requires one or more shared file systems   between the service and <code>security-secretstore-setup</code>.   In the Docker implementation,   this shared file system is constructed by bind-mounting a host-based directory   to multiple containers.   The snap implementation is similar, utilizing a content-interface between snaps.   In a Kubernetes implementation limited to a single worker node,   a CSI storage driver that provided RWO volumes would suffice.</p> </li> <li> <p>The current approach cannot support distributed services   without an underlying distributed file system to distribute tokens,   such as GlusterFS, running across the participating nodes.   For Kubernetes, the requirement would be a remote shared file system   persistent volume (RWX volume).</p> </li> </ul>"},{"location":"design/adr/security/0020-spiffe/#decision","title":"Decision","text":"<p>EdgeX will create a new service, <code>security-spiffe-token-provider</code>. This service will be a mutual-auth TLS service that exchanges a SPIFFE X.509 SVID for a secret store token.</p> <p>An SPIFFE identifier is a URI of the format <code>spiffe://trust domain/workload identifier</code>. For example: <code>spiffe://edgexfoundry.org/service/core-data</code>. A SPIFFE Verifiable Identity Document (SVID) is a cryptographically-signed version of a SPIFFE ID, typically a X.509 certificate with the SPIFFE ID encoded into the <code>subjectAltName</code> certificate extension, or a JSON web token (encoded into the <code>sub</code> claim). The EdgeX implementation will use a naming convention on the path component, such as the above, in order to be able to extract the requesting service from the SPIFFE ID.</p> <p>The SPIFFE token provider will take three parameters:</p> <ol> <li> <p>An X.509 SVID used in mutual-auth TLS for the token provider    and the service to cross-authenticate.</p> </li> <li> <p>The reqested service key.  If blank, the service key will    default to the service name encoded in the SVID.    If the service name follows the pattern <code>device-(name)</code>,    then the service key must follow the format    <code>device-(name)</code> or <code>device-name-*</code>.    If the service name is <code>app-service-configurable</code>,    then the service key must follow the format <code>app-*</code>.    (This is an accomodation for the Unix workload attester    not being able to distingish workloads that are launched    using the same executable binary.    Custom app services that support multiple instances    won't be supported unless they name the executable    the same as the standard app service binary or    modify this logic.)</p> </li> <li> <p>A list of \"known secret\" identifiers that will allow    new services to request database passwords or    other \"known secrets\" to be seeded into their service's    partition in the secret store.</p> </li> </ol> <p>The <code>go-mod-secrets</code> module will be modified to enable a new mode whereby a secret store token is obtained by:</p> <ol> <li> <p>Obtaining an X.509 SVID by contacting a local SPIFFE agent's    workload API on a local Unix domain socket.</p> </li> <li> <p>Connecting to the <code>security-spiffe-token-provider</code> service    using the X.509 SVID to request a secret store token.</p> </li> </ol> <p>The SPIFFE authentication mode will be an opt-in feature.</p> <p>The SPIFFE implementation will be user-replaceable; specifically, the workload API socket will be configurable, as well as the parsing of the SPIFFE ID. Reasons for doing so might include: changing the name of the trust domain in the SPIFFE ID, or moving the SPIFFE server out of the edge.</p> <p>This feature is estimated to be a \"large\" or \"extra large\" effort that could be implemented in a single release cycle.</p>"},{"location":"design/adr/security/0020-spiffe/#technical-architecture","title":"Technical Architecture","text":"<p>The work flow is as follows:</p> <ol> <li>Create a root CA for the SPIFFE user to use for creation of sub-CA's.</li> <li>The SPIFFE server is started.</li> <li>The server creates a sub-CA for issuing new identities.</li> <li>The trust bundle (certificate authority) data is exported from the SPIFFE server    and stored on a shared volume readable by other EdgeX microservices    (i.e. the existing secrets volume used for sharing secret store tokens).</li> <li>A join token for the SPIFFE agent is created using <code>token generate</code>    and shared to the EdgeX secrets volume.</li> <li>Workload entries are loaded into the SPIFFE server database,    using the join-identity of the agent created in the previous step    as the parent ID of the workload.</li> <li>The SPIFFE agent is started with the join token    created in a previous step to add it to the cluster.</li> <li>Vault is started and <code>security-secret-store-setup</code>    initializes it and creates an admin token for <code>security-spiffe-token-provider</code> to use.</li> <li>The <code>security-spiffe-token-provider</code> service is started.    It obtains an SVID from the SIFFE agent and uses it as a TLS server certificate.</li> <li>An EdgeX microservice starts and obtains another SVID from the SPIFFE agent    and uses it as a TLS client certificate to contact the    <code>security-spiffe-token-provider</code> service.    The EdgeX microservice uses the trust bundle as a server CA    to verify the TLS certificate of the remote service.</li> <li><code>security-spiffe-token-provider</code> verifies the SVID using the trust bundle as client CA    to verify the client,    extracts the service key,    and issues an appropriate Vault service token.</li> <li>The EdgeX microservice accesses Vault as usual.</li> </ol>"},{"location":"design/adr/security/0020-spiffe/#workload-registration-and-agent-sockets","title":"Workload Registration and Agent Sockets","text":"<p>The server uses a workload registration Unix domain socket that allows authorization entries to be added to the authorization database. This socket is protected by Unix file system permissions to control who is allowed to add entries to the database.</p> <p>In this proposal, a subcommand will be added to the EdgeX <code>secrets-config</code> utility to simplify the process of registering new services that uses the registration socket above.</p> <p>The agent uses a workload attesation Unix domain socket that is open to the world.  This socket is shared via a snap content-interface of via a shared host bind mount for Docker.  There is one agent per node.</p>"},{"location":"design/adr/security/0020-spiffe/#trust-bundle","title":"Trust Bundle","text":"<p>SVID's must be traceable back to a known issuing authority (certificate authority) to determine their validity.</p> <p>In the proposed implementation, we will generate a CA on first boot and store it persistently. This root CA will be distributed as the trust bundle. The SPIFFE server will then generate a rotating sub-CA for issuing SVIDs, and the issued SVID will include both the leaf certificate and the intermediate certificate.</p> <p>This implementation differs from the default implementation, which uses a transient CA that is rotated periodically and that keeps a log of past CA's. The default implementation is not suitable because only the Kubernetes reference implementation of the SPIRE server has a notification hook that is invoked when the CA is rotated. CA rotation would just result in issuing of SVIDs that are not trusted by microservices that received only the initial CA.</p> <p>The SPIFFE implementation is replaceable. The user is free to replace this default implementation with potentally a cloud-based SPIFFE server and a cloud-based CA.</p>"},{"location":"design/adr/security/0020-spiffe/#workload-authorization","title":"Workload Authorization","text":"<p>Workloads are authenticated by connecting to the <code>spiffe-agent</code> via a Unix domain socket, which is capable of identifying the process ID of the remote client. The process ID is fed into one of following workload attesters, which gather additional metadata about the caller:</p> <ul> <li>The Unix workload attester gathers UID, GID, path, and SHA-256 hash of the executable.   The Unix workload attester would be used native services and snaps.</li> <li>The Docker workload attester gathers container labels   that are added by docker-compose when the container is launched.   The Docker workload attester would be used for Docker-based EdgeX deployments.   An example label is <code>docker:label:com.docker.compose.service:edgex-core-data</code>   where the service label is the key value in the <code>services</code> section of the <code>docker-compose.yml</code>.   It is also possible to refer to labels built-in to the container image.</li> <li>The Kubernetes workload attester gathers a wealth of pod and container metadata.</li> </ul> <p>Once authenticated, the metadata is sent to the SPIFFE server to authorize the workload.</p> <p>Workloads are authorized via an authorization database connected to the SPIFFE server. Supported databases are SQLite (default), PostgreSQL, and MySQL. Due to startup ordering issues, SQLite will be used. (Disclaimer: SQlite, according for the Turtle book is intended for development and test only. We will use SQlite anyway because because Redis is not supported.)</p> <p>The only service that needs to be seeded to the database as this time is <code>security-spiffe-token-provier</code>.  For example:</p> <pre><code>spire-server entry create -parentID \"${local_agent_svid}\" -dns edgex-spiffe-token-provider -spiffeID \"${svid_service_base}/edgex-spiffe-token-provider\" -selector \"docker:label:com.docker.compose.service:edgex-spiffe-token-provider\"\n</code></pre> <p>The above command associates a SPIFFE ID with a selector, in this case, a container label, and configures a DNS subjectAltName in the X.509 certificate for server-side TLS.</p> <p>A snap-based installation of EdgeX would use a <code>unix:path</code> or <code>unix:sha256</code> selector instead.</p> <p>There are two extension mechanims for authorization additional workloads:</p> <ol> <li>Inject a config file or environment variable to authorize additional workloads.    The container will parse and issue <code>spire-server entry create</code> commands    for each additional service.</li> <li>Run the <code>edgex-secrets-config</code> utility    (that will wrap the <code>spire-server entry create</code> command)    for ad-hoc authorization of new services.</li> </ol> <p>The authorization database is persistent across reboots.</p>"},{"location":"design/adr/security/0020-spiffe/#consequences","title":"Consequences","text":"<p>This proposal will require addition of several new, optional, EdgeX microservices:</p> <ul> <li><code>security-spiffe-token-provider</code>, running on the main node</li> <li><code>spiffe-agent</code>, running on the main node and each remote node</li> <li><code>spiffe-server</code>, running on the main node</li> <li><code>spiffe-config</code>, a one-shot service running on the main node</li> </ul> <p>Note that like Vault, the recommended SPIFFE configuration is to run the SPIFFE server on a dedicated node. If this is a concern, bring your own SPIFFE implementation.</p> <p>Minor changes will be needed to <code>security-secretstore-setup</code> to preserve the token-creating-token used by <code>security-file-token-provider</code> so that it can be used by <code>security-spiffe-token-provider</code>.</p> <p>The startup flow of the framework will be adjusted as follows:</p> <ul> <li>Bootstrap service (original)</li> <li><code>spiffe-server</code><ul> <li><code>spiffe-config</code> (can be combined with <code>spifee-server</code>)</li> <li><code>spiffe-agent</code></li> </ul> </li> <li>Vault service (original)<ul> <li>Secret store setup service (original)</li> <li><code>security-spiffe-token-provider</code></li> <li>Consul (original)</li> <li>Postgres (original)</li> </ul> </li> </ul> <p>There is no direct dependency between <code>spiffe-server</code> and any other microservice. <code>security-spiffe-token-provider</code> requires an SVID from <code>spiffe-agent</code> and a Vault admin token.</p> <p>None of these new services will be proxied via the API gateway.</p> <p>In the future, this mechanism may become the default secret store distribution mechanism, as it eliminates several secrets volumes used to share secrets between <code>security-secretstore-setup</code> and various EdgeX microservices.</p> <p>The EdgeX automation will only configure the SPIFEE agent on the main node. Additional nodes can be manually added by the operator by obtaining a join token from the main node and using it to bootstrap a remote node.</p> <p>SPIFFE/SPIRE has native support for Kubernetes and can distribute the trust bundle via a Kubernetes ConfigMap to more easily enable distributed scenarios, removing a major roadblock to usage of EdgeX in a Kubernetes environment.</p>"},{"location":"design/adr/security/0020-spiffe/#footprint","title":"Footprint","text":"<p>NOTE: This data is limited by the fact that the pre-built SPIRE reference binaries are compiled with CGO enabled.</p>"},{"location":"design/adr/security/0020-spiffe/#spire-server","title":"SPIRE Server","text":"<pre><code>    69 MB executable, dynamically linked\n   151 MB inside of a Debian-slim container\n    30 MB memory usage, as container\n</code></pre>"},{"location":"design/adr/security/0020-spiffe/#spire-agent","title":"SPIRE Agent","text":"<pre><code>    33 MB executable, dynamically linked\n   114 MB inside of a Debian-slim container\n    64 MB memory usage, as container\n</code></pre>"},{"location":"design/adr/security/0020-spiffe/#spiffe-base-secret-store-token-provider","title":"SPIFFE-base Secret Store Token Provider","text":"<p>The following is the minimum size: <pre><code>  &gt;  6 MB executable (likely much larger)\n  &gt; 29 MB memory usage, as container\n</code></pre></p>"},{"location":"design/adr/security/0020-spiffe/#limitations","title":"Limitations","text":"<p>The following are known limitations with this proposal:</p> <ul> <li> <p>The capabilities enabled by this solution   would only be enabled on Linux platforms.   SIFFE/SPIRE Agent is not available for native Windows   and pre-built binaries are only avaiable for Linux.   (It is unclear as to whether other *nix'es are supported.)</p> </li> <li> <p>The capabilities enabled by this solution   would only be supported for Go-based services.   The SPIFFE API's are implemented in gRPC,   which is only ported to C#, C++, Dart, Go,   Java, Kotlin, Node, Objective-C, PHP, Python, and Ruby.   Notably, the C language is not supported,   and the only other EdgeX supported language is Go.</p> </li> <li> <p>That default TTL of an x.509 SVID is one hour.   As such, all SVID consumers must be capable of   auto-renewal of SVIDs on both the client   and server side.</p> </li> </ul>"},{"location":"design/adr/security/0020-spiffe/#alternatives","title":"Alternatives","text":""},{"location":"design/adr/security/0020-spiffe/#overcoming-lack-of-a-supported-grpc-c-library","title":"Overcoming lack of a supported GRPC-C library","text":"<ul> <li> <p>Leave C-SDK device services behind.   In this option, C device services would be unable to participate   in the delayed-start services architecture.</p> </li> <li> <p>Fork a grpc-c library.   Forking a grpc-c library and rehabilitating it is one option.   There is at least one grpc-c library that has been proven to work,   but it requires additional features to make it compatible with   the SPIRE workload agent.  However, the project is extremely large   and it is unlikely that EdgeX is big enough to carry the project.   Available libraries include:</p> </li> <li> <p>https://github.com/lixiangyun/grpc-c</p> <p>This library is several years out-of-date, does not compile on current Linux distributions without some rework, and does not pass per-request metadata tags. Proved to work via manual patching. Not supportable.</p> </li> <li> <p>https://github.com/Juniper/grpc-c</p> <p>This library is serveral years out-of-date, also does not compile on current Linux distributiosn without some rework. Uses hard-coded Unix domain socket paths. May support per-request metadata tags, but did not test. Not supportable.</p> </li> <li> <p>https://github.com/HewlettPackard/c-spiffe</p> <p>This library is yet untested. Rather than a gRPC library, this library implements the workload API client directly. Ultimately, this library also wraps the gRPC C++ library, and statically links to it. There is no benefit to the EdgeX project to use this library as we can call the underlying library directly.</p> </li> <li> <p>Hybrid device services.   In this model, device services would always be written in Go,   but in the case where linking to a C language library is required,   CGO features would be used to invoke native C functions   from golang. This option would commit the EdgeX project to   a one-time investment to port the existing C device services   to the new hybrid model. This option is the best choice if the   long-term strategy is to end-of-life the C Device SDK.</p> </li> <li> <p>Bridge.   In this model, the C++ implementation to invoke the   SPIFFE/SPIRE workload API would be hidden behind a   dynamic shared library with C linkage.   This would require minimal change to the existing C SDK.   However, the resulting binaries would have be based   on GLIBC vs MUSL in order to get <code>dlopen()</code> support.   This will also limit the choice of container base images   for containerized services.</p> </li> <li> <p>Modernize.   In this model, the Device SDK would be rewritten either    partially or in-full in C++. Under this model, the   SPIFFE/SPIRE workload API could be accessed via a   community-supported C++ GRPC SDK. There are many   implementation options:</p> </li> <li> <p>A \"C++ compilation-switch\" where the C SDK could     be compiled in C-mode or C++-mode with enhanced     functionality.</p> </li> <li> <p>A C++ extension API.  The original C SDK would     remain as-is, but if compiling with <code>__cplusplus</code>     defined, additional API methods would be exposed.     The SDK could thus be composed of a mixture of     <code>.c</code> files with C linkage and <code>.cc</code> files with C++ linkage.     The linker would ultimately determine whether or     not the C++ runtime library needed to be linked in.</p> </li> <li> <p>Native C++ device SDK with legacy C wrapper facade.</p> </li> <li> <p>Compile existing code in C++ mode, with optional C++ facade.</p> </li> </ul>"},{"location":"design/adr/security/0020-spiffe/#opt-in-or-standard-feature","title":"Opt-in or Standard Feature","text":"<p>If one of the following things were to happen, it would push this proposal \"over the edge\" from being an optional opt-in feature to a required standard feature for security:</p> <ul> <li> <p>The \"on-demand\" method of obtaining a secret store token is   the default method of obtaining a token for non-core EdgeX services.</p> </li> <li> <p>The \"on-demand\" method of obtaining a secret store token is   the default method for all EdgeX services.</p> </li> <li> <p>SPIFFE SVID's become the implementation mechanism for   microservice-level authentication.   (Not in scope for this ADR.)</p> </li> </ul>"},{"location":"design/adr/security/0020-spiffe/#merge-security-file-token-provider-and-security-spiffe-token-provider","title":"Merge security-file-token-provider and security-spiffe-token-provider","text":"<p>Keeping these as separate executables clearly separates the on-demand secret store tokens feature as an optional service. It is possible to combine the services, but there would need to be a configuration switch in order to enable the SPIFFE feature. It would also increase the base executable size to include the extra logic.</p>"},{"location":"design/adr/security/0020-spiffe/#alternatives-regarding-spiffe-ca","title":"Alternatives regarding SPIFFE CA","text":""},{"location":"design/adr/security/0020-spiffe/#transient-ca-option","title":"Transient CA option","text":"<p>The SPIFFE server can be configured with no \"upstream authority\" (certificate authority), and the server will periodically generate a new, transient CA, and keep a bounded history of previous CA's. A rotating trust bundle only practically works in a Kubernetes environment, since a configmap can be updated real-time. For everyone else, we need a static CA that can be pre-distributed to remote nodes. Thus, this solution was not chosen.</p>"},{"location":"design/adr/security/0020-spiffe/#vault-based-ca-option","title":"Vault-based CA option","text":"<p>The SPIFFE server can be configured to make requests to a Hashicorp Vault PKI secrets engine to generate intermediate CA certificates for signing SVID's. This is an option for future integrations, but is omitted from this proposal due to the jump in implementation complexity and the desire that the current proposal be on add-on feature. The current implementation allows the SPIFFE server and Vault to be started simultaneously.  Using a Vault-based CA would require a complex interlocking sequence of steps.</p>"},{"location":"design/adr/security/0020-spiffe/#references","title":"References","text":"<ul> <li>Issue to create ADR for handling delayed-start services</li> <li>0018 Service Registry ADR </li> <li>Service List ADR</li> <li>SPIFFE</li> <li>SPIFFE ID</li> <li>X.500 SVID</li> <li>JWT SVID</li> <li>Turtle book</li> </ul>"},{"location":"design/legacy-design/","title":"Legacy Design Documents","text":"Name/Link Short Description Registry Abstraction Decouple EdgeX services from Consul device-service/Discovery Dynamically discover new devices"},{"location":"design/legacy-design/device-service/discovery/","title":"Discovery","text":""},{"location":"design/legacy-design/device-service/discovery/#dynamic-device-discovery","title":"Dynamic Device Discovery","text":""},{"location":"design/legacy-design/device-service/discovery/#overview","title":"Overview","text":"<p>Some device protocols allow for devices to be discovered automatically. A Device Service may include a capability for discovering devices and creating the corresponding Device objects within EdgeX. A framework for doing so will be implemented in the Device Service SDKs.</p> <p>The discovery process will operate as follows:</p> <ul> <li>Discovery is triggered either on an internal timer or by a call to a REST endpoint</li> <li>The SDK will call a function provided by the DS implementation to request a device scan</li> <li>The implementation calls back to the SDK with details of devices which it has found</li> <li>The SDK filters these devices against a set of acceptance criteria</li> <li>The SDK adds accepted devices in core-metadata. These are now available in the EdgeX system</li> </ul>"},{"location":"design/legacy-design/device-service/discovery/#triggering-discovery","title":"Triggering Discovery","text":"<p>A boolean configuration value <code>Device/Discovery/Enabled</code> defaults to false. If this value is set true, and the DS implementation supports discovery, discovery is enabled.</p> <p>The SDK will respond to POST requests on the the /discovery endpoint. No content is required in the request. This call will return one of the following codes:</p> <ul> <li>202: discovery has been triggered or is already running. The response should indicate which, and contain the correlation id that will be used by any resulting requests for device addition</li> <li>423: the service is locked (admin state) or disabled (operating state)</li> <li>500: unknown or unanticipated issues exist</li> <li>501: discovery is not supported by this protocol implementation</li> <li>503: discovery is disabled by configuration</li> </ul> <p>In each of the failure cases a meaningful error message should be returned.</p> <p>In the case where discovery is triggered, the discovery process will run in a new thread or goroutine, so that the REST call may return immediately.</p> <p>An integer configuration value <code>Device/Discovery/Interval</code> defaults to zero. If this value is set to a positive value, and discovery is enabled, the discovery process will be triggered at the specified interval (in seconds).</p>"},{"location":"design/legacy-design/device-service/discovery/#finding-devices","title":"Finding Devices","text":"<p>When discovery is triggered, the SDK calls the implementation function provided by the Device Service. This should perform whatever protocol-specific procedure is necessary to find devices, and pass these devices into the SDK by calling the SDK's filtered device addition function.</p> <p>Note: The implementation should call back for every device found. The SDK is to take responsibility for filtering out devices which have already been added.</p> <p>The information required for a found device is as follows:</p> <ul> <li>An autogenerated device name</li> <li>The Protocol Properties of the device</li> <li>Optionally, a description string</li> <li>Optionally, a list of label strings</li> </ul> <p>The filtered device addition function will take as an argument a collection of structs containing the above data. An implementation may choose to make one call per discovered device, but implementors are encouraged to batch the devices if practical, as in future EdgeX versions it will be possible for the SDK to create all required new devices in a single call to core-metadata.</p> <p>Rationale: An alternative design would have the implementation function return the collection of discovered devices to the SDK. Using a callback mechanism instead has the following advantages:</p> <ul> <li>Allows for asynchronous operation. In this mode the DS implementation will intiate discovery and return immediately. For example discovery may be initiated by sending a broadcast packet. Devices will then send return packets indicating their existence. The thread handling inbound network traffic can on receipt of such packets call the filtered device addition function directly.</li> <li>Allows DS implementations where devices self-announce to call the filtered device addition function independent of the discovery process</li> </ul>"},{"location":"design/legacy-design/device-service/discovery/#filtered-device-addition","title":"Filtered Device Addition","text":"<p>The filter criteria for discovered devices are represented by Provision Watchers. A Provision Watcher contains the following fields:</p> <ul> <li><code>Identifiers</code>: A set of name-value pairs against which a new device's ProtocolProperties are matched</li> <li><code>BlockingIdentifiers</code>: A further set of name-value pairs which are also matched against a new device's ProtocolProperties</li> <li><code>Profile</code>: The name of a DeviceProfile which should be assigned to new devices which pass this ProvisionWatcher</li> <li><code>AdminState</code>: The initial Administrative State for new devices which pass this ProvisionWatcher</li> </ul> <p>A candidate new device passes a ProvisionWatcher if all of the <code>Identifiers</code> match, and none of the <code>BlockingIdentifiers</code>.</p> <p>For devices with multiple <code>Device.Protocols</code>, each <code>Device.Protocol</code> is considered separately. A pass (as described above) on any of the protocols results in the device being added.</p> <p>The values specified in <code>Identifiers</code> are regular expressions.</p> <p>Note: If a discovered Device is manually removed from EdgeX, it will be necessary to adjust the ProvisionWatcher via which it was added, either by making the <code>Identifiers</code> more specific or by adding <code>BlockingIdentifiers</code>, otherwise the Device will be re-added the next time Discovery is initiated.</p> <p>Note: ProvisionWatchers are stored in core-metadata. A facility for managing ProvisionWatchers is needed, eg <code>edgex-cli</code> could be extended</p>"},{"location":"design/legacy-requirements/","title":"Legacy Requirements","text":"Name/Link Short Description Device Service Device Service SDK required functionality"},{"location":"design/legacy-requirements/device-service/","title":"Device SDK Required Functionality","text":""},{"location":"design/legacy-requirements/device-service/#overview","title":"Overview","text":"<p>This document sets out the required functionality of a Device SDK other than the implementation of its REST API (see ADR 0011) and the Dynamic Discovery mechanism (see Discovery).</p> <p>This functionality is categorised into three areas - actions required at startup, configuration options to be supported, and support for push-style event generation.</p>"},{"location":"design/legacy-requirements/device-service/#startup","title":"Startup","text":"<p>When the device service is started, in addition to any actions required to support functionality defined elsewhere, the SDK must:</p> <ul> <li>Manage the device service's registration in metadata</li> <li>Provide initialization information to the protocol-specific implementation</li> </ul>"},{"location":"design/legacy-requirements/device-service/#registration","title":"Registration","text":"<p>The core-metadata service maintains an extent of device service registrations so that it may route requests relating to particular devices to the correct device service. The SDK should create (on first run) or update its record appropriately. Device service registrations contain the following fields:</p> <ul> <li><code>Name</code> - the name of the device service</li> <li><code>Description</code> - an optional brief description of the service</li> <li><code>Labels</code> - optional string labels</li> <li><code>BaseAddress</code> - URL of the base of the service's REST API</li> </ul> <p>The default device service <code>Name</code> is to be hardcoded into every device service implementation. A suffix may be added to this name at runtime by means of commandline option or environment variable. Service names must be unique in a particular EdgeX instance; the suffix mechanism allows for running multiple instances of a given device service.</p> <p>The <code>Description</code> and <code>Labels</code> are configured in the <code>[Service]</code> section of the device service configuration.</p> <p><code>BaseAddress</code> may be constructed using the <code>[Service]/Host</code> and <code>[Service]/Port</code> entries in the device service configuration.</p>"},{"location":"design/legacy-requirements/device-service/#initialization","title":"Initialization","text":"<p>During startup the SDK must supply to the implementation that part of the service configuration which is specific to the implementation. This configuration is held in the <code>Driver</code> section of the configuration file or registry.</p> <p>The SDK must also supply a logging facility at this stage. This facility should by default emit logs locally (configurable to file or to stdout) but instead should use the optional logging service if the configuration element <code>Logging/EnableRemote</code> is set <code>true</code>. Note: the logging service is deprecated and support for it will be removed in EdgeX v2.0</p> <p>The implementation on receipt of its configuration should perform any necessary initialization of its own. It may return an error in the event of unrecoverable problems, this should cause the service startup itself to fail.</p>"},{"location":"design/legacy-requirements/device-service/#configuration","title":"Configuration","text":"<p>Configuration should be supported by the SDK, in accordance with ADR 0005</p>"},{"location":"design/legacy-requirements/device-service/#commandline-processing","title":"Commandline processing","text":"<p>The SDK should handle commandline processing on behalf of the device service. In addition to the common EdgeX service options, the <code>--instance</code> / <code>-i</code> flag should be supported. This specifies a suffix to append to the device service name.</p>"},{"location":"design/legacy-requirements/device-service/#environment-variables","title":"Environment variables","text":"<p>The SDK should also handle environment variables. In addition to the common EdgeX variables, <code>EDGEX_INSTANCE_NAME</code> should if set override the <code>--instance</code> setting.</p>"},{"location":"design/legacy-requirements/device-service/#configuration-file-and-registry","title":"Configuration file and Registry","text":"<p>The SDK should use (or for non-Go implementations, re-implement) the standard mechanisms for obtaining configuration from a file or registry.</p> <p>The configuration parameters to be supported are:</p>"},{"location":"design/legacy-requirements/device-service/#service-section","title":"Service section","text":"Option Type Notes Host String This is the hostname to use when registering the service in core-metadata. As such it is used by other services to connect to the device service, and therefore must be resolvable by other services in the EdgeX deployment. Port Int Port on which to accept the device service's REST API. The assigned port for experimental / in-development device services is 49999. Timeout Int Time (in milliseconds) to wait between attempts to contact core-data and core-metadata when starting up. ConnectRetries Int Number of times to attempt to contact core-data and core-metadata when starting up. StartupMsg String Message to log on successful startup. CheckInterval String The checking interval to request if registering with Consul. Consul will ping the service at this interval to monitor its liveliness. ServerBindAddr String The interface on which the service's REST server should listen. By default the server is to listen on the interface to which the <code>Host</code> option resolves. A value of <code>0.0.0.0</code> means listen on all available interfaces."},{"location":"design/legacy-requirements/device-service/#clients-section","title":"Clients section","text":"<p>Defines the endpoints for other microservices in an EdgeX system. Not required when using Registry.</p>"},{"location":"design/legacy-requirements/device-service/#data","title":"Data","text":"Option Type Notes Host String Hostname on which to contact the core-data service. Port Int Port on which to contact the core-data service."},{"location":"design/legacy-requirements/device-service/#metadata","title":"Metadata","text":"Option Type Notes Host String Hostname on which to contact the core-metadata service. Port Int Port on which to contact the core-metadata service."},{"location":"design/legacy-requirements/device-service/#device-section","title":"Device section","text":"Option Type Notes DataTransform Bool For enabling/disabling transformations on data between the device and EdgeX. Defaults to true (enabled). Discovery/Enabled Bool For enabling/disabling device discovery. Defaults to true (enabled). Discovery/Interval Int Time between automatic discovery runs, in seconds. Defaults to zero (do not run discovery automatically). MaxCmdOps Int Defines the maximum number of resource operations that can be sent to the driver in a single command. MaxCmdResultLen Int Maximum string length for command results returned from the driver. UpdateLastConnected Bool If true, update the LastConnected attribute of a device whenever it is successfully accessed (read or write). Defaults to false."},{"location":"design/legacy-requirements/device-service/#logging-section","title":"Logging section","text":"Option Type Notes LogLevel String Sets the logging level. Available settings in order of increasing severity are: <code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>."},{"location":"design/legacy-requirements/device-service/#driver-section","title":"Driver section","text":"<p>This section is for options specific to the protocol driver. Any configuration specified here will be passed to the driver implementation during initialization.</p>"},{"location":"design/legacy-requirements/device-service/#push-events","title":"Push Events","text":"<p>The SDK should implement methods for generating Events other than on receipt of device GET requests. The AutoEvent mechanism provides for generating Events at fixed intervals. The asynchronous event queue enables the device service to generate events at arbitrary times, according to implementation-specific logic.</p>"},{"location":"design/legacy-requirements/device-service/#autoevents","title":"AutoEvents","text":"<p>Each device may have as part of its definition in Metadata a number of <code>AutoEvents</code> associated with it. An <code>AutoEvent</code> has the following fields:</p> <ul> <li>resource: the name of a deviceResource or deviceCommand indicating what to read.</li> <li>frequency: a string indicating the time to wait between reading events, expressed as an integer followed by units of ms, s, m or h.</li> <li>onchange: a boolean: if set to true, only generate new events if one or more of the contained readings has changed since the last event.</li> </ul> <p>The device SDK should schedule device readings from the implementation according to these <code>AutoEvent</code> defininitions. It should use the same logic as it would if the readings were being requested via REST.</p>"},{"location":"design/legacy-requirements/device-service/#asynchronous-event-queue","title":"Asynchronous Event Queue","text":"<p>The SDK should provide a mechanism whereby the implementation may submit device readings at any time without blocking. This may be done in a manner appropriate to the implementation language, eg the Go SDK provides a channel on which readings may be pushed, the C SDK provides a function which submits readings to a workqueue.</p>"},{"location":"examples/","title":"EdgeX Examples","text":"<p>In addition to the examples listed in this section of the documentation, you will find other examples in the EdgeX Examples Repository.</p> <p>The tabs below provide a listing (may be partial based on latest updates) for reference.</p> Application ServicesDeploymentDevice ServicesSecurity <p>See App Service Examples for a listing of custom and configurable application service examples.</p> Example Location Helm (Kubernetes) Github - examples, deployment Raspberry Pi 4 Github - examples, raspberry-pi-4 Cloud deployments Github - examples, cloud deployment templates Example Location Random Number Device Service (simulation) Github - examples, device-random Grove Device Service in C Github - examples, device-grove-c Example Location Docker Swarm, remote device service via overlay network Github - Docker Swarm SSH Tunneling, remote device service via SSH tunneling Github - SSH Tunneling <p>Warning</p> <p>Not all the examples in the EdgeX Examples repository are available for all EdgeX releases.  Check the documentation for details.</p>"},{"location":"examples/AppServiceExamples/","title":"App Service Examples","text":"<p>The following is a list of examples we currently have available that demonstrate various ways that the Application Functions SDK or App Service Configurable can be used. All of the examples can be found here in the edgex-examples repo. They focus on how to leverage various built in provided functions as mentioned above as well as how to write your own in the case that the SDK does not provide what is needed.</p> Example Name Description Simple Filter XML Demonstrates Filtering of Events by Device names and transforming data to XML Simple Filter XML HTTP Same example as #1, but result published to HTTP Endpoint Simple Filter XML MQTT Same example as #1, but result published to MQTT Broker Simple CBOR Filter Demonstrates Filtering of Events by Resource names for Event that is CBOR encoded containing a binary reading Advanced Filter Convert Publish Demonstrates Filtering of Events by Resource names, custom function to convert the reading and them publish the modified Event back to the MessageBus under a different topic. Advanced Target Type Demonstrates use of custom Target Type and use of HTTP Trigger Cloud Export MQTT Demonstrates simple custom Cloud transform and exporting to Cloud MQTT Broker. Cloud Event Transform Demonstrates custom transforms that convert Event/Readings to and from Cloud Events Send Command Demonstrates sending commands to a Device via the Command Client. Secrets Demonstrates how to retrieve secrets from the service SecretStore Custom Trigger Demonstrates how to create and use a custom trigger NATS RPC Demonstrates how to create a synchronous request/reply trigger using NATS messaging Fledge Export Demonstrates custom conversion of Event/Reading to Fledge format and then exporting to Fledge service REST endpoint Influxdb Export Demonstrates custom conversion of Event/Reading to InfluxDB timeseries format and then exporting to InFluxDB via MQTT Json Logic Demonstrates using the built in JSONLogic Evaluate pipeline function IBM Export Profile Demonstrates a custom App Service Configurable profile for exporting to IBM Cloud"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/","title":"Command Devices with eKuiper Rules Engine","text":""},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#overview","title":"Overview","text":"<p>This document describes how to actuate a device with rules trigger by the eKuiper rules engine. To make the example simple, the virtual device device-virtual is used as the actuated device.  The eKuiper rules engine analyzes the data sent from device-virtual services, and then sends a command to virtual device based a rule firing in eKuiper based on that analysis.  It should be noted that an application service is used to route core data through the rules engine.</p>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#use-case-scenarios","title":"Use Case Scenarios","text":"<p>Rules will be created in eKuiper to watch for two circumstances:</p> <ol> <li>monitor for events coming from the <code>Random-UnsignedInteger-Device</code> device (one of the default virtual device managed devices), and if a <code>uint8</code> reading value is found larger than <code>20</code> in the event, then send a command to <code>Random-Boolean-Device</code> device to start generating random numbers (specifically - set random generation bool to true).</li> <li>monitor for events coming from the <code>Random-Integer-Device</code> device (another of the default virtual device managed devices), and if the average for <code>int8</code> reading values (within 20 seconds) is larger than 0, then send a command to <code>Random-Boolean-Device</code> device to stop generating random numbers (specifically - set random generation bool to false).</li> </ol> <p>These use case scenarios do not have any real business meaning, but easily demonstrate the features of EdgeX automatic actuation accomplished via the eKuiper rule engine.</p>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>This document will not cover basic operations of EdgeX or LF Edge eKuiper.  Readers should have basic knowledge of:</p> <ul> <li>Get and start EdgeX.  Refer to Quick Start for how to get and start EdgeX with the virtual device service.</li> <li>Run the eKuiper Rules Engine.  Refer to EdgeX eKuiper Rule Engine Tutorial to understand the basics of eKuiper and EdgeX. </li> </ul>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#start-ekuiper-and-create-an-edgex-stream","title":"Start eKuiper and Create an EdgeX Stream","text":"<p>Make sure you read the EdgeX eKuiper Rule Engine Tutorial and successfully run eKuiper with EdgeX. </p> <p>First create a stream that can consume streaming data from the EdgeX application service (rules engine profile). This step is not required if you already finished the EdgeX eKuiper Rule Engine Tutorial. </p> <pre><code>curl -X POST \\\nhttp://$ekuiper_docker:59720/streams \\\n-H 'Content-Type: application/json' \\\n-d '{\"sql\": \"create stream demo() WITH (FORMAT=\\\"JSON\\\", TYPE=\\\"edgex\\\")\"}'\n</code></pre>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#get-and-test-the-command-url","title":"Get and Test the Command URL","text":"<p>Since both use case scenario rules will send commands to the <code>Random-Boolean-Device</code> virtual device, use the curl request below to get a list of available commands for this device.</p> <pre><code>curl http://127.0.0.1:59882/api/v2/device/name/Random-Boolean-Device | jq\n</code></pre> <p>It should print results like those below.</p> <pre><code>{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"deviceCoreCommand\": {\n\"deviceName\": \"Random-Boolean-Device\",\n\"profileName\": \"Random-Boolean-Device\",\n\"coreCommands\": [\n{\n\"name\": \"WriteBoolValue\",\n\"set\": true,\n\"path\": \"/api/v2/device/name/Random-Boolean-Device/WriteBoolValue\",\n\"url\": \"http://edgex-core-command:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"Bool\",\n\"valueType\": \"Bool\"\n},\n{\n\"resourceName\": \"EnableRandomization_Bool\",\n\"valueType\": \"Bool\"\n}\n]\n},\n{\n\"name\": \"WriteBoolArrayValue\",\n\"set\": true,\n\"path\": \"/api/v2/device/name/Random-Boolean-Device/WriteBoolArrayValue\",\n\"url\": \"http://edgex-core-command:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"BoolArray\",\n\"valueType\": \"BoolArray\"\n},\n{\n\"resourceName\": \"EnableRandomization_BoolArray\",\n\"valueType\": \"Bool\"\n}\n]\n},\n{\n\"name\": \"Bool\",\n\"get\": true,\n\"set\": true,\n\"path\": \"/api/v2/device/name/Random-Boolean-Device/Bool\",\n\"url\": \"http://edgex-core-command:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"Bool\",\n\"valueType\": \"Bool\"\n}\n]\n},\n{\n\"name\": \"BoolArray\",\n\"get\": true,\n\"set\": true,\n\"path\": \"/api/v2/device/name/Random-Boolean-Device/BoolArray\",\n\"url\": \"http://edgex-core-command:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"BoolArray\",\n\"valueType\": \"BoolArray\"\n}\n]\n}\n]\n}\n}\n</code></pre> <p>From this output, look for the URL associated to the <code>PUT</code> command (the first URL listed).  This is the command eKuiper will use to call on the device. There are two parameters for this command:</p> <ul> <li><code>Bool</code>: Set the returned value when other services want to get device data. The parameter will be used only when <code>EnableRandomization_Bool</code> is set to false.</li> <li><code>EnableRandomization_Bool</code>: Enable/disable the randomization generation of bool values. If this value is set to true, then the 1st parameter will be ignored.</li> </ul> <p>You can test calling this command with its parameters using curl as shown below.</p> <pre><code>curl -X PUT \\\nhttp://edgex-core-command:59882/api/v2/device/name/Random-Boolean-Device/WriteBoolValue \\\n-H 'Content-Type: application/json' \\\n-d '{\"Bool\":\"true\", \"EnableRandomization_Bool\": \"true\"}'\n</code></pre>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#create-rules","title":"Create rules","text":"<p>Now that you have EdgeX and eKuiper running, the EdgeX stream defined, and you know the command to actuate <code>Random-Boolean-Device</code>, it is time to build the eKuiper rules.</p>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#the-first-rule","title":"The first rule","text":"<p>Again, the 1st rule is to monitor for events coming from the <code>Random-UnsignedInteger-Device</code> device (one of the default virtual device managed devices), and if a <code>uint8</code> reading value is found larger than <code>20</code> in the event, then send the command to <code>Random-Boolean-Device</code> device to start generating random numbers (specifically - set random generation bool to true).  Given the URL and parameters to the command, below is the curl command to declare the first rule in eKuiper.</p> <pre><code>curl -X POST \\\nhttp://$ekuiper_server:59720/rules \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"id\": \"rule1\",\n  \"sql\": \"SELECT uint8 FROM demo WHERE uint8 &gt; 20\",\n  \"actions\": [\n    {\n      \"rest\": {\n        \"url\": \"http://edgex-core-command:59882/api/v2/device/name/Random-Boolean-Device/WriteBoolValue\",\n        \"method\": \"put\",\n        \"dataTemplate\": \"{\\\"Bool\\\":\\\"true\\\", \\\"EnableRandomization_Bool\\\": \\\"true\\\"}\",\n        \"sendSingle\": true\n      }\n    },\n    {\n      \"log\":{}\n    }\n  ]\n}'\n</code></pre>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#the-second-rule","title":"The second rule","text":"<p>The 2nd rule is to monitor for events coming from the <code>Random-Integer-Device</code> device (another of the default virtual device managed devices), and if the average for <code>int8</code> reading values (within 20 seconds) is larger than 0, then send a command to <code>Random-Boolean-Device</code> device to stop generating random numbers (specifically - set random generation bool to false).  Here is the curl request to setup the second rule in eKuiper.  The same command URL is used as the same device action (<code>Random-Boolean-Device's PUT bool command</code>) is being actuated, but with different parameters.</p> <pre><code>curl -X POST \\\nhttp://$ekuiper_server:59720/rules \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"id\": \"rule2\",\n  \"sql\": \"SELECT avg(int8) AS avg_int8 FROM demo WHERE int8 != nil GROUP BY TUMBLINGWINDOW(ss, 20) HAVING avg(int8) &gt; 0\",\n  \"actions\": [\n    {\n      \"rest\": {\n        \"url\": \"http://edgex-core-command:59882/api/v2/device/name/Random-Boolean-Device/WriteBoolValue\",\n        \"method\": \"put\",\n        \"dataTemplate\": \"{\\\"Bool\\\":\\\"false\\\", \\\"EnableRandomization_Bool\\\": \\\"false\\\"}\",\n        \"sendSingle\": true\n      }\n    },\n    {\n      \"log\":{}\n    }\n  ]\n}'\n</code></pre>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#watch-the-ekuiper-logs","title":"Watch the eKuiper Logs","text":"<p>Both rules are now created in eKuiper.  eKuiper is busy analyzing the event data coming for the virtual devices looking for readings that match the rules you created.  You can watch the edgex-kuiper container logs for the rule triggering and command execution.</p> <pre><code>docker logs edgex-kuiper\n</code></pre>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#explore-the-results","title":"Explore the Results","text":"<p>You can also explore the eKuiper analysis that caused the commands to be sent to the service.  To see the the data from the analysis, use the SQL below to query eKuiper filtering data.</p> <pre><code>SELECT int8, \"true\" AS randomization FROM demo WHERE uint8 &gt; 20\n</code></pre> <p>The output of the SQL should look similar to the results below.</p> <pre><code>[{\"int8\":-75, \"randomization\":\"true\"}]\n</code></pre>"},{"location":"examples/Ch-CommandingDeviceThroughRulesEngine/#extended-reading","title":"Extended Reading","text":"<p>Use these resources to learn more about the features of LF Edge eKuiper.</p> <ul> <li>eKuiper Github code repository</li> <li>eKuiper reference guide</li> </ul>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/","title":"MQTT","text":"<p>EdgeX - Jakarta Release</p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#overview","title":"Overview","text":"<p>In this example, we use a script to simulate a custom-defined MQTT device, instead of a real device. This provides a straight-forward way to test the device-mqtt features using an MQTT-broker.</p> <p></p> <p>Note</p> <p>Multi-Level Topics move metadata (i.e. device name, command name,... etc) from the payload into the MQTT topics. Notice the sections marked with Using Multi-level Topic: for relevant input/output throughout this example.</p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#prepare-the-custom-device-configuration","title":"Prepare the Custom Device Configuration","text":"<p>In this section, we create folders that contain files required for deployment of a customized device configuration to work with the existing device service:</p> <pre><code>- custom-config\n  |- devices\n     |- my.custom.device.config.toml\n  |- profiles\n     |- my.custom.device.profile.yml\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#device-configuration","title":"Device Configuration","text":"<p>Use this configuration file to define devices and schedule jobs. device-mqtt generates a relative instance on start-up.</p> <p>Create the device configuration file, named <code>my.custom.device.config.toml</code>, as shown below:</p> <pre><code># Pre-define Devices\n[[DeviceList]]\nName = \"my-custom-device\"\nProfileName = \"my-custom-device-profile\"\nDescription = \"MQTT device is created for test purpose\"\nLabels = [ \"MQTT\", \"test\" ]\n[DeviceList.Protocols]\n[DeviceList.Protocols.mqtt]\n# Comment out/remove below to use multi-level topics\nCommandTopic = \"CommandTopic\"\n# Uncomment below to use multi-level topics\n# CommandTopic = \"command/my-custom-device\"\n[[DeviceList.AutoEvents]]\nInterval = \"30s\"\nOnChange = false\nSourceName = \"message\"\n</code></pre> <p>Note</p> <p><code>CommandTopic</code> is used to publish the GET or SET command request </p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#device-profile","title":"Device Profile","text":"<p>The DeviceProfile defines the device's values and operation method, which can be Read or Write.</p> <p>Create a device profile, named <code>my.custom.device.profile.yml</code>, with the following content:</p> <pre><code>name: \"my-custom-device-profile\"\nmanufacturer: \"iot\"\nmodel: \"MQTT-DEVICE\"\ndescription: \"Test device profile\"\nlabels:\n- \"mqtt\"\n- \"test\"\ndeviceResources:\n-\nname: randnum\nisHidden: true\ndescription: \"device random number\"\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"R\"\n-\nname: ping\nisHidden: true\ndescription: \"device awake\"\nproperties:\nvalueType: \"String\"\nreadWrite: \"R\"\n-\nname: message\nisHidden: false\ndescription: \"device message\"\nproperties:\nvalueType: \"String\"\nreadWrite: \"RW\"\n-\nname: json\nisHidden: false\ndescription: \"JSON message\"\nproperties:\nvalueType: \"Object\"\nreadWrite: \"RW\"\nmediaType: \"application/json\"\n\ndeviceCommands:\n-\nname: values\nreadWrite: \"R\"\nisHidden: false\nresourceOperations:\n- { deviceResource: \"randnum\" }\n- { deviceResource: \"ping\" }\n- { deviceResource: \"message\" }\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#prepare-docker-compose-file","title":"Prepare docker-compose file","text":"<ol> <li>Clone edgex-compose     <pre><code>$ git clone git@github.com:edgexfoundry/edgex-compose.git\n$ git checkout main\n</code></pre>     !!! note         Use main branch until jakarta is released.</li> <li>Generate the docker-compose.yml file (notice this includes mqtt-broker)     <pre><code>$ cd edgex-compose/compose-builder\n$ make gen ds-mqtt mqtt-broker no-secty ui\n</code></pre></li> <li>Check the generated file     <pre><code>$ ls | grep 'docker-compose.yml'\ndocker-compose.yml\n</code></pre></li> </ol>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#mount-the-custom-config","title":"Mount the custom-config","text":"<p>Open the <code>edgex-compose/compose-builder/docker-compose.yml</code> file and then add volumes path and environment as shown below:</p> <pre><code> # docker-compose.yml\n\ndevice-mqtt:\n...\nenvironment:\nDEVICE_DEVICESDIR: /custom-config/devices\nDEVICE_PROFILESDIR: /custom-config/profiles\n...\nvolumes:\n- /path/to/custom-config:/custom-config\n...\n</code></pre> <p>Note</p> <p>Replace the <code>/path/to/custom-config</code> in the example with the correct path</p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#enabling-multi-level-topics","title":"Enabling Multi-Level Topics","text":"<p>To use the optional setting for MQTT device services with multi-level topics, make the following changes in the device service configuration files:</p> <ol> <li> <p>There are two ways to set the environment variables for multi-level topics. </p> <ol> <li> <p>If the code is built with compose builder, modify the docker-compose.yml file in edgex-compose/compose-builder:</p> <pre><code># docker-compose.yml\n\ndevice-mqtt:\n... environment:\nMQTTBROKERINFO_INCOMINGTOPIC: \"incoming/data/#\"\nMQTTBROKERINFO_RESPONSETOPIC: \"command/response/#\"\nMQTTBROKERINFO_USETOPICLEVELS: \"true\"\n...\n</code></pre> </li> <li> <p>Otherwise if the device service is built locally, modify these lines in <code>configuration.toml</code>:</p> <pre><code># Comment out/remove when using multi-level topics\n#IncomingTopic = \"DataTopic\"\n#ResponseTopic = \"ResponseTopic\"\n#UseTopicLevels = false\n\n# Uncomment to use multi-level topics\nIncomingTopic = \"incoming/data/#\"\nResponseTopic = \"command/response/#\"\nUseTopicLevels = true\n</code></pre> <p>Note</p> <p>If you have previously run Device MQTT locally, you will need to remove the services configuration from Consul. This can be done with: <code>curl --request DELETE http://localhost:8500/v1/kv/edgex/devices/2.0/device-mqtt?recurse=true</code></p> </li> </ol> </li> <li> <p>In  <code>my.custom.device.config.toml</code>:</p> <pre><code>[DeviceList.Protocols]\n[DeviceList.Protocols.mqtt]\n# Comment out/remove below to use multi-level topics\n# CommandTopic = \"CommandTopic\"\n# Uncomment below to use multi-level topics\nCommandTopic = \"command/my-custom-device\"\n</code></pre> <p>Note</p> <p>If you have run Device-MQTT before, you will need to delete the previously registered device(s) by replacing  in the command below: <code>curl --request DELETE http://localhost:59881/api/v2/device/name/&lt;device-name&gt;</code> where <code>&lt;device-name&gt;</code> can be found by running: <code>curl --request GET http://localhost:59881/api/v2/device/all | json_pp</code>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#start-edgex-foundry-on-docker","title":"Start EdgeX Foundry on Docker","text":"<p>Deploy EdgeX using the following commands: <pre><code>$ cd edgex-compose/compose-builder\n$ docker-compose pull\n$ docker-compose up -d\n</code></pre></p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#using-a-mqtt-device-simulator","title":"Using a MQTT Device Simulator","text":""},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#overview_1","title":"Overview","text":""},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#expected-behaviors","title":"Expected Behaviors","text":"<p>Using the detailed script below as a simulator, there are three behaviors:</p> <ol> <li> <p>Publish random number data every 15 seconds.</p> <p>Default (single-level) Topic: The simulator publishes the data to the MQTT broker with topic <code>DataTopic</code> and the message is similar to the following: <pre><code>{\"name\":\"my-custom-device\", \"cmd\":\"randnum\", \"method\":\"get\", \"randnum\":4161.3549}\n</code></pre> Using Multi-level Topic:    The simulator publishes the data to the MQTT broker with topic <code>incoming/data/my-custom-device/randnum</code> and the message is similar to the following:</p> <pre><code>{\"randnum\":4161.3549}\n</code></pre> </li> <li> <p>Receive the reading request, then return the response.</p> <p>Default (single-level) Topic:</p> <ol> <li>The simulator receives the request from the MQTT broker, the topic is <code>CommandTopic</code> and the message is similar to the following:     <pre><code>{\"cmd\":\"randnum\", \"method\":\"get\", \"uuid\":\"293d7a00-66e1-4374-ace0-07520103c95f\"}\n</code></pre></li> <li>The simulator returns the response to the MQTT broker, the topic is <code>ResponseTopic</code> and the message is similar to the following:     <pre><code>{\"cmd\":\"randnum\", \"method\":\"get\", \"uuid\":\"293d7a00-66e1-4374-ace0-07520103c95f\", \"randnum\":42.0}\n</code></pre></li> </ol> <p>Using Multi-level Topic:</p> <ol> <li> <p>The simulator receives the request from the MQTT broker, the topic is <code>command/my-custom-device/randnum/get/293d7a00-66e1-4374-ace0-07520103c95f</code> and message returned is similar to the following:</p> <pre><code>{\"randnum\":\"42.0\"}\n</code></pre> </li> <li> <p>The simulator returns the response to the MQTT broker, the topic is <code>command/response/#</code> and the message is similar to the following:</p> <pre><code>{\"randnum\":\"4.20e+01\"}\n</code></pre> </li> </ol> </li> <li> <p>Receive the set request, then change the device value.</p> <p>Default (single-level) Topic:</p> <ol> <li> <p>The simulator receives the request from the MQTT broker, the topic is <code>CommandTopic</code> and the message is similar to the following:</p> <pre><code>{\"cmd\":\"message\", \"method\":\"set\", \"uuid\":\"293d7a00-66e1-4374-ace0-07520103c95f\", \"message\":\"test message...\"}\n</code></pre> </li> <li> <p>The simulator changes the device value and returns the response to the MQTT broker, the topic is <code>ResponseTopic</code> and the message is similar to the following:</p> <pre><code>{\"cmd\":\"message\", \"method\":\"set\", \"uuid\":\"293d7a00-66e1-4374-ace0-07520103c95f\"}\n</code></pre> </li> </ol> <p>Using Multi-level Topic:</p> <ol> <li> <p>The simulator receives the request from the MQTT broker, the topic is <code>command/my-custom-device/testmessage/set/293d7a00-66e1-4374-ace0-07520103c95f</code> and the message is similar to the following:</p> <pre><code>{\"message\":\"test message...\"}\n</code></pre> </li> <li> <p>The simulator changes the device value and returns the response to the MQTT broker, the topic is <code>command/response/#</code> and the message is similar to the following:</p> <pre><code>{\"message\":\"test message...\"}\n</code></pre> </li> </ol> </li> </ol>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#creating-and-running-a-mqtt-device-simulator","title":"Creating and Running a MQTT Device Simulator","text":"<p>To implement the simulated custom-defined MQTT device, create a javascript, named <code>mock-device.js</code>, with the following content:</p> <p>Default (single-level) Topic:</p> <pre><code>function getRandomFloat(min, max) {\nreturn Math.random() * (max - min) + min;\n}\n\nconst deviceName = \"my-custom-device\";\nlet message = \"test-message\";\nlet json = {\"name\" : \"My JSON\"};\n\n// DataSender sends async value to MQTT broker every 15 seconds\nschedule('*/15 * * * * *', ()=&gt;{\nlet body = {\n\"name\": deviceName,\n\"cmd\": \"randnum\",\n\"randnum\": getRandomFloat(25,29).toFixed(1)\n};\npublish( 'DataTopic', JSON.stringify(body));\n});\n\n// CommandHandler receives commands and sends response to MQTT broker\n// 1. Receive the reading request, then return the response\n// 2. Receive the set request, then change the device value\nsubscribe( \"CommandTopic\" , (topic, val) =&gt; {\nvar data = val;\nif (data.method == \"set\") {\nswitch(data.cmd) {\ncase \"message\":\nmessage = data[data.cmd];\nbreak;\ncase \"json\":\njson = data[data.cmd];\nbreak;\n}\n}else{\nswitch(data.cmd) {\ncase \"ping\":\ndata.ping = \"pong\";\nbreak;\ncase \"message\":\ndata.message = message;\nbreak;\ncase \"randnum\":\ndata.randnum = 12.123;\nbreak;\ncase \"json\":\ndata.json = json;\nbreak;\n}\n}\npublish( \"ResponseTopic\", JSON.stringify(data));\n});\n</code></pre> <p>Using Multi-level Topic:</p> <p><pre><code>function getRandomFloat(min, max) {\nreturn Math.random() * (max - min) + min;\n}\n\nconst deviceName = \"my-custom-device\";\nlet message = \"test-message\";\nlet json = {\"name\" : \"My JSON\"};\n\n// DataSender sends async value to MQTT broker every 15 seconds\nschedule('*/15 * * * * *', ()=&gt;{\nlet body = getRandomFloat(25,29).toFixed(1);\npublish( 'incoming/data/my-custom-device/randnum', body);\n});\n\n// CommandHandler receives commands and sends response to MQTT broker\n// 1. Receive the reading request, then return the response\n// 2. Receive the set request, then change the device value\nsubscribe( \"command/my-custom-device/#\" , (topic, val) =&gt; {\nconst words = topic.split('/');\nvar cmd = words[2];\nvar method = words[3];\nvar uuid = words[4];\nvar response = {};\nvar data = val;\n\nif (method == \"set\") {\nswitch(cmd) {\ncase \"message\":\nmessage = data[cmd];\nbreak;\ncase \"json\":\njson = data[cmd];\nbreak;\n}\n}else{\nswitch(cmd) {\ncase \"ping\":\nresponse.ping = \"pong\";\nbreak;\ncase \"message\":\nresponse.message = message;\nbreak;\ncase \"randnum\":\nresponse.randnum = 12.123;\nbreak;\ncase \"json\":\nresponse.json = json;\nbreak;\n}\n}\nvar sendTopic =\"command/response/\"+ uuid;\npublish( sendTopic, JSON.stringify(response));\n});\n</code></pre> To run the device simulator, enter the commands shown below with the following changes: <pre><code>$ mv mock-device.js /path/to/mqtt-scripts\n$ docker run -d --restart=always --name=mqtt-scripts \\\n    -v /path/to/mqtt-scripts:/scripts  \\\n    dersimn/mqtt-scripts --url mqtt://172.17.0.1 --dir /scripts\n</code></pre></p> <p>Note</p> <p>Replace the <code>/path/to/mqtt-scripts</code> in the example mv command with the correct path</p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#execute-commands","title":"Execute Commands","text":"<p>Now we're ready to run some commands.</p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#find-executable-commands","title":"Find Executable Commands","text":"<p>Use the following query to find executable commands:</p> <pre><code>$ curl http://localhost:59882/api/v2/device/all | json_pp\n\n{\n\"deviceCoreCommands\" : [\n{\n\"profileName\" : \"my-custom-device-profile\",\n\"coreCommands\" : [\n{\n\"name\" : \"values\",\n\"get\" : true,\n\"path\" : \"/api/v2/device/name/my-custom-device/values\",\n\"url\" : \"http://edgex-core-command:59882\",\n\"parameters\" : [\n{\n\"resourceName\" : \"randnum\",\n\"valueType\" : \"Float32\"\n},\n{\n\"resourceName\" : \"ping\",\n\"valueType\" : \"String\"\n},\n{\n\"valueType\" : \"String\",\n\"resourceName\" : \"message\"\n}\n]\n},\n{\n\"url\" : \"http://edgex-core-command:59882\",\n\"parameters\" : [\n{\n\"resourceName\" : \"message\",\n\"valueType\" : \"String\"\n}\n],\n\"name\" : \"message\",\n\"get\" : true,\n\"path\" : \"/api/v2/device/name/my-custom-device/message\",\n\"set\" : true\n},\n{\n\"name\": \"json\",\n\"get\": true,\n\"set\": true,\n\"path\": \"/api/v2/device/name/MQTT-test-device/json\",\n\"url\" : \"http://edgex-core-command:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"json\",\n\"valueType\": \"Object\"\n}\n]\n}\n],\n\"deviceName\" : \"my-custom-device\"\n}\n],\n\"apiVersion\" : \"v2\",\n\"statusCode\" : 200\n}\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#execute-set-command","title":"Execute SET Command","text":"<p>Execute a SET command according to the url and parameterNames, replacing [host] with the server IP when running the SET command.</p> <pre><code>$ curl http://localhost:59882/api/v2/device/name/my-custom-device/message \\\n    -H \"Content-Type:application/json\" -X PUT  \\\n    -d '{\"message\":\"Hello!\"}'\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#execute-get-command","title":"Execute GET Command","text":"<p>Execute a GET command as follows:</p> <pre><code>$ curl http://localhost:59882/api/v2/device/name/my-custom-device/message | json_pp\n\n{\n\"event\" : {\n\"origin\" : 1624417689920618131,\n\"readings\" : [\n{\n\"resourceName\" : \"message\",\n\"binaryValue\" : null,\n\"profileName\" : \"my-custom-device-profile\",\n\"deviceName\" : \"my-custom-device\",\n\"id\" : \"a3bb78c5-e76f-49a2-ad9d-b220a86c3e36\",\n\"value\" : \"Hello!\",\n\"valueType\" : \"String\",\n\"origin\" : 1624417689920615828,\n\"mediaType\" : \"\"\n}\n],\n\"sourceName\" : \"message\",\n\"deviceName\" : \"my-custom-device\",\n\"apiVersion\" : \"v2\",\n\"profileName\" : \"my-custom-device-profile\",\n\"id\" : \"e0b29735-8b39-44d1-8f68-4d7252e14cc7\"\n},\n\"apiVersion\" : \"v2\",\n\"statusCode\" : 200\n}\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#schedule-job","title":"Schedule Job","text":"<p>The schedule job is defined in the <code>[[DeviceList.AutoEvents]]</code> section of the device configuration file:</p> <pre><code>    [[DeviceList.AutoEvents]]\nInterval = \"30s\"\nOnChange = false\nSourceName = \"message\"\n</code></pre> <p>After the service starts, query core-data's reading API. The results show that the service auto-executes the command every 30 secs, as shown below:</p> <pre><code>$ curl http://localhost:59880/api/v2/reading/resourceName/message | json_pp\n\n{\n\"statusCode\" : 200,\n\"readings\" : [\n{\n\"value\" : \"test-message\",\n\"id\" : \"e91b8ca6-c5c4-4509-bb61-bd4b09fe835c\",\n\"mediaType\" : \"\",\n\"binaryValue\" : null,\n\"resourceName\" : \"message\",\n\"origin\" : 1624418361324331392,\n\"profileName\" : \"my-custom-device-profile\",\n\"deviceName\" : \"my-custom-device\",\n\"valueType\" : \"String\"\n},\n{\n\"mediaType\" : \"\",\n\"binaryValue\" : null,\n\"resourceName\" : \"message\",\n\"value\" : \"test-message\",\n\"id\" : \"1da58cb7-2bf4-47f0-bbb8-9519797149a2\",\n\"deviceName\" : \"my-custom-device\",\n\"valueType\" : \"String\",\n\"profileName\" : \"my-custom-device-profile\",\n\"origin\" : 1624418330822988843\n},\n...\n],\n\"apiVersion\" : \"v2\"\n}\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#async-device-reading","title":"Async Device Reading","text":"<p>The <code>device-mqtt</code> subscribes to a <code>DataTopic</code>, which waits for the real device to send value to MQTT broker, then <code>device-mqtt</code>parses the value and forward to the northbound.</p> <p>The data format contains the following values:</p> <ul> <li>name = device name</li> <li>cmd = deviceResource name</li> <li>method = get or set</li> <li>cmd = device reading</li> </ul> <p>The following results show that the mock device sent the reading every 15 secs:</p> <pre><code>$ curl http://localhost:59880/api/v2/reading/resourceName/randnum | json_pp\n\n{\n\"readings\" : [\n{\n\"origin\" : 1624418475007110946,\n\"valueType\" : \"Float32\",\n\"deviceName\" : \"my-custom-device\",\n\"id\" : \"9b3d337e-8a8a-4a6c-8018-b4908b57abb8\",\n\"binaryValue\" : null,\n\"resourceName\" : \"randnum\",\n\"profileName\" : \"my-custom-device-profile\",\n\"mediaType\" : \"\",\n\"value\" : \"2.630000e+01\"\n},\n{\n\"deviceName\" : \"my-custom-device\",\n\"valueType\" : \"Float32\",\n\"id\" : \"06918cbb-ada0-4752-8877-0ef8488620f6\",\n\"origin\" : 1624418460007833720,\n\"mediaType\" : \"\",\n\"profileName\" : \"my-custom-device-profile\",\n\"value\" : \"2.570000e+01\",\n\"resourceName\" : \"randnum\",\n\"binaryValue\" : null\n},\n...\n],\n\"statusCode\" : 200,\n\"apiVersion\" : \"v2\"\n}\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#mqtt-device-service-configuration","title":"MQTT Device Service Configuration","text":"<p>MQTT Device Service has the following configurations to implement the MQTT protocol.</p> Configuration Default Value Description MQTTBrokerInfo.Schema tcp The URL schema MQTTBrokerInfo.Host 0.0.0.0 The URL host MQTTBrokerInfo.Port 1883 The URL port MQTTBrokerInfo.Qos 0 Quality of Service 0 (At most once), 1 (At least once) or 2 (Exactly once) MQTTBrokerInfo.KeepAlive 3600 Seconds between client ping when no active data flowing to avoid client being disconnected. Must be greater then 2 MQTTBrokerInfo.ClientId device-mqtt ClientId to connect to the broker with MQTTBrokerInfo.CredentialsRetryTime 120 The retry times to get the credential MQTTBrokerInfo.CredentialsRetryWait 1 The wait time(seconds) when retry to get the credential MQTTBrokerInfo.ConnEstablishingRetry 10 The retry times to establish the MQTT connection MQTTBrokerInfo.ConnRetryWaitTime 5 The wait time(seconds) when retry to establish the MQTT connection MQTTBrokerInfo.AuthMode none Indicates what to use when connecting to the broker. Must be one of \"none\" , \"usernamepassword\" MQTTBrokerInfo.CredentialsPath credentials Name of the path in secret provider to retrieve your secrets. Must be non-blank. MQTTBrokerInfo.IncomingTopic DataTopic (incoming/data/#) IncomingTopic is used to receive the async value MQTTBrokerInfo.ResponseTopic ResponseTopic (command/response/#) ResponseTopic is used to receive the command response from the device MQTTBrokerInfo.UseTopicLevels false (true) Boolean setting to use multi-level topics MQTTBrokerInfo.Writable.ResponseFetchInterval 500 ResponseFetchInterval specifies the retry interval(milliseconds) to fetch the command response from the MQTT broker <p>Note</p> <p>Using Multi-level Topic: Remember to change the defaults in parentheses in the table above.</p>"},{"location":"examples/Ch-ExamplesAddingMQTTDevice/#overriding-with-environment-variables","title":"Overriding with Environment Variables","text":"<p>The user can override any of the above configurations using  <code>environment:</code>  variables  to meet their requirement, for example:</p> <pre><code># docker-compose.yml\n\ndevice-mqtt:\n. . . environment:\nMQTTBROKERINFO_CLIENTID: \"my-device-mqtt\"\nMQTTBROKERINFO_CONNRETRYWAITTIME: \"10\"\nMQTTBROKERINFO_USETOPICLEVELS: \"false\"\n...\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/","title":"Modbus","text":"<p>EdgeX - Ireland Release</p> <p>This page describes how to connect Modbus devices to EdgeX. In this example, we simulate the temperature sensor instead of using a real device. This provides a straightforward way to test the device service features.</p> <ul> <li>Temperature sensor: https://www.audon.co.uk/ethernet_sensors/NANO_TEMP.html</li> <li>User manual: http://download.inveo.com.pl/manual/nano_t/user_manual_en.pdf</li> </ul>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#important-notice","title":"Important Notice","text":"<p>To fulfill the issue #61, there is an important incompatible change after v2 (Ireland release). In the Device Profile attributes section, the <code>startingAddress</code> becomes an integer data type and zero-based value. In v1, <code>startingAddress</code> was a string data type and one-based value.</p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#environment","title":"Environment","text":"<p>You can use any operating system that can install docker and docker-compose.  In this example, we use Ubuntu to deploy EdgeX using docker.</p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#modbus-device-simulator","title":"Modbus Device Simulator","text":"<p>1.Download ModbusPal </p> <p>Download the fixed version of ModbusPal from the https://sourceforge.net/p/modbuspal/discussion/899955/thread/72cf35ee/cd1f/attachment/ModbusPal.jar .</p> <p>2.Install required lib: <pre><code>sudo apt install librxtx-java\n</code></pre> 3.Startup the ModbusPal: <pre><code>sudo java -jar ModbusPal.jar\n</code></pre></p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#modbus-register-table","title":"Modbus Register Table","text":"<p>You can find the available registers in the user manual.</p> <p>Modbus TCP \u2013 Holding Registers</p> Address Name R/W Description 4000 ThermostatL R/W Lower alarm threshold 4001 ThermostatH R/W Upper alarm threshold 4002 Alarm mode R/W 1 - OFF (disabled), 2 - Lower, 3 - Higher, 4 - Lower or Higher 4004 Temperature x10 R Temperature x 10 (np. 10,5 st.C to 105)"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#setup-modbuspal","title":"Setup ModbusPal","text":"<p>To simulate the sensor, do the following:</p> <ol> <li>Add mock device:     </li> <li> <p>Add registers according to the register table:     </p> </li> <li> <p>Add the ModbusPal support value auto-generator, which can bind to     the registers:      </p> </li> </ol>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#run-the-simulator","title":"Run the Simulator","text":"<p>Enable the value generator and click the <code>Run</code> button.</p> <p></p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#set-up-before-starting-services","title":"Set Up Before Starting Services","text":"<p>The following sections describe how to complete the set up before starting the services. If you prefer to start the services and then add the device, see Set Up After Starting Services</p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#create-a-custom-configuration-folder","title":"Create a Custom configuration folder","text":"<p>Run the following command: <pre><code>mkdir -p custom-config\n</code></pre></p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#set-up-device-profile","title":"Set Up Device Profile","text":"<p>Run the following command to create your device profile: <pre><code>cd custom-config\nnano temperature.profile.yml\n</code></pre></p> <p>Fill in the device profile according to the Modbus Register Table, as shown below: <pre><code>name: \"Ethernet-Temperature-Sensor\"\nmanufacturer: \"Audon Electronics\"\nmodel: \"Temperature\"\nlabels:\n- \"Web\"\n- \"Modbus TCP\"\n- \"SNMP\"\ndescription: \"The NANO_TEMP is a Ethernet Thermometer measuring from -55\u00b0C to 125\u00b0C with a web interface and Modbus TCP communications.\"\n\ndeviceResources:\n-\nname: \"ThermostatL\"\nisHidden: true\ndescription: \"Lower alarm threshold of the temperature\"\nattributes:\n{ primaryTable: \"HOLDING_REGISTERS\", startingAddress: 3999, rawType: \"Int16\" }\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"RW\"\nscale: \"0.1\"\n-\nname: \"ThermostatH\"\nisHidden: true\ndescription: \"Upper alarm threshold of the temperature\"\nattributes:\n{ primaryTable: \"HOLDING_REGISTERS\", startingAddress: 4000, rawType: \"Int16\" }\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"RW\"\nscale: \"0.1\"\n-\nname: \"AlarmMode\"\nisHidden: true\ndescription: \"1 - OFF (disabled), 2 - Lower, 3 - Higher, 4 - Lower or Higher\"\nattributes:\n{ primaryTable: \"HOLDING_REGISTERS\", startingAddress: 4001 }\nproperties:\nvalueType: \"Int16\"\nreadWrite: \"RW\"\n-\nname: \"Temperature\"\nisHidden: false\ndescription: \"Temperature x 10 (np. 10,5 st.C to 105)\"\nattributes:\n{ primaryTable: \"HOLDING_REGISTERS\", startingAddress: 4003, rawType: \"Int16\" }\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"R\"\nscale: \"0.1\"\n\ndeviceCommands:\n-\nname: \"AlarmThreshold\"\nreadWrite: \"RW\"\nisHidden: false\nresourceOperations:\n- { deviceResource: \"ThermostatL\" }\n- { deviceResource: \"ThermostatH\" }\n-\nname: \"AlarmMode\"\nreadWrite: \"RW\"\nisHidden: false\nresourceOperations:\n- { deviceResource: \"AlarmMode\", mappings: { \"1\":\"OFF\",\"2\":\"Lower\",\"3\":\"Higher\",\"4\":\"Lower or Higher\"} }\n</code></pre> In the Modbus protocol, we provide the following attributes:</p> <p>1.<code>primaryTable</code>: HOLDING_REGISTERS, INPUT_REGISTERS, COILS,     DISCRETES_INPUT</p> <p>2.<code>startingAddress</code> This attribute defines the zero-based startingAddress in Modbus device. For example, the GET command requests data from the Modbus address 4004 to get the temperature data, so the starting register address should be 4003.</p> Address Starting Address Name R/W Description 4004 4003 Temperature x10 R Temperature x 10 (np. 10,5 st.C to 105) <p>3.<code>IS_BYTE_SWAP</code>, <code>IS_WORD_SWAP</code>: To handle the different Modbus binary data order, we support Int32, Uint32, Float32 to do the swap operation before decoding the binary data.</p> <p>For example: <code>{ primaryTable: \"INPUT_REGISTERS\", startingAddress: \"4\", isByteSwap: \"false\", isWordSwap: \"true\" }</code></p> <p>4.<code>RAW_TYPE</code>: This attribute defines the binary data read from the Modbus device, then we can use the value type to indicate the data type that the user wants to receive.</p> <p>We only support <code>Int16</code> and <code>Uint16</code> for rawType. The corresponding value type must be <code>Float32</code> and <code>Float64</code>. For example: <pre><code>deviceResources:\n-\nname: \"Temperature\"\nisHidden: false\ndescription: \"Temperature x 10 (np. 10,5 st.C to 105)\"\nattributes:\n{ primaryTable: \"HOLDING_REGISTERS\", startingAddress: 4003, rawType: \"Int16\" }\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"R\"\nscale: \"0.1\"\n</code></pre></p> <p>In the device-modbus, the Property <code>valueType</code> decides how many registers will be read. Like Holding registers, a register has 16 bits. If the Modbus device's user manual specifies that a value has two registers, define it as <code>Float32</code> or <code>Int32</code> or <code>Uint32</code> in the deviceProfile.</p> <p>Once we execute a command, device-modbus knows its value type and register type, startingAddress, and register length. So it can read or write value using the modbus protocol.</p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#set-up-device-service-configuration","title":"Set Up Device Service Configuration","text":"<p>Run the following command to create your device configuration: <pre><code>cd custom-config\nnano device.config.toml\n</code></pre> Fill in the device.config.toml file, as shown below: <pre><code>[[DeviceList]]\nName = \"Modbus-TCP-Temperature-Sensor\"\nProfileName = \"Ethernet-Temperature-Sensor\"\nDescription = \"This device is a product for monitoring the temperature via the ethernet\"\nlabels = [ \"temperature\",\"modbus TCP\" ]\n[DeviceList.Protocols]\n[DeviceList.Protocols.modbus-tcp]\nAddress = \"172.17.0.1\"\nPort = \"502\"\nUnitID = \"1\"\nTimeout = \"5\"\nIdleTimeout = \"5\"\n[[DeviceList.AutoEvents]]\nInterval = \"30s\"\nOnChange = false\nSourceName = \"Temperature\"\n</code></pre></p> <p>The address <code>172.17.0.1</code> is point to the docker bridge network which means it can forward the request from docker network to the host.</p> <p>Use this configuration file to define devices and AutoEvent. Then the device-modbus will generate the relative instance on startup.</p> <p>The device-modbus offers two types of protocol, Modbus TCP and Modbus RTU, which can be defined as shown below:</p> protocol Name Protocol Address Port UnitID BaudRate DataBits StopBits Parity Timeout IdleTimeout Modbus TCP Gateway address TCP 10.211.55.6 502 1 5 5 Modbus RTU Gateway address RTU /tmp/slave 502 2 19200 8 1 N 5 5 <p>In the RTU protocol, Parity can be:</p> <ul> <li>N - None is 0</li> <li>O - Odd is 1 </li> <li>E - Even is 2, default is E</li> </ul>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#prepare-docker-compose-file","title":"Prepare docker-compose file","text":"<ol> <li>Clone edgex-compose <pre><code>$ git clone git@github.com:edgexfoundry/edgex-compose.git\n</code></pre></li> <li>Generate the docker-compose.yml file <pre><code>$ cd edgex-compose/compose-builder\n$ make gen ds-modbus\n</code></pre></li> </ol>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#add-custom-configuration-to-docker-compose-file","title":"Add Custom Configuration to docker-compose File","text":"<p>Add prepared configuration files to docker-compose file, you can mount them using volumes and change the environment for device-modbus internal use.</p> <p>Open the <code>docker-compose.yml</code> file and then add volumes path and environment as shown below: <pre><code> device-modbus:\n...\nenvironment:\n...\nDEVICE_DEVICESDIR: /custom-config\nDEVICE_PROFILESDIR: /custom-config\nvolumes:\n...\n- /path/to/custom-config:/custom-config\n</code></pre></p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#start-edgex-foundry-on-docker","title":"Start EdgeX Foundry on Docker","text":"<p>Since we generate the <code>docker-compose.yml</code> file at the previous step, we can deploy EdgeX as shown below: <pre><code>$ cd edgex-compose/compose-builder\n$ docker-compose up -d\nCreating network \"compose-builder_edgex-network\" with driver \"bridge\"\nCreating volume \"compose-builder_consul-acl-token\" with default driver\n...\nCreating edgex-core-metadata              ... done\nCreating edgex-core-command               ... done\nCreating edgex-core-data                  ... done\nCreating edgex-device-modbus              ... done\nCreating edgex-app-rules-engine           ... done\nCreating edgex-sys-mgmt-agent             ... done\n</code></pre></p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#set-up-after-starting-services","title":"Set Up After Starting Services","text":"<p>If the services are already running and you want to add a device, you can use the Core Metadata API as outlined in this section. If you set up the device profile and Service as described in Set Up Before Starting Services, you can skip this section.</p> <p>To add a device after starting the services, complete the following steps:</p> <ol> <li> <p>Upload the device profile above to metadata with a POST to     http://localhost:59881/api/v2/deviceprofile/uploadfile and add the     file as key \"file\" to the body in form-data format, and the created     ID will be returned. The following example command uses curl to send the request:</p> <pre><code>$ curl http://localhost:59881/api/v2/deviceprofile/uploadfile \\\n  -F \"file=@temperature.profile.yml\"\n</code></pre> </li> <li> <p>Ensure the Modbus device service is running, adjust the service name     below to match if necessary or if using other device services.</p> </li> <li> <p>Add the device with a POST to     http://localhost:59881/api/v2/device, the body will look something     like:     <pre><code>$ curl http://localhost:59881/api/v2/device -H \"Content-Type:application/json\" -X POST \\\n  -d '[\n        {\n            \"apiVersion\": \"v2\",\n            \"device\": {\n               \"name\" :\"Modbus-TCP-Temperature-Sensor\",\n               \"description\":\"This device is a product for monitoring the temperature via the ethernet\",\n               \"labels\":[ \n                  \"Temperature\",\n                  \"Modbus TCP\"\n               ],\n               \"serviceName\": \"device-modbus\",\n               \"profileName\": \"Ethernet-Temperature-Sensor\",\n               \"protocols\":{\n                  \"modbus-tcp\":{\n                     \"Address\" : \"172.17.0.1\",\n                     \"Port\" : \"502\",\n                     \"UnitID\" : \"1\",\n                     \"Timeout\" : \"5\",\n                     \"IdleTimeout\" : \"5\"\n                  }\n               },\n               \"autoEvents\":[ \n                  { \n                     \"Interval\":\"30s\",\n                     \"onChange\":false,\n                     \"SourceName\":\"Temperature\"\n                  }\n               ],\n               \"adminState\":\"UNLOCKED\",\n               \"operatingState\":\"UP\"\n            }\n        }\n    ]'\n</code></pre></p> <p>The service name must match/refer to the target device service, and the profile name must match the device profile name from the previous steps.</p> </li> </ol>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#execute-commands","title":"Execute Commands","text":"<p>Now we're ready to run some commands.</p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#find-executable-commands","title":"Find Executable Commands","text":"<p>Use the following query to find executable commands: <pre><code>$ curl http://localhost:59882/api/v2/device/all | json_pp\n\n{\n\"apiVersion\" : \"v2\",\n\"deviceCoreCommands\" : [\n{\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\",\n\"profileName\" : \"Ethernet-Temperature-Sensor\",\n\"coreCommands\" : [\n{\n\"url\" : \"http://edgex-core-command:59882\",\n\"name\" : \"AlarmThreshold\",\n\"get\" : true,\n\"set\" : true,\n\"parameters\" : [\n{\n\"valueType\" : \"Float32\",\n\"resourceName\" : \"ThermostatL\"\n},\n{\n\"valueType\" : \"Float32\",\n\"resourceName\" : \"ThermostatH\"\n}\n],\n\"path\" : \"/api/v2/device/name/Modbus-TCP-Temperature-Sensor/AlarmThreshold\"\n},\n{\n\"get\" : true,\n\"url\" : \"http://edgex-core-command:59882\",\n\"name\" : \"AlarmMode\",\n\"set\" : true,\n\"path\" : \"/api/v2/device/name/Modbus-TCP-Temperature-Sensor/AlarmMode\",\n\"parameters\" : [\n{\n\"resourceName\" : \"AlarmMode\",\n\"valueType\" : \"Int16\"\n}\n]\n},\n{\n\"get\" : true,\n\"url\" : \"http://edgex-core-command:59882\",\n\"name\" : \"Temperature\",\n\"path\" : \"/api/v2/device/name/Modbus-TCP-Temperature-Sensor/Temperature\",\n\"parameters\" : [\n{\n\"valueType\" : \"Float32\",\n\"resourceName\" : \"Temperature\"\n}\n]\n}\n]\n}\n],\n\"statusCode\" : 200\n}\n</code></pre></p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#execute-set-command","title":"Execute SET command","text":"<p>Execute SET command according to <code>url</code> and <code>parameterNames</code>, replacing [host] with the server IP when running the SET command.</p> <pre><code>$ curl http://localhost:59882/api/v2/device/name/Modbus-TCP-Temperature-Sensor/AlarmThreshold \\\n    -H \"Content-Type:application/json\" -X PUT  \\\n    -d '{\"ThermostatL\":\"15\",\"ThermostatH\":\"100\"}'\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#execute-get-command","title":"Execute GET command","text":"<p>Replace \\&lt;host&gt; with the server IP when running the GET command.</p> <pre><code>$ curl http://localhost:59882/api/v2/device/name/Modbus-TCP-Temperature-Sensor/AlarmThreshold | json_pp\n\n{\n\"statusCode\" : 200,\n\"apiVersion\" : \"v2\",\n\"event\" : {\n\"origin\" : 1624324686964377495,\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\",\n\"id\" : \"f3d44a0f-d2c3-4ef6-9441-ad6b1bfb8a9e\",\n\"sourceName\" : \"AlarmThreshold\",\n\"readings\" : [\n{\n\"resourceName\" : \"ThermostatL\",\n\"value\" : \"1.500000e+01\",\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\",\n\"id\" : \"9aa879a0-c184-476b-8124-34d35a2a51f3\",\n\"valueType\" : \"Float32\",\n\"mediaType\" : \"\",\n\"binaryValue\" : null,\n\"origin\" : 1624324686963970614,\n\"profileName\" : \"Ethernet-Temperature-Sensor\"\n},\n{\n\"value\" : \"1.000000e+02\",\n\"resourceName\" : \"ThermostatH\",\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\",\n\"id\" : \"bf7df23b-4338-4b93-a8bd-7abd5e848379\",\n\"valueType\" : \"Float32\",\n\"mediaType\" : \"\",\n\"binaryValue\" : null,\n\"origin\" : 1624324686964343768,\n\"profileName\" : \"Ethernet-Temperature-Sensor\"\n}\n],\n\"apiVersion\" : \"v2\",\n\"profileName\" : \"Ethernet-Temperature-Sensor\"\n}\n}\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#autoevent","title":"AutoEvent","text":"<p>The AutoEvent is defined in the [[DeviceList.AutoEvents]] section of the device configuration file: <pre><code>[[DeviceList.AutoEvents]]\nInterval = \"30s\"\nOnChange = false\nSourceName = \"Temperature\"\n</code></pre> After service startup, query core-data's API. The results show that the service auto-executes the command every 30 seconds.</p> <pre><code>$ curl http://localhost:59880/api/v2/event/device/name/Modbus-TCP-Temperature-Sensor | json_pp\n\n{\n\"events\" : [\n{\n\"readings\" : [\n{\n\"value\" : \"5.300000e+01\",\n\"binaryValue\" : null,\n\"origin\" : 1624325219186870396,\n\"id\" : \"68a66a35-d3cf-48a2-9bf0-09578267a3f7\",\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\",\n\"mediaType\" : \"\",\n\"valueType\" : \"Float32\",\n\"resourceName\" : \"Temperature\",\n\"profileName\" : \"Ethernet-Temperature-Sensor\"\n}\n],\n\"apiVersion\" : \"v2\",\n\"origin\" : 1624325219186977564,\n\"id\" : \"4b235616-7304-419e-97ae-17a244911b1c\",\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\",\n\"sourceName\" : \"Temperature\",\n\"profileName\" : \"Ethernet-Temperature-Sensor\"\n},\n{\n\"readings\" : [\n{\n\"profileName\" : \"Ethernet-Temperature-Sensor\",\n\"resourceName\" : \"Temperature\",\n\"valueType\" : \"Float32\",\n\"id\" : \"56b7e8be-7ce8-4fa9-89e2-3a1a7ef09050\",\n\"origin\" : 1624325189184675483,\n\"value\" : \"5.300000e+01\",\n\"binaryValue\" : null,\n\"mediaType\" : \"\",\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\"\n}\n],\n\"profileName\" : \"Ethernet-Temperature-Sensor\",\n\"sourceName\" : \"Temperature\",\n\"deviceName\" : \"Modbus-TCP-Temperature-Sensor\",\n\"id\" : \"fbab44f5-9775-4c09-84bd-cbfb00001115\",\n\"origin\" : 1624325189184721223,\n\"apiVersion\" : \"v2\"\n},\n...\n],\n\"apiVersion\" : \"v2\",\n\"statusCode\" : 200\n}\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#set-up-the-modbus-rtu-device","title":"Set up the Modbus RTU Device","text":"<p>This section describes how to connect the Modbus RTU device. We use Ubuntu OS and a Modbus RTU device for this example. </p> <ul> <li>Modbus RTU device: http://www.icpdas.com/root/product/solutions/remote_io/rs-485/i-7000_m-7000/i-7055.html</li> <li>User manual: http://ftp.icpdas.com/pub/cd/8000cd/napdos/7000/manual/7000dio.pdf</li> </ul>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#connect-the-device","title":"Connect the device","text":"<ol> <li> <p>Connect the device to your machine(laptop or gateway,etc.) via RS485/USB adaptor and power on.</p> </li> <li> <p>Execute a command on the machine, and you can find a message like the following:     <pre><code>$ dmesg | grep tty\n...\n...\n[18006.167625] usb 1-1: FTDI USB Serial Device converter now attached to ttyUSB0\n</code></pre></p> </li> <li> <p>It shows the USB attach to ttyUSB0, then you can check whether the device path exists:     <pre><code>$ ls /dev/ttyUSB0\n/dev/ttyUSB0\n</code></pre></p> </li> </ol>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#change-the-owner-of-the-device","title":"Change the Owner of the Device","text":"<p>For security reason, the EdgeX set up the user permission as below: <pre><code>  device-modbus:\n...\nuser: 2002:2001  # UID:GID\n</code></pre> So we need to change the owner for the specified group by the following command: <pre><code>sudo chown :2001 /dev/ttyUSB0\n\n# Or change the permissions for multiple files\nsudo chown :2001 /dev/tty*\n</code></pre></p> <p>Note</p> <p>Since the owner will reset after the system reboot, we can add this script to the startup script. For Raspberry Pi as example, add script to <code>/etc/rc.local</code>, then the Pi will run this script at bootup.</p>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#mont-the-device-path-to-the-docker-container","title":"Mont the Device Path to the Docker Container","text":"<p>Modify the docker-compose.yml file to mount the device path to the device-modbus, and here are two ways to mount the device path:</p> <ol> <li> <p>Using <code>devices</code>:     <pre><code>device-modbus:\n...\ndevices:\n- /dev/ttyUSB0\n</code></pre></p> </li> <li> <p>Or using <code>volumes</code> and <code>device_cgroup_rules</code>:     <pre><code>device-modbus:\n...\nvolumes:\n...\n- /dev:/dev\ndevice_cgroup_rules:\n- 'c 188:* rw' </code></pre></p> <ul> <li>c: character device</li> <li>188: device major number(188=USB)</li> <li>*: device minor number</li> <li>rw: read/write</li> </ul> </li> </ol>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#deploy-the-edgex","title":"Deploy the EdgeX","text":"<pre><code>$ docker-compose up -d\n</code></pre>"},{"location":"examples/Ch-ExamplesAddingModbusDevice/#add-device-to-edgex","title":"Add device to EdgeX","text":"<ol> <li>Create the device profile according to the register table     <pre><code>$ nano modbus.rtu.demo.profile.yml\n</code></pre> <pre><code>name: \"Modbus-RTU-IO-Module\"\nmanufacturer: \"icpdas\"\nmodel: \"M-7055\"\nlabels:\n- \"Modbus RTU\"\n- \"IO Module\"\ndescription: \"This IO module offers 8 isolated channels for digital input and 8 isolated channels for digital output.\"\n\ndeviceResources:\n-\nname: \"DO0\"\nisHidden: true\ndescription: \"On/Off , 0-OFF 1-ON\"\nattributes:\n{ primaryTable: \"COILS\", startingAddress: 0 }\nproperties:\nvalueType: \"Bool\"\nreadWrite: \"RW\"\n-\nname: \"DO1\"\nisHidden: true\ndescription: \"On/Off , 0-OFF 1-ON\"\nattributes:\n{ primaryTable: \"COILS\", startingAddress: 1 }\nproperties:\nvalueType: \"Bool\"\nreadWrite: \"RW\"\n-\nname: \"DO2\"\nisHidden: true\ndescription: \"On/Off , 0-OFF 1-ON\"\nattributes:\n{ primaryTable: \"COILS\", startingAddress: 2 }\nproperties:\nvalueType: \"Bool\"\nreadWrite: \"RW\"\n\ndeviceCommands:\n-\nname: \"DO\"\nreadWrite: \"RW\"\nisHidden: false\nresourceOperations:\n- { deviceResource: \"DO0\" }\n- { deviceResource: \"DO1\" }\n- { deviceResource: \"DO2\" }\n</code></pre></li> <li> <p>Upload the device profile     <pre><code>$ curl http://localhost:59881/api/v2/deviceprofile/uploadfile \\\n  -F \"file=@modbus.rtu.demo.profile.yml\"\n</code></pre></p> </li> <li> <p>Create the device entity to the EdgeX.     You can find the Modbus RTU setting on the device or the user manual.     <pre><code>$ curl http://localhost:59881/api/v2/device -H \"Content-Type:application/json\" -X POST \\\n-d '[\n{\n\"apiVersion\": \"v2\",\n\"device\": {\n\"name\" :\"Modbus-RTU-IO-Module\",\n\"description\":\"The device can be used to monitor the status of the digital input and digital output channels.\",\n\"labels\":[ \"IO Module\",\n\"Modbus RTU\"\n],\n\"serviceName\": \"device-modbus\",\n\"profileName\": \"Ethernet-Temperature-Sensor\",\n\"protocols\":{\n\"modbus-tcp\":{\n\"Address\" : \"/dev/ttyUSB0\",\n\"BaudRate\" : \"19200\",\n\"DataBits\" : \"8\",\n\"StopBits\" : \"1\",\n\"Parity\" : \"N\",\n\"UnitID\" : \"1\",\n\"Timeout\" : \"5\",\n\"IdleTimeout\" : \"5\"\n}\n},\n\"adminState\":\"UNLOCKED\",\n\"operatingState\":\"UP\"\n}\n}\n]'\n</code></pre></p> </li> <li>Test the GET or SET command</li> </ol>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/","title":"SNMP","text":"<p>EdgeX - Ireland Release</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#overview","title":"Overview","text":"<p>In this example, you add a new Patlite Signal Tower which communicates via SNMP.  This example demonstrates how to connect a device through the SNMP Device Service.</p> <p></p> <p>Patlite Signal Tower, model NHL-FB2</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#setup","title":"Setup","text":""},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#hardware-needed","title":"Hardware needed","text":"<p>In order to exercise this example, you will need the following hardware</p> <ul> <li>A computer able to run EdgeX Foundry</li> <li>A Patlite Signal Tower (NHL-FB2 model)</li> <li>Both the computer and Patlite must be connected to the same ethernet network</li> </ul>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#software-needed","title":"Software needed","text":"<p>In addition to the hardware, you will need the following software</p> <ul> <li>Docker</li> <li>Docker Compose</li> <li>EdgeX Foundry V2 (Ireland release)</li> <li>curl to run REST commands (you can also use a tool like Postman)</li> </ul> <p>If you have not already done so, proceed to Getting Started using Docker for how to get these tools and run EdgeX Foundry.</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#add-the-snmp-device-service-to-your-docker-composeyml","title":"Add the SNMP Device Service to your docker-compose.yml","text":"<p>The EdgeX docker-compose.yml file used to run EdgeX must include the SNMP device service for this example.  You can either:</p> <ul> <li>download and use the docker-compose.yml file provided with this example </li> <li>or use the EdgeX Compose Builder tool to create your own custom docker-compose.yml file adding device-snmp.</li> </ul> <p>See Getting Started using Docker if you need assistance running EdgeX once you have your Docker Compose file.</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#add-the-snmp-device-profile-and-device","title":"Add the SNMP Device Profile and Device","text":"<p>SNMP devices, like the Patlite Signal Tower, provide a set of managed objects to get and set property information on the associated device.  Each managed object has an address call an object identifier (or OID) that you use to interact with the SNMP device's managed object.  You use the OID to query the state of the device or to set properties on the device.  In the case of the Patlite, there are managed object for the colored lights and the buzzer of the device.  You can read the current state of a colored light (get) or turn the light on (set) by making a call to the proper OIDs for the associated managed object.</p> <p>For example, on the NH series signal towers used in this example, a \"get\" call to the <code>1.3.6.1.4.1.20440.4.1.5.1.2.1.4.1</code> OID returns the current state of the <code>Red</code> signal light.  A return value of 1 would signal the light is off.  A return value of 2 says the light is on.  A return value of 3 says the light is flashing.  Read this SNMP tutorial to learn more about the basics of the SNMP protocol.  See the Patlite NH Series User's Manual for more information on the SNMP OIDs and function calls and parameters needed for some requests.</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#add-the-patlite-device-profile","title":"Add the Patlite Device Profile","text":"<p>A device profile has been created for you to get and set the signal tower's three colored lights and to get and set the buzzer.  The <code>patlite-snmp</code> device profile defines three device resources for each of the lights and the buzzer.</p> <ul> <li>Current State, a read request device resource to get the current state of the requested light or buzzer</li> <li>Control State, a write request device resource to set the current state of the light or buzzer</li> <li>Timer, a write request device resource used in combination with the control state to set the state after the number of seconds provided by the timer resource</li> </ul> <p>Note that the attributes of each device resource specify the SNMP OID that the device service will use to make a request of the signal tower.  For example, the device resource YAML below (taken from the profile) provides the means to get the current <code>Red</code> light state.  Note that a specific OID is provided that is unique to the <code>RED</code> light, current state property.</p> <pre><code>-\nname: \"RedLightCurrentState\"\nisHidden: false\ndescription: \"red light current state\"\nattributes:\n{ oid: \"1.3.6.1.4.1.20440.4.1.5.1.2.1.4.1\", community: \"private\" }  properties:\nvalueType:  \"Int32\"\nreadWrite: \"R\"\ndefaultValue: \"1\"\n</code></pre> <p>Below is the device resource definitions for the <code>Red</code> light control state and timer.  Again, unique OIDs are provided as attributes for each property.</p> <pre><code>-\nname: \"RedLightControlState\"\nisHidden: true\ndescription: \"red light state\"\nattributes:\n{ oid: \"1.3.6.1.4.1.20440.4.1.5.1.2.1.2.1\", community: \"private\" }  properties:\nvalueType:  \"Int32\"\nreadWrite: \"W\"\ndefaultValue: \"1\"\n-\nname: \"RedLightTimer\"\nisHidden: true\ndescription: \"red light timer\"\nattributes:\n{ oid: \"1.3.6.1.4.1.20440.4.1.5.1.2.1.3.1\", community: \"private\" }  properties:\nvalueType:  \"Int32\"\nreadWrite: \"W\"\ndefaultValue: \"1\"\n</code></pre> <p>In order to set the <code>Red</code> light on, one would need to send an SNMP request to set OID <code>1.3.6.1.4.1.20440.4.1.5.1.2.1.2.1</code> to a value of 2 (on state) along with a number of seconds delay to the time at OID <code>1.3.6.1.4.1.20440.4.1.5.1.2.1.3.1</code>.  Sending a zero value (0) to the timer would say you want to turn the light on immediately.</p> <p>Because setting a light or buzzer requires both of the control state and timer OIDs to be set together (simultaneously), the device profile contains <code>deviceCommands</code> to set the light and timer device resources (and therefore their SNMP property OIDs) in a single operation.  Here is the device command to set the <code>Red</code> light.</p> <pre><code>-\nname: \"RedLight\"\nreadWrite: \"W\"\nisHidden: false\nresourceOperations:\n- { deviceResource: \"RedLightControlState\" }\n- { deviceResource: \"RedLightTimer\" }\n</code></pre> <p>You will need to upload this profile into core metadata.  Download the Patlite device profile to a convenient directory.  Then, using the following <code>curl</code> command, request the profile be uploaded into core metadata.</p> <pre><code>curl -X 'POST' 'http://localhost:59881/api/v2/deviceprofile/uploadfile' --form 'file=@\"/home/yourfilelocationhere/patlite-snmp.yml\"'\n</code></pre> <p>Alert</p> <p>Note that the curl command above assumes that core metadata is available at <code>localhost</code>.  Change <code>localhost</code> to the host address of your core metadata service. Also note that you will need to replace the <code>/home/yourfilelocationhere</code> path with the path where the profile resides.</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#add-the-patlite-device","title":"Add the Patlite Device","text":"<p>With the Patlite device profile now in metadata, you can add the Patlite device in metadata.  When adding the device, you typically need to provide the name, description, labels and admin/op states of the device when creating it.  You will also need to associate the device to a device service (in this case the <code>device-snmp</code> device service).  You will ned to associate the new device to a profile - the patlite profile just added in the step above.  And you will need to provide the protocol information (such as the address and port of the device) to tell the device service where it can find the physical device.  If you wish the device service to automatically get readings from the device, you will also need to provide AutoEvent properties when creating the device.</p> <p>The curl command to POST the new Patlite device (named <code>patlite1</code>) into metadata is provide below.  You will need to change the protocol <code>Address</code> (currently <code>10.0.0.14</code>) and <code>Port</code> (currently <code>161</code>) to point to your Patlite on your network.  In this request to add a new device, AutoEvents are setup to collect the current state of the 3 lights and buzzer every 10 seconds. Notice the reference to the current state device resources in setting up the AutoEvents.</p> <pre><code>curl -X 'POST' 'http://localhost:59881/api/v2/device' -d '[{\"apiVersion\": \"v2\", \"device\": {\"name\": \"patlite1\",\"description\": \"patlite #1\",\"adminState\": \"UNLOCKED\",\"operatingState\": \"UP\",\"labels\": [\"patlite\"],\"serviceName\": \"device-snmp\",\"profileName\": \"patlite-snmp-profile\",\"protocols\": {\"TCP\": {\"Address\": \"10.0.0.14\",\"Port\": \"161\"}}, \"AutoEvents\":[{\"Interval\":\"10s\",\"OnChange\":true,\"SourceName\":\"RedLightCurrentState\"}, {\"Interval\":\"10s\",\"OnChange\":true,\"SourceName\":\"GreenLightCurrentState\"}, {\"Interval\":\"10s\",\"OnChange\":true,\"SourceName\":\"AmberLightCurrentState\"}, {\"Interval\":\"10s\",\"OnChange\":true,\"SourceName\":\"BuzzerCurrentState\"}]}}]'\n</code></pre> <p>Info</p> <p>Rather than making a REST API call into metadata to add the device, you could alternately provide device configuration files that define the device.  These device configuration files would then have to be provided to the service when it starts up.  Since you did not create a new Docker image containing the device configuration and just used the existing SNMP device service Docker image, it was easier to make simple API calls to add the profile and device.  However, this would mean the profile and device would need to be added each time metadata's database is cleaned out and reset.</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#test","title":"Test","text":"<p>If the device service is up and running and the profile and device have been added correctly, you should now be able to interact with the Patlite via the core command service (and SNMP under the covers via the SNMP device service).</p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#get-the-current-state","title":"Get the Current State","text":"<p>To get the current state of a light (in the example below the <code>Green</code> light), make a curl request like the following of the command service.</p> <pre><code>curl 'http://localhost:59882/api/v2/device/name/patlite1/GreenLightCurrentState' | json_pp\n</code></pre> <p>Alert</p> <p>Note that the curl command above assumes that the core command service is available at <code>localhost</code>.  Change the host address of your core command service if it is not available at <code>localhost</code>.  </p> <p>The results should look something like that below.</p> <pre><code>{\n\"statusCode\" : 200,\n\"apiVersion\" : \"v2\",\n\"event\" : {\n\"origin\" : 1632188382048586660,\n\"deviceName\" : \"patlite1\",\n\"sourceName\" : \"GreenLightCurrentState\",\n\"id\" : \"1e2a7ba1-c273-46d1-b919-207aafbc60ba\",\n\"profileName\" : \"patlite-snmp-profile\",\n\"apiVersion\" : \"v2\",\n\"readings\" : [\n{\n\"origin\" : 1632188382048586660,\n\"resourceName\" : \"GreenLightCurrentState\",\n\"deviceName\" : \"patlite1\",\n\"id\" : \"a41ac1cf-703b-4572-bdef-8487e9a7100e\",\n\"valueType\" : \"Int32\",\n\"value\" : \"1\",\n\"profileName\" : \"patlite-snmp-profile\"\n}\n]\n}\n}\n</code></pre> <p>Info</p> <p>Note the <code>value</code> will be one of 4 numbers indicating the current state of the light</p> Value Description 1 Off 2 On - solid and not flashing 3 Flashing on 4 Flashing quickly on"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#set-a-light-or-buzzer-on","title":"Set a light or buzzer on","text":"<p>To turn a signal tower light or the buzzer on, you can issue a PUT device command via the core command service.  The example below turns on the <code>Green</code> light.</p> <pre><code>curl --location --request PUT 'http://localhost:59882/api/v2/device/name/patlite1/GreenLight' --header 'cont: application/json' --data-raw '{\"GreenLightControlState\":\"2\",\"GreenLightTimer\":\"0\"}'\n</code></pre> <p></p> <p>This command sets the light on (solid versus flashing) immediate (as denoted by the GreenLightTimer parameter is set to 0).  The timer value is the number of seconds delay in making the request to the light or buzzer.  Again, the control state can be set to one of four values as listed in the table above. </p> <p>Alert</p> <p>Again note that the curl command above assumes that the core command service is available at <code>localhost</code>.  Change the host address of your core command service if it is not available at <code>localhost</code>. </p>"},{"location":"examples/Ch-ExamplesAddingSNMPDevice/#observations","title":"Observations","text":"<p>Did you notice that EdgeX obfuscates almost all information about SNMP, and managed objects and OIDs?  The power of EdgeX is to abstract away protocol differences so that to a user, getting data from a device or setting properties on a device such as this Patlite signal tower is as easy as making simple REST calls into the command service.  The only place that protocol information is really seen is in the device profile (where the attributes specify the SNMP OIDs).  Of course, the device service must be coded to deal with the protocol specifics and it must know how to translate the simple command REST calls into protocol specific requests of the device.  But even device service creation is made easier with the use of the SDKs which provide much of the boilerplate code found in almost every device service regardless of the underlying device protocol.</p>"},{"location":"examples/Ch-ExamplesModbusdatatypeconversion/","title":"Modbus - Data Type Conversion","text":"<p>In use cases where the device resource uses an integer data type with a float scale, precision can be lost following transformation.</p> <p>For example, a Modbus device stores the temperature and humidity in an Int16 data type with a float scale of 0.01. If the temperature is 26.53, the read value is 2653. However, following transformation, the value is 26.</p> <p>To avoid this scenario, the device resource data type must differ from the value descriptor data type. This is achieved using the optional <code>rawType</code> attribute in the device profile to define the binary data read from the Modbus device, and a <code>valueType</code> to indicate what data type the user wants to receive.</p> <p>If the <code>rawType</code> attribute exists, the device service parses the binary data according to the defined <code>rawType</code>, then casts the value according to the <code>valueType</code> defined in the <code>properties</code> of the device resources.</p> <p>The following extract from a device profile defines the <code>rawType</code> as Int16 and the <code>valueType</code> as Float32:</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the device profile has many changes. Please see Device Profile section for more details.</p> <p>Example - Device Profile</p> <pre><code>deviceResources:\n- name: \"humidity\"\ndescription: \"The response value is the result of the original value multiplied by 100.\"\nattributes:\n{ primaryTable: \"HOLDING_REGISTERS\", startingAddress: \"1\", rawType: \"Int16\" }\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"R\"\nscale: \"0.01\"\nunits: \"%RH\"\n\n- name: \"temperature\"\ndescription: \"The response value is the result of the original value multiplied by 100.\"\nattributes:\n{ primaryTable: \"HOLDING_REGISTERS\", startingAddress: \"2\", rawType: \"Int16\" }\nproperties:\nvalueType: \"Float32\"\nreadWrite: \"R\"\nscale: \"0.01\"\nunits: \"degrees Celsius\"\n</code></pre>"},{"location":"examples/Ch-ExamplesModbusdatatypeconversion/#read-command","title":"Read Command","text":"<p>A Read command is executed as follows:</p> <ol> <li>The device service executes the Read command to read binary data</li> <li>The binary reading data is parsed as an Int16 data type</li> <li>The integer value is cast to a Float32 value</li> </ol> <p></p>"},{"location":"examples/Ch-ExamplesModbusdatatypeconversion/#write-command","title":"Write Command","text":"<p>A Write command is executed as follows:</p> <ol> <li>The device service cast the requested Float32 value to an integer     value</li> <li>The integer value is converted to binary data</li> <li>The device service executes the Write command</li> </ol> <p></p>"},{"location":"examples/Ch-ExamplesModbusdatatypeconversion/#when-to-transform-data","title":"When to Transform Data","text":"<p>You generally need to transform data when scaling readings between a 16-bit integer and a float value.</p> <p>The following limitations apply:</p> <ul> <li><code>rawType</code> supports only Int16 and Uint16 data types</li> <li>The corresponding <code>valueType</code> must be Float32 or Float64</li> </ul> <p>If an unsupported data type is defined for the <code>rawType</code> attribute, the device service throws an exception similar to the following:</p> <pre><code>Read command failed. Cmd:temperature err:the raw type Int32 is not supported\n</code></pre>"},{"location":"examples/Ch-ExamplesModbusdatatypeconversion/#supported-transformations","title":"Supported Transformations","text":"<p>The supported transformations are as follows:</p> From <code>rawType</code> To <code>valueType</code> Int16 Float32 Int16 Float64 Uint16 Float32 Uint16 Float64"},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/","title":"Sending and Consuming Binary Data From EdgeX Device Services","text":"<p>EdgeX - Ireland Release</p>"},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/#overview","title":"Overview","text":"<p>In this example, we will demonstrate how to send EdgeX Events and Readings that contain arbitrary binary data.</p>"},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/#deviceservice-implementation","title":"DeviceService Implementation","text":""},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/#device-profile","title":"Device Profile","text":"<p>To indicate that a deviceResource represents a Binary type, the following format is used:</p> <pre><code>deviceResources:\n-\nname: \"camera_snapshot\"\nisHidden: false\ndescription: \"snapshot from camera\"\nproperties:\nvalueType: \"Binary\"\nreadWrite: \"R\"\nmediaType: \"image/jpeg\"\ndeviceCommands:\n-\nname: \"OnvifSnapshot\"\nisHidden: false\nreadWrite: \"R\"\nresourceOperations:\n- { deviceResource: \"camera_snapshot\" }\n</code></pre>"},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/#device-service","title":"Device Service","text":"<p>Here is a snippet from a hypothetical Device Service's <code>HandleReadCommands()</code> method that produces an event that represents a JPEG image captured from a camera:</p> <pre><code>if req.DeviceResourceName == \"camera_snapshot\" {\ndata, err := cameraClient.GetSnapshot() // returns ([]byte, error)\ncheck(err)\n\ncv, err := sdkModels.NewCommandValue(reqs[i].DeviceResourceName, common.ValueTypeBinary, data)\ncheck(err)\n\nresponses[i] = cv\n}\n</code></pre>"},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/#calling-device-service-command","title":"Calling Device Service Command","text":"<p>Querying core-metadata for the Device's Commands and DeviceName provides the following as the URL to request a reading from the snapshot command: http://localhost:59990/api/v2/device/name/camera-device/OnvifSnapshot</p> <p>Unlike with non-binary Events, making a request to this URL will return an event in CBOR representation. CBOR is a representation of binary data loosely based off of the JSON data model. This Event will not be human-readable.</p>"},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/#parsing-cbor-encoded-events","title":"Parsing CBOR Encoded Events","text":"<p>To access the data enclosed in these Events and Readings, they will first need to be decoded from CBOR. The following is a simple Go program that reads in the CBOR response from a file containing the response from the previous HTTP request. The Go library recommended for parsing these events can be found at https://github.com/fxamacker/cbor/</p> <pre><code>package main\n\nimport (\n\"io/ioutil\"\n\n\"github.com/edgexfoundry/go-mod-core-contracts/v2/dtos/requests\"\n\"github.com/fxamacker/cbor/v2\"\n)\n\nfunc check(e error) {\nif e != nil {\npanic(e)\n}\n}\n\nfunc main() {\n// Read in our cbor data\nfileBytes, err := ioutil.ReadFile(\"/Users/johndoe/Desktop/image.cbor\")\ncheck(err)\n\n// Decode into an EdgeX Event\neventRequest := &amp;requests.AddEventRequest{}\nerr = cbor.Unmarshal(fileBytes, eventRequest)\ncheck(err)\n\n// Grab binary data and write to a file\nimgBytes := eventRequest.Event.Readings[0].BinaryValue\nioutil.WriteFile(\"/Users/johndoe/Desktop/image.jpeg\", imgBytes, 0644)\n}\n</code></pre> <p>In the code above, the CBOR data is read into a byte array , an EdgeX Event struct is created,  and <code>cbor.Unmarshal</code> parses the CBOR-encoded data and stores the result in the Event struct.  Finally, the binary payload is written to a file from the <code>BinaryValue</code> field of the Reading.</p> <p>This method would work as well for decoding Events off the EdgeX message bus.</p>"},{"location":"examples/Ch-ExamplesSendingAndConsumingBinary/#encoding-arbitrary-structures-in-events","title":"Encoding Arbitrary Structures in Events","text":"<p>The Device SDK's <code>NewCommandValue()</code> function above only accepts a byte slice as binary data. Any arbitrary Go structure can be encoded in a binary reading by first encoding the structure into a byte slice using CBOR. The following illustrates this method:</p> <pre><code>// DeviceService HandleReadCommands() code:\nfoo := struct {\nX int\nY int\nZ int\nBar string\n} {\nX: 7,\nY: 3,\nZ: 100,\nBar: \"Hello world!\",\n}\n\ndata, err := cbor.Marshal(&amp;foo)\ncheck(err)\n\ncv, err := sdkModels.NewCommandValue(reqs[i].DeviceResourceName, common.ValueTypeBinary, data)\nresponses[i] = cv\n</code></pre> <p>This code takes the anonymous struct with fields X, Y, Z, and Bar (of different types) and serializes it into a byte slice using the same <code>cbor</code> library, and passing the output to <code>NewCommandValue()</code>.</p> <p>When consuming these events, another level of decoding will need to take place to get the structure out of the binary payload.</p> <pre><code>func main() {\n// Read in our cbor data\nfileBytes, err := ioutil.ReadFile(\"/Users/johndoe/Desktop/foo.cbor\")\ncheck(err)\n\n// Decode into an EdgeX Event\neventRequest := &amp;requests.AddEventRequest{}\nerr = cbor.Unmarshal(fileBytes, eventRequest)\ncheck(err)\n\n// Decode into arbitrary type\nfoo := struct {\nX   int\nY   int\nZ   int\nBar string\n}{}\n\nerr = cbor.Unmarshal(eventRequest.Event.Readings[0].BinaryValue, &amp;foo)\ncheck(err)\nfmt.Println(foo)\n}\n</code></pre> <p>This code takes a command response in the same format as the previous example, but uses the <code>cbor</code> library to decode the CBOR data inside the EdgeX Reading's <code>BinaryValue</code> field.</p> <p>Using this approach, an Event can be sent containing data containing an arbitrary, flexible structure. Use cases could be a Reading containing multiple images, a variable length list of integer read-outs, etc.</p>"},{"location":"examples/Ch-ExamplesVirtualDeviceService/","title":"Using the Virtual Device Service","text":""},{"location":"examples/Ch-ExamplesVirtualDeviceService/#overview","title":"Overview","text":"<p>The Virtual Device Service GO can simulate different kinds of devices to generate Events and Readings to the Core Data Micro Service. Furthermore, users can send commands and get responses through the Command and Control Micro Service. The Virtual Device Service allows you to execute functional or performance tests without any real devices. This version of the Virtual Device Service is implemented based on Device SDK GO, and uses ql (an embedded SQL database engine) to simulate virtual resources.</p>"},{"location":"examples/Ch-ExamplesVirtualDeviceService/#introduction","title":"Introduction","text":"<p>For information on the virtual device service see virtual device under the Microservices tab.</p>"},{"location":"examples/Ch-ExamplesVirtualDeviceService/#working-with-the-virtual-device-service","title":"Working with the Virtual Device Service","text":""},{"location":"examples/Ch-ExamplesVirtualDeviceService/#running-the-virtual-device-service-container","title":"Running the Virtual Device Service Container","text":"<p>The virtual device service depends on the EdgeX core services. By default, the virtual device service is part of the EdgeX community provided Docker Compose files.  If you use one of the community provide Compose files, you can pull and run EdgeX inclusive of the virtual device service without having to make any changes.</p>"},{"location":"examples/Ch-ExamplesVirtualDeviceService/#running-the-virtual-device-service-natively-in-development-mode","title":"Running the Virtual Device Service Natively (in development mode)","text":"<p>If you're going to download the source code and run the virtual device service in development mode, make sure that the EdgeX core service containers are up before starting the virtual device service.  See how to work with EdgeX in a hybrid environment in order to run the virtual device service outside of containers.  This same file will instruct you on how to get and run the virtual device service code.</p>"},{"location":"examples/Ch-ExamplesVirtualDeviceService/#get-command-example","title":"GET command example","text":"<p>The virtual device service is configured to send simulated data to core data every few seconds (from 10-30 seconds depending on device - see the device configuration file for AutoEvent details).  You can exercise the <code>GET</code> request on the command service to see the generated value produced by any of the virtual device's simulated devices.  Use the curl command below to exercise the virtual device service API (via core command service).</p> <pre><code>curl -X GET localhost:59882/api/v2/device/name/Random-Integer-Device/Int8`\n</code></pre> <p>Warning</p> <p>The example above assumes your core command service is available on <code>localhost</code> at the default service port of 59882.  Also, you must replace your device name and command name in the example above with your virtual device service's identifiers.  If you are not sure of the identifiers to use, query the command service for the full list of commands and devices at <code>http://localhost:59882/api/v2/device/all</code>.</p> <p>The virtual device should respond (via the core command service) with event/reading JSON similar to that below. <pre><code>{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"event\": {\n\"apiVersion\": \"v2\",\n\"id\": \"3beb5b83-d923-4c8a-b949-c1708b6611c1\",\n\"deviceName\": \"Random-Integer-Device\",\n\"profileName\": \"Random-Integer-Device\",\n\"sourceName\": \"Int8\",\n\"origin\": 1626227770833093400,\n\"readings\": [\n{\n\"id\": \"baf42bc7-307a-4647-8876-4e84759fd2ba\",\n\"origin\": 1626227770833093400,\n\"deviceName\": \"Random-Integer-Device\",\n\"resourceName\": \"Int8\",\n\"profileName\": \"Random-Integer-Device\",\n\"valueType\": \"Int8\",\n\"binaryValue\": null,\n\"mediaType\": \"\",\n\"value\": \"-5\"\n}\n]\n}\n}\n</code></pre></p>"},{"location":"examples/Ch-ExamplesVirtualDeviceService/#put-command-example-assign-a-value-to-a-resource","title":"PUT command example - Assign a value to a resource","text":"<p>The virtual devices managed by the virtual device can also be actuated.  The virtual device can be told to enable or disable random number generation.  When disabled, the virtual device services can be told what value to respond with for all <code>GET</code> operations.  When setting the fixed value, the value must be valid for the data type of the virtual device. For example, the minimum value of Int8 cannot be less than -128 and the maximum value cannot be greater than 127.</p> <p>Below is example actuation of one of the virtual devices.  In this example, it sets the fixed <code>GET</code> return value to 123 and turns off random generation.</p> <pre><code>curl -X PUT -d '{\"Int8\": \"123\", \"EnableRandomization_Int8\": \"false\"}' localhost:59882/api/v2/device/name/Random-Integer-Device/Int8\n</code></pre> <p>Note</p> <p>The value of the resource's EnableRandomization property is simultaneously updated to false when sending a put command to assign a specified value to the resource.  Therefore, the need to set EnableRandomization_Int8 to false is not actually required in the call above </p> <p>Return the virtual device to randomly generating numbers with another <code>PUT</code> call.</p> <pre><code>curl -X PUT -d '{\"EnableRandomization_Int8\": \"true\"}' localhost:59882/api/v2/device/name/Random-Integer-Device/Int8\n</code></pre>"},{"location":"examples/Ch-ExamplesVirtualDeviceService/#reference","title":"Reference","text":""},{"location":"examples/Ch-ExamplesVirtualDeviceService/#architectural-diagram","title":"Architectural Diagram","text":""},{"location":"examples/Ch-ExamplesVirtualDeviceService/#sequence-diagram","title":"Sequence Diagram","text":""},{"location":"examples/Ch-ExamplesVirtualDeviceService/#virtual-resource-table-schema","title":"Virtual Resource Table Schema","text":"Column Type DEVICE_NAME STRING COMMAND_NAME STRING DEVICE_RESOURCE_NAME STRING ENABLE_RANDOMIZATION BOOL DATA_TYPE STRING VALUE STRING"},{"location":"general/ContainerNames/","title":"EdgeX Container Names","text":"<p>The following table provides the list of the default EdgeX Docker image names to the Docker container name and Docker Compose names.</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the EdgeX docker image names have been simplified and made consistent across all EdgeX services.</p> CoreSupportingApplication &amp; AnalyticsDeviceSecurityMiscellaneous Docker image name Docker container name Docker network hostname Docker Compose service name edgexfoundry/core-data edgex-core-data edgex-core-data data edgexfoundry/core-metadata edgex-core-metadata edgex-core-metadata metadata edgexfoundry/core-command edgex-core-command edgex-core-command command Docker image name Docker container name Docker network hostname Docker Compose service name edgexfoundry/support-notifications edgex-support-notifications edgex-support-notifications notifications edgexfoundry/support-scheduler edgex-support-scheduler edgex-support-scheduler scheduler Docker image name Docker container name Docker network hostname Docker Compose service name edgexfoundry/app-service-configurable edgex-app-rules-engine edgex-app-rules-engine app-service-rules edgexfoundry/app-service-configurable edgex-app-http-export edgex-app-http-export app-service-http-export edgexfoundry/app-service-configurable edgex-app-mqtt-export edgex-app-mqtt-export app-service-mqtt-export emqx/kuiper edgex-kuiper edgex-kuiper rulesengine Docker image name Docker container name Docker network hostname Docker Compose service name edgexfoundry/device-virtual edgex-device-virtual edgex-device-virtual device-virtual edgexfoundry/device-mqtt edgex-device-mqtt edgex-device-mqtt device-mqtt edgexfoundry/device-rest edgex-device-rest edgex-device-rest device-rest edgexfoundry/device-modbus edgex-device-modbus edgex-device-modbus device-modbus edgexfoundry/device-snmp edgex-device-snmp edgex-device-snmp device-snmp edgexfoundry/device-bacnet edgex-device-bacnet edgex-device-bacnet device-bacnet edgexfoundry/device-camera edgex-device-camera edgex-device-camera device-camera edgexfoundry/device-grove edgex-device-grove edgex-device-grove device-grove edgexfoundry/device-coap edgex-device-coap edgex-device-coap device-coap Docker image name Docker container name Docker network hostname Docker Compose service name vault edgex-vault edgex-vault vault postgress edgex-kong-db edgex-kong-db kong-db kong edgex-kong edgex-kong kong edgexfoundry/security-proxy-setup edgex-security-proxy-setup edgex-security-proxy-setup proxy-setup edgexfoundry/security-secretstore-setup edgex-security-secretstore-setup edgex-security-secretstore-setup secretstore-setup edgexfoundry/security-bootstrapper edgex-security-bootstrapper edgex-security-bootstrapper security-bootstrapper Docker image name Docker container name Docker network hostname Docker Compose service name consul edgex-core-consul edgex-core-consul consul redis edgex-redis edgex-redis database edgexfoundry/sys-mgmt-agent edgex-sys-mgmt-agent edgex-sys-mgmt-agent system"},{"location":"general/Definitions/","title":"Definitions","text":"<p>The following glossary provides terms used in EdgeX Foundry.  The definition are based on how EdgeX and its community use the term versus any strict technical or industry definition.</p>"},{"location":"general/Definitions/#actuate","title":"Actuate","text":"<p>To cause a machine or device to operate.  In EdgeX terms, to command a device or sensor under management of EdgeX to do something (example: stop a motor) or to reconfigure itself (example: set a thermostat's cooling point).</p>"},{"location":"general/Definitions/#brownfield-and-greenfield","title":"Brownfield and Greenfield","text":"<p>Brownfield refers to older legacy equipment (nodes, devices, sensors) in an edge/IoT deployment, which typically uses older protocols.  Greenfield refers to, typically, new equipment with modern protocols.</p>"},{"location":"general/Definitions/#cbor","title":"CBOR","text":"<p>An acronym for \"concise binary object representation.\"  A binary data serialization format used by EdgeX to transport binary sensed data (like an image).  The user can also choose to send all data via CBOR for efficiency purposes, but at the expense of having EdgeX convert the CBOR into another format whenever the data needs to be understood and inspected or to persist the data. </p>"},{"location":"general/Definitions/#containerized","title":"Containerized","text":"<p>EdgeX micro services and infrastructure (i.e. databases, registry, etc.) are built as executable programs, put into Docker images, and made available via Docker Hub (and Nexus repository for nightly builds).  A service (or infrastructure element) that is available in Docker Hub (or Nexus) is said to be containerized.  Docker images can be quickly downloaded and new Docker containers created from the images.</p>"},{"location":"general/Definitions/#contributordeveloper","title":"Contributor/Developer","text":"<p>If you want to change, add to or at least build the existing EdgeX code base, then you are a \"Developer\". \"Contributors\" are developers that further wish to contribute their code back into the EdgeX open source effort.</p>"},{"location":"general/Definitions/#created-time-stamp","title":"Created time stamp","text":"<p>The Created time stamp is the time the data was created in the database and is unchangeable. The Origin time stamp is the time the data is created on the device, device services, sensor, or object that collected the data before the data was sent to EdgeX Foundry and the database.</p> <p>Usually, the Origin and Created time stamps are the same, or very close to being the same. On occasion the sensor may be a long way from the gateway or even in a different time zone, and the Origin and Created time stamps may be quite different.</p> <p>If persistence is disable in core-data, the time stamp will default to 0.</p>"},{"location":"general/Definitions/#device","title":"Device","text":"<p>In EdgeX parlance, \"device\" is used to refer to a sensor, actuator, or IoT \"thing\".  A sensor generally collects information from the physical world - like a temperature or vibration sensor.  Actuators are machines that can be told to do something.  Actuators move or otherwise control a mechanism or system - like a value on a pump.  While there may be some technical differences, for the purposes of EdgeX documentation, device will refer to a sensor, actuator or \"thing\".</p>"},{"location":"general/Definitions/#edge-analytics","title":"Edge Analytics","text":"<p>The terms edge or local analytics (the terms are used interchangeably and have the same meaning in this context) for the purposes of edge computing (and EdgeX), refers to an \u201canalytics\u201d service is that: - Receives and interprets the EdgeX sensor data to some degree; some analytics services are more sophisticated and able to provide more insights than others - Make determinations on what actions and actuations need to occur based on the insights it has achieved, thereby driving actuation requests to EdgeX associated devices or other services (like notifications)</p> <p>The analytics service could be some simple logic built into an app service, a rules engine package, or an agent of some artificial intelligence/machine learning system.  From an EdgeX perspective, actionable intelligence generation is all the same.  From an EdgeX perspective, edge analytics = seeing the edge data and be able to make requests to act on what is seen.  While EdgeX provides a rules engine service as its reference implementation of local analytics, app services and its data preparation capability allow sensor data to be streamed to any analytics package.</p> <p>Because of EdgeX\u2019s micro service architecture and distributed nature, the analytics service would not necessarily have to run local to the devices / sensors.  In other words, it would not have to run at the edge.  App services could deliver the edge data to analytics living in the cloud.  However, in these scenarios, the insight intelligence would not be considered local or edge in context.  Because of latency concerns, data security and privacy needs, intermittent connectivity of edge systems, and other reasons, it is often vital for edge platforms to retain an analytic capability at the edge or local.</p>"},{"location":"general/Definitions/#gateway","title":"Gateway","text":"<p>An IoT gateway is a compute platform at the farthest ends of an edge or IoT network.  It is the host or \u201cbox\u201d to which physical sensors and devices connect and that is, in turn, connected to the networks (wired or wirelessly) of the information technology realm.</p> <p></p> <p>IoT or edge gateways are compute platforms that connect \u201cthings\u201d (sensors and devices) to IT networks and systems.</p>"},{"location":"general/Definitions/#micro-service","title":"Micro service","text":"<p>In a micro service architecture, each component has its own process.  This is in contrast to a monolithic architecture in which all components of the application run in the same process.</p> <p></p> <p>Benefits of micro service architectures include: - Allow any one service to be replaced and upgraded more easily - Allow services to be programmed using different programming languages and underlying technical solutions (use the best technology for each specific service)     - Ex: services written in C can communicate and work with services written in Go - This allows organizations building solutions to maximize available developer resources and some legacy code - Allow services to be distributed across host compute platforms - allowing better utilization of available compute resources - Allow for more scalable solutions by adding copies of services when needed</p>"},{"location":"general/Definitions/#origin-time-stamp","title":"Origin time stamp","text":"<p>The Origin time stamp is the time the data is created on the device, device services, sensor, or object that collected the data before the data is sent to EdgeX Foundry and the database. The Created time stamp is the time the data was created in the database.</p> <p>Usually, the Origin and Created time stamps are the same or very close to the same. On occasion the sensor may be a long way from the gateway or even in a different time zone, and the Origin and Created time stamps may be quite different.</p>"},{"location":"general/Definitions/#reference-implementation","title":"Reference Implementation","text":"<p>Default and example implementation(s) offered by the EdgeX community.  Other implementations may be offered by 3rd parties or for specialization.</p>"},{"location":"general/Definitions/#resource","title":"Resource","text":"<p>A piece of information or data available from a sensor or \"thing\".  For example, a thermostat would have temperature and humidity resources.  A resource has a name (ResourceName) to identify it (\"temperature\" or \"humidity\" in this example) and a value (the sensed data - like 72 degrees).  A resource may also have additional properties or attributes associated with it.  The data type of the value (e.g., integer, float, string, etc.) would be an example of a resource property.</p>"},{"location":"general/Definitions/#rules-engine","title":"Rules Engine","text":"<p>Rules engines are important to the IoT edge system.</p> <p>A rules engine is a software system that is connected to a collection of data (either database or data stream). The rules engine examines various elements of the data and monitors the data, and then triggers some action based on the results of the monitoring of the data it. </p> <p>A rules engine is a collection of \"If-Then\" conditional statements. The \"If\" informs the rules engine what data to look at and what ranges or values of data must match in order to trigger the \"Then\" part of the statement, which then informs the rules engine what action to take or what external resource to call on, when the data is a match to the \"If\" statement. </p> <p>Most rules engines can be dynamically programmed meaning that new \"If-Then\" statements or rules, can be provided while the engine is running. The rules are often defined by some type of rule language with simple syntax to enable non-Developers to provide the new rules.</p> <p>Rules engines are one of the simplest forms of \"edge analytics\" provided in IoT systems. Rules engines enable data picked up by IoT sensors to be monitored and acted upon (actuated). Typically, the actuation is accomplished on another IoT device or sensor. For example, a temperature sensor in an equipment enclosure may be monitored by a rules engine to detect when the temperature is getting too warm (or too cold) for safe or optimum operation of the equipment. The rules engine, upon detecting temperatures outside of the acceptable range, shuts off the equipment in the enclosure.</p>"},{"location":"general/Definitions/#software-development-kit","title":"Software Development Kit","text":"<p>In EdgeX, a software development kit (or SDK) is a library or module to be incorporated into a new micro service.  It provides a lot of the boilerplate code and scaffolding associated with the type of service being created.  The SDK allows the developer to focus on the details of the service functionality and not have to worry about the mundane tasks associated with EdgeX services.</p>"},{"location":"general/Definitions/#south-and-north-side","title":"South and North Side","text":"<p>South Side: All IoT objects, within the physical realm, and the edge of the network that communicates directly with those devices, sensors,  actuators, and other IoT objects, and collects the data from them, is known collectively as the \"south side.\"</p> <p>North Side: The cloud (or enterprise system) where data is collected,  stored, aggregated, analyzed, and turned into information, and the part of the network that communicates with the cloud, is referred to as the \"north side\" of the network.</p> <p>EdgeX enables data to be sent \"north, \" \"south, \" or laterally as needed and as directed.</p>"},{"location":"general/Definitions/#snappy-ubuntu-core-snaps","title":"\"Snappy\" / Ubuntu Core &amp; Snaps","text":"<p>A Linux-based Operating System provided by Ubuntu - formally called Ubuntu Core but often referred to as \"Snappy\". The packages are called 'snaps' and the tool for using them 'snapd', and works for phone, cloud, internet of things, and desktop computers. The \"Snap\" packages are self-contained and have no dependency on external stores. \"Snaps\" can be used to create command line tools, background services, and desktop applications.</p>"},{"location":"general/Definitions/#user","title":"User","text":"<p>If you want to get the EdgeX platform and run it (but do not intend to change or add to the existing code base now) then you are considered a \"User\".</p>"},{"location":"general/PlatformRequirements/","title":"Platform Requirements","text":"<p>EdgeX Foundry is an operating system (OS)-agnostic and hardware (HW)-agnostic IoT edge platform. At this time the following platform minimums are recommended:</p> MemoryStorageOperating Systems <p>Memory: minimum of 1 GB When considering memory for your EdgeX platform consider your use of database - Redis is the current default.  Redis is an open source (BSD licensed), in-memory data structure store, used as a database and message broker in EdgeX.  Redis is durable and uses persistence only for recovering state; the only data Redis operates on is in-memory.  Redis uses a number of techniques to optimize memory utilization. Antirez and Redis Labs have written a number of articles on the underlying details (see list below).  Those strategies has continued to evolve. When thinking about your system architecture, consider how long data will be living at the edge and consuming memory (physical or physical + virtual).</p> <ul> <li>Antirez</li> <li>Redis RAM Ramifications</li> <li>Redis IO Memory Optimization</li> </ul> <p>Hard drive space: minimum of 3 GB of space to run the EdgeX Foundry containers, but you may want more depending on how long sensor and device data is to be retained.  Approximately 32GB of storage is minimally recommended to start.</p> <p>EdgeX Foundry has been run successfully on many systems, including, but not limited to the following systems</p> <ul> <li>Windows 7 and higher</li> <li>Ubuntu Desktop/Server 14 and higher</li> <li>Ubuntu Core 16 and higher</li> <li>Mac OS X</li> </ul> <p>Info</p> <p>EdgeX Foundry runs on various distributions and / or versions of Linux, Unix, MacOS, Windows, etc. However, the community only supports the platform on <code>amd64</code> (x86-64) and <code>arm64</code> architectures.</p> <p>EdgeX Foundry releases pre-built artifacts as Docker images and Snaps. Please refer to Getting Started for details.</p> <p>EdgeX can run on <code>armhf</code> architecture but that requires users to build their own executables from source. EdgeX does not officially support <code>armhf</code>.</p>"},{"location":"general/ServiceConfiguration/","title":"Service Configuration","text":"<p>Each EdgeX micro service requires configuration (i.e. - a repository of initialization and operating values).  The configuration is initially provided by a TOML file but a service can utilize the centralized configuration management provided by EdgeX for its configuration. </p> <p>See the Configuration and Registry documentation for more details about initialization of services and the use of the configuration service.  </p> <p>Please refer to the EdgeX Foundry architectural decision record for details (and design decisions) behind the configuration in EdgeX.</p> <p>Please refer to the general Common Configuration documentation for configuration properties common to all services.  Find service specific configuration references in the tabs below.</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the Service configuration section has been standardized across all EdgeX services.</p> CoreSupportingApplication &amp; AnalyticsDeviceSecuritySystem Management Service Name Configuration Reference core-data Core Data Configuration core-metadata Core Metadata Configuration core-command Core Command Configuration Service Name Configuration Reference support-notifications Support Notifications Configuration support-scheduler Support Scheduler Configuration Services Name Configuration Reference app-service General Application Service Configuration app-service-configurable Configurable Application Service Configuration eKuiper rules engine/eKuiper Basic eKuiper Configuration Services Name Configuration Reference device-service General Device Service Configuration device-virtual Virtual Device Service Configuration Services Name Configuration Reference API Gateway Kong Configuration Add-on Services Configuring Add-on Service Services Name Configuration Reference system management System Management Agent Configuration"},{"location":"general/ServicePorts/","title":"Default Service Ports","text":"<p>The following tables (organized by type of service) capture the default service ports.  These default ports are also used in the EdgeX provided service routes defined in the Kong API Gateway for access control.</p> CoreSupportingApplicationDeviceSecurityMiscellaneous Services Name Port Definition core-data 598805563 (deprecated ZMQ port) core-metadata 59881 core-command 59882 redis 6379 consul 8500 Services Name Port Definition support-notifications 59860 support-scheduler 59861 rules engine / eKuiper 59720 system management agent (deprecated) 58890 Services Name Port Definition app-sample 59700 app-service-rules 59701 app-push-to-core 59702 app-mqtt-export 59703 app-http-export 59704 app-functional-tests 59705 app-external-mqtt-trigger 59706 app-metrics-influxdb 59707 app-rfid-llrp-inventory 59711 Services Name Port Definition device-virtual 59900 device-modbus 59901 device-bacnet 59980 device-mqtt 59982 device-usb-camera 59983 device-onvif-camera 59984 device-camera 59985 device-rest 59986 device-coap 59988 device-rfid-llrp 59989 device-grove 59992 device-snmp 59993 device-gpio 59910 Services Name Port Definition kong-db 5432 vault 8200 kong 8000, 8100, 8443 security-spire-server 59840 security-spiffe-token-provider 59841 Services Name Port Definition ui 4000 Modbus simulator 1502 MQTT broker 1883"},{"location":"getting-started/","title":"Getting Started","text":"<p>EdgeX Foundry is operating system and architecture agnostic. The community releases artifacts for common architectures. However, it is possible to build the components for other platforms. See the platform requirements reference page for details.</p> <p>To get started you need to get EdgeX Foundry either as a User or as a Developer/Contributor.</p>"},{"location":"getting-started/#user","title":"User","text":"<p>If you want to get the EdgeX platform and run it (but do not intend to change or add to the existing code base now) then you are considered a \"User\". You will want to follow the Getting Started as a User guide which takes you through the process of deploying the latest EdgeX releases.</p> <p>For demo purposes and to run EdgeX on your machine in just a few minutes, please refer to the Quick Start guide.</p>"},{"location":"getting-started/#developer-and-contributor","title":"Developer and Contributor","text":"<p>If you want to change, add to or at least build the existing EdgeX code base, then you are a \"Developer\". \"Contributors\" are developers that further wish to contribute their code back into the EdgeX open source effort. You will want to follow the Getting Started for Developers guide.</p>"},{"location":"getting-started/#hybrid","title":"Hybrid","text":"<p>See Getting Started Hybrid if you are developing or working on a particular micro service, but want to run the other micro services via Docker Containers. When working on something like an analytics service (as a developer or contributor) you may not wish to download, build and run all the EdgeX code - you only want to work with the code of your service. Your new service may still need to communicate with other services while you test your new service. Unless you want to get and build all the services, developers will often get and run the containers for the other EdgeX micro services and run only their service natively in a development environment. The EdgeX community refers to this as \"Hybrid\" development.</p>"},{"location":"getting-started/#device-service-developer","title":"Device Service Developer","text":"<p>As a developer, if you intend to connect IoT objects (device, sensor or other \"thing\") that are not currently connected to EdgeX Foundry, you may also want to obtain the Device Service Software Development Kit (DS SDK) and create new device services. The DS SDK creates all the scaffolding code for a new EdgeX Foundry device service; allowing you to focus on the details of interfacing with the device in its native protocol. See Getting Started with Device SDK for help on using the DS SDK to create a new device service. Learn more about Device Services and the Device Service SDK at Device Services.</p>"},{"location":"getting-started/#application-service-developer","title":"Application Service Developer","text":"<p>As a developer, if you intend to get EdgeX sensor data to external systems (be that an enterprise application, on-prem server or Cloud platform like Azure IoT Hub, AWS IoT, Google Cloud IOT, etc.), you will likely want to obtain the Application Functions SDK (App Func SDK) and create new application services. The App Func SDK creates all the scaffolding code for a new EdgeX Foundry application service; allowing you to focus on the details of data transformation, filtering, and otherwise prepare the sensor data for the external endpoint. Learn more about Application Services and the Application Functions SDK at Application Services.</p>"},{"location":"getting-started/#versioning","title":"Versioning","text":"<p>Please refer to the EdgeX Foundry versioning policy for information on how EdgeX services are released and how EdgeX services are compatible with one another.  Specifically, device services (and the associated SDK), application services (and the associated app functions SDK), and client tools (like the EdgeX CLI and UI) can have independent minor releases, but these services must be compatible with the latest major release of EdgeX.</p>"},{"location":"getting-started/#long-term-support","title":"Long Term Support","text":"<p>Please refer to the EdgeX Foundry LTS policy for information on support of EdgeX releases. The EdgeX community does not offer support on any non-LTS release outside of the latest release.</p>"},{"location":"getting-started/ApplicationFunctionsSDK/","title":"Getting Started","text":""},{"location":"getting-started/ApplicationFunctionsSDK/#the-application-functions-sdk","title":"The Application Functions SDK","text":"<p>The SDK is built around the idea of a \"Functions Pipeline\". A functions pipeline is a collection of various functions that process the data in the order that you've specified. The functions pipeline is executed by the specified trigger in the <code>configuration.toml</code> . The first function in the pipeline is called with the event that triggered the pipeline (ex. <code>dtos.Event</code>). Each successive call in the pipeline is called with the return result of the previous function. Let's take a look at a simple example that creates a pipeline to filter particular device ids and subsequently transform the data to XML: <pre><code>package main\n\nimport (\n\"errors\"\n\"fmt\"\n\"os\"\n\n\"github.com/edgexfoundry/app-functions-sdk-go/v2/pkg\"\n\"github.com/edgexfoundry/app-functions-sdk-go/v2/pkg/interfaces\"\n\"github.com/edgexfoundry/app-functions-sdk-go/v2/pkg/transforms\"\n)\n\nconst (\nserviceKey = \"app-simple-filter-xml\"\n)\n\nfunc main() {\n// turn off secure mode for examples. Not recommended for production\n_ = os.Setenv(\"EDGEX_SECURITY_SECRET_STORE\", \"false\")\n\n// 1) First thing to do is to create an new instance of an EdgeX Application Service.\nservice, ok := pkg.NewAppService(serviceKey)\nif !ok {\nos.Exit(-1)\n}\n\n// Leverage the built in logging service in EdgeX\nlc := service.LoggingClient()\n\n// 2) shows how to access the application's specific configuration settings.\ndeviceNames, err := service.GetAppSettingStrings(\"DeviceNames\")\nif err != nil {\nlc.Error(err.Error())\nos.Exit(-1)\n}\n\nlc.Info(fmt.Sprintf(\"Filtering for devices %v\", deviceNames))\n\n// 3) This is our pipeline configuration, the collection of functions to\n// execute every time an event is triggered.\nif err := service.SetFunctionsPipeline(\ntransforms.NewFilterFor(deviceNames).FilterByDeviceName,\ntransforms.NewConversion().TransformToXML\n); err != nil {\nlc.Errorf(\"SetFunctionsPipeline returned error: %s\", err.Error())\nos.Exit(-1)\n}\n\n// 4) Lastly, we'll go ahead and tell the SDK to \"start\" and begin listening for events\n// to trigger the pipeline.\nerr = service.MakeItRun()\nif err != nil {\nlc.Errorf(\"MakeItRun returned error: %s\", err.Error())\nos.Exit(-1)\n}\n\n// Do any required cleanup here\n\nos.Exit(0)\n}\n</code></pre></p> <p>The above example is meant to merely demonstrate the structure of your application. Notice that the output of the last function is not available anywhere inside this application. You must provide a function in order to work with the data from the previous function. Let's go ahead and add the following function that prints the output to the console.</p> <p><pre><code>func printXMLToConsole(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {\n// Leverage the built in logging service in EdgeX\nlc := ctx.LoggingClient()\n\nif data == nil {\nreturn false, errors.New(\"printXMLToConsole: No data received\")\n}\n\nxml, ok := data.(string)\nif !ok {\nreturn false, errors.New(\"printXMLToConsole: Data received is not the expected 'string' type\")\n}\n\nprintln(xml)\nreturn true, nil\n}\n</code></pre> After placing the above function in your code, the next step is to modify the pipeline to call this function:</p> <p><pre><code>if err := service.SetFunctionsPipeline(\ntransforms.NewFilterFor(deviceNames).FilterByDeviceName,\ntransforms.NewConversion().TransformToXML,\nprintXMLToConsole //notice this is not a function call, but simply a function pointer. \n); err != nil {\n...\n}\n</code></pre> Set the Trigger type to <code>http</code> in res/configuration.toml</p> <pre><code>[Trigger]\nType=\"http\"\n</code></pre> <p>Using PostMan or curl send the following JSON to <code>localhost:&lt;port&gt;/api/v2/trigger</code></p> <pre><code>{\n\"requestId\": \"82eb2e26-0f24-48ba-ae4c-de9dac3fb9bc\",\n\"apiVersion\": \"v2\",\n\"event\": {\n\"apiVersion\": \"v2\",\n\"deviceName\": \"Random-Float-Device\",\n\"profileName\": \"Random-Float-Device\",\n\"sourceName\" : \"Float32\",\n\"origin\": 1540855006456,\n\"id\": \"94eb2e26-0f24-5555-2222-de9dac3fb228\",\n\"readings\": [\n{\n\"apiVersion\": \"v2\",\n\"resourceName\": \"Float32\",\n\"profileName\": \"Random-Float-Device\",\n\"deviceName\": \"Random-Float-Device\",\n\"value\": \"76677\",\n\"origin\": 1540855006469,\n\"ValueType\": \"Float32\",\n\"id\": \"82eb2e36-0f24-48aa-ae4c-de9dac3fb920\"\n}\n]\n}\n}\n</code></pre> <p>After making the above modifications, you should now see data printing out to the console in XML when an event is triggered.</p> <p>Note</p> <p>You can find this complete example \"Simple Filter XML\" and more examples located in the examples section.</p> <p>Up until this point, the pipeline has been triggered by an event over HTTP and the data at the end of that pipeline lands in the last function specified. In the example, data ends up printed to the console. Perhaps we'd like to send the data back to where it came from. In the case of an HTTP trigger, this would be the HTTP response. In the case of  EdgeX MessageBus, this could be a new topic to send the data back to the MessageBus for other applications that wish to receive it. To do this, simply call <code>ctx.SetResponseData(data []byte)</code> passing in the data you wish to \"respond\" with. In the above <code>printXMLToConsole(...)</code> function, replace <code>println(xml)</code> with <code>ctx.SetResponseData([]byte(xml))</code>. You should now see the response in your postman window when testing the pipeline.</p>"},{"location":"getting-started/Ch-GettingStartedCDevelopers/","title":"Getting Started - C Developers","text":""},{"location":"getting-started/Ch-GettingStartedCDevelopers/#introduction","title":"Introduction","text":"<p>These instructions are for C Developers and Contributors to get, run and otherwise work with C-based EdgeX Foundry micro services. Before reading this guide, review the general developer requirements.</p> <p>If you want to get the EdgeX platform and run it (but do not intend to change or add to the existing code base now) then you are considered a \"User\". Users should read: Getting Started as a User)</p>"},{"location":"getting-started/Ch-GettingStartedCDevelopers/#what-you-need-for-c-development","title":"What You Need For C Development","text":"<p>Many of EdgeX device services are built in C.  In the future, other services could be built in C.  In additional to the hardware and software listed in the Developers guide, to build EdgeX C services, you will need the following:</p> <ul> <li>libmicrohttpd</li> <li>libcurl</li> <li>libyaml</li> <li>libcbor</li> <li>paho</li> <li>libuuid</li> <li>hiredis</li> </ul> <p>You can install these on Debian 11 (Bullseye) by running: <pre><code>sudo apt-get install libcurl4-openssl-dev libmicrohttpd-dev libyaml-dev libcbor-dev libpaho-mqtt-dev uuid-dev libhiredis-dev\n</code></pre> Some of these supporting packages have dependencies of their own, which will be automatically installed when using package managers such as APT, DNF etc.</p> <p><code>libpaho-mqtt-dev</code> is not included in Ubuntu prior to Groovy (20.10). IOTech provides a package for Focal (20.04 LTS) which may be installed as follows:</p> <pre><code>sudo curl -fsSL https://iotech.jfrog.io/artifactory/api/gpg/key/public -o /etc/apt/trusted.gpg.d/iotech-public.asc\nsudo echo \"deb https://iotech.jfrog.io/iotech/debian-release $(lsb_release -cs) main\" | tee -a /etc/apt/sources.list.d/iotech.list\nsudo apt-get update\nsudo apt-get install libpaho-mqtt\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the C SDK now supports MQTT and Redis implementations of the EdgeX MessageBus</p> <p>CMake is required to build the SDKs.  Version 3 or better is required.  You can install CMake on Debian by running: <pre><code>sudo apt-get install cmake\n</code></pre></p> <p>Check that your C development environment includes the following:</p> <ul> <li>a version of GCC supporting C11</li> <li>CMake version 3 or greater</li> <li>Development libraries and headers for:<ul> <li>curl (version 7.56 or later)</li> <li>microhttpd (version 0.9)</li> <li>libyaml (version 0.1.6 or later)</li> <li>libcbor (version 0.5)</li> <li>libuuid (from util-linux v2.x)</li> <li>paho (version 1.3.x)</li> <li>hiredis (version 0.14)</li> </ul> </li> </ul>"},{"location":"getting-started/Ch-GettingStartedCDevelopers/#next-steps","title":"Next Steps","text":"<p>To explore how to create and build EdgeX device services in C, head to the Device Services, C SDK guide.</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/","title":"Getting Started as a Developer","text":""},{"location":"getting-started/Ch-GettingStartedDevelopers/#introduction","title":"Introduction","text":"<p>These instructions are for Developers and Contributors to get and run EdgeX Foundry. If you want to get the EdgeX platform and run it (but do not intend to change or add to the existing code base now) then you are considered a \"User\". Users should read: Getting Started as a User)</p> <p>EdgeX is a collection of more than a dozen micro services that are deployed to provide a minimal edge platform capability.  EdgeX consists of a collection of reference implementation services and SDK tools. The micro services and SDKs are written in Go or C.  These documentation pages provide a developer with the information and instructions to get and run EdgeX Foundry in development mode - that is running natively outside of containers and with the intent of adding to or changing the existing code base.</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#what-you-need","title":"What You Need","text":""},{"location":"getting-started/Ch-GettingStartedDevelopers/#hardware","title":"Hardware","text":"<p>EdgeX Foundry is an operating system (OS) and hardware (HW)-agnostic edge software platform.  See the reference page for platform requirements. These provide guidance on a minimal platform to run the EdgeX platform.  However, as a developer, you may find that additional memory, disk space, and improved CPU are essential to building and debugging.</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#software","title":"Software","text":"<p>Developers need to install the following software to get, run and develop EdgeX Foundry micro services:</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#git","title":"Git","text":"<p>Use this free and open source version control (SVC) system to download (and upload) the EdgeX Foundry source code from the project's GitHub repositories. See https://git-scm.com/downloads for download and install instructions. Alternative tools (Easy Git for example) could be used, but this document assumes use of git and leaves how to use alternative SVC tools to the reader.</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#redis","title":"Redis","text":"<p>By default, EdgeX Foundry uses Redis (version 5 starting with the Geneva release) as the persistence mechanism for sensor data as well as metadata about the devices/sensors that are  connected. See Redis Documentation for download and installation instructions.</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#mongodb","title":"MongoDB","text":"<p>As an alternative, EdgeX Foundry allows use of MongoDB (version 4.2 as of Geneva) as the alternative persistence mechanism in place of Redis for sensor data as well as metadata about the connected devices/sensors. See Mongo's Documentation for download and installation instructions.</p> <p>Warning</p> <p>Use of MongoDB is deprecated with the Geneva release.  EdgeX will remove MongoDB support in a future release.  Developers should start to migrate to Redis in all development efforts targeting future EdgeX releases. </p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#zeromq","title":"ZeroMQ","text":"<p>Several EdgeX Foundry services depend on ZeroMQ for communications by default.  See the installation for your OS.</p> Linux/UnixMacOSWindows <p>The easiest way to get and install ZeroMQ on Linux is to use this setup script: https://gist.github.com/katopz/8b766a5cb0ca96c816658e9407e83d00. </p> <p>Note</p> <p>The 0MQ install script above assumes bash is available on your system and the bash executable is in /usr/bin. Before running the script at the link, run <pre><code>which bash\n</code></pre> at your Linux terminal to insure that bash is in /usr/bin. If not, change the first line of the script so that it points to the correct location of bash. </p> <p>For MacOS, use brew to install ZeroMQ. <pre><code>brew install zeromq\n</code></pre></p> <p>For directions installing ZeroMQ on Windows, please see the Windows documentation: https://github.com/edgexfoundry/edgex-go/blob/master/ZMQWindows.md</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#docker-optional","title":"Docker (Optional)","text":"<p>If you intend to create Docker images for your updated or newly created EdgeX services, you need to install Docker. See https://docs.docker.com/install/ to learn how to install Docker. If you are new to Docker, the same web site provides you educational information.</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#additional-programming-tools-and-next-steps","title":"Additional Programming Tools and Next Steps","text":"<p>Depending on which part of EdgeX you work on, you need to install one or more programming languages (Go, C, etc.) and associated tooling. These tools are covered under the documentation specific to each type of development.</p> <ul> <li>Go (Golang)</li> <li>C</li> </ul>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#versioning","title":"Versioning","text":"<p>Please refer to the EdgeX Foundry versioning policy for information on how EdgeX services are released and how EdgeX services are compatible with one another.  Specifically, device services (and the associated SDK), application services (and the associated app functions SDK), and client tools (like the EdgeX CLI and UI) can have independent minor releases, but these services must be compatible with the latest major release of EdgeX.</p>"},{"location":"getting-started/Ch-GettingStartedDevelopers/#long-term-support","title":"Long Term Support","text":"<p>Please refer to the EdgeX Foundry LTS policy for information on support of EdgeX releases. The EdgeX community does not offer support on any non-LTS release outside of the latest release.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/","title":"Getting Started using Docker","text":""},{"location":"getting-started/Ch-GettingStartedDockerUsers/#introduction","title":"Introduction","text":"<p>These instructions are for users to get and run EdgeX Foundry using the latest stable Docker images.</p> <p>If you wish to get the latest builds of EdgeX Docker images (prior to releases), then see the EdgeX Nexus Repository guide.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#get-run-edgex-foundry","title":"Get &amp; Run EdgeX Foundry","text":""},{"location":"getting-started/Ch-GettingStartedDockerUsers/#install-docker-docker-compose","title":"Install Docker &amp; Docker Compose","text":"<p>To run Dockerized EdgeX, you need to install Docker first. See https://docs.docker.com/engine/install/ to learn how to install Docker. If you are new to Docker, the same web site provides you educational information. The following short video is also very informative https://www.youtube.com/watch?time_continue=3&amp;v=VhabrYF1nms</p> <p>Use Docker Compose to orchestrate the fetch (or pull), install, and start the EdgeX micro service containers.  Also use Docker Compose to stop the micro service containers. See: https://docs.docker.com/compose/ to learn more about Docker Compose.</p> <p>You do not need to be an expert with Docker (or Docker Compose) to get and run EdgeX. This guide provides the steps to get EdgeX running in your environment. Some knowledge of Docker and Docker Compose are nice to have, but not required. Basic Docker and Docker Compose commands provided here enable you to run, update, and diagnose issues within EdgeX.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#select-a-edgex-foundry-compose-file","title":"Select a EdgeX Foundry Compose File","text":"<p>After installing Docker and Docker Compose, you need a EdgeX Docker Compose file.  EdgeX Foundry has over a dozen micro services, each deployed in its own Docker container.  This file is a manifest of all the EdgeX Foundry micro services to run.  The Docker Compose file provides details about how to run each of the services.  Specifically, a Docker Compose file is a manifest file, which lists:</p> <ul> <li>The Docker container images that should be downloaded,</li> <li>The order in which the containers should be started,</li> <li>The parameters (such as ports) under which the containers should be run</li> </ul> <p>The EdgeX development team provides Docker Compose files for each release.  Visit the project's GitHub and find the edgex-compose repository.  This repository holds all of the EdgeX Docker Compose files for each of the EdgeX releases/versions. The Compose files for each release are found in separate branches.  Click on the <code>main</code> button to see all the branches.</p> <p> The edgex-compose repositor contains branches for each release.  Select the release branch to locate the Docker Compose files for each release.</p> <p>Locate the branch containing the EdgeX Docker Compose file for the version of EdgeX you want to run.</p> <p>Note</p> <p>The <code>main</code> branch contains the Docker Compose files that use artifacts created from the latest code submitted by contributors (from the night builds).  Most end users should avoid using these Docker Compose files.  They are work-in-progress.  Users should use the Docker Compose files for the latest version of EdgeX. </p> <p>In each edgex-compose branch, you will find several Docker Compose files (all with a .yml extension).  The name of the file will suggest the type of EdgeX instance the Compose file will help setup.  The table below provides a list of the Docker Compose filenames for the latest release (Ireland).   Find the Docker Compose file that matches:</p> <ul> <li>your hardware (x86 or ARM)</li> <li>your desire to have security services on or off</li> </ul> filename Docker Compose contents docker-compose-arm64.yml Specifies x86 containers, uses Redis database for persistence, and includes security services docker-compose-no-secty-arm64.yml Specifies ARM 64 containers, uses Redis database for persistence, but does not include security services docker-compose-no-secty.yml Specifies x86 containers, uses Redis database for persistence, but does not include security services docker-compose.yml Specifies x86 containers, uses Redis database for persistence, and includes security services docker-compose-no-secty-with-ui-arm64. Same as docker-compose-no-secty-arm64.yml but also includes EdgeX user interface docker-compose-no-secty-with-ui.yml Same as docker-compose-no-secty.yml but also includes EdgeX user interface docker-compose-portainer.yml Specifies the Portainer user interface extension (to be used with the x86 or ARM EdgeX platform)"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#download-a-edgex-foundry-compose-file","title":"Download a EdgeX Foundry Compose File","text":"<p>Once you have selected the release branch of edgex-compose you want to use, download it using your favorite tool.  The examples below uses wget to fetch Docker Compose for the Ireland release with no security.</p> x86ARM <pre><code>wget https://raw.githubusercontent.com/edgexfoundry/edgex-compose/ireland/docker-compose-no-secty.yml -O docker-compose.yml\n</code></pre> <pre><code>wget https://raw.githubusercontent.com/edgexfoundry/edgex-compose/ireland/docker-compose-no-secty-arm64.yml -O docker-compose.yml\n</code></pre> <p>Note</p> <p>The commands above fetch the Docker Compose to a file named 'docker-compose.yml' in the current directory.  Docker Compose commands look for a file named 'docker-compose.yml' by default.  You can use an alternate file name but then must specify that file name when issuing Docker Compose commands.  See Compose reference documentation for help.  </p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#generate-a-custom-docker-compose-file","title":"Generate a custom Docker Compose file","text":"<p>The Docker Compose files in the <code>ireland</code> branch contain the standard set of EdgeX services configured to use <code>Redis</code> message bus and include only the Virtual and REST device services. If you need to have different device services running or use <code>MQTT</code> for the message bus, you need a modified version of one of the standard Docker Compose files. You could manually add the device services to one of the existing EdgeX Compose files or, use the EdgeX Compose Builder tool to generate a new custom Compose file that contains the services you would like included. When you use Compose Builder, you don't have to worry about adding all the necessary ports, variables, etc. as the tool will generate the service elements in the file for you. The Compose Builder tool was added with the Hanoi release. You will find the Compose Builder tool in each of the release branches since <code>Hanoi</code> under the compose-builder folder of those branches.  You will also find a compose-builder folder on the <code>main</code> branch for creating custom Compose files for the nightly builds. </p> <p>Do the following to use this tool to generate a custom Compose file:</p> <ol> <li>Clone the edgex-compose repository.</li> </ol> <p><pre><code>git clone https://github.com/edgexfoundry/edgex-compose.git\n</code></pre> 2. Change directories to the clone and checkout the appropriate release branch.  Checkout of the Ireland release branch is shown here.</p> <p><pre><code>cd edgex-compose/\ngit checkout kamakura\n</code></pre> 3. Change directories to the compose-builder folder and then use the <code>make gen &lt;options&gt;</code> command to generate your custom compose file. The generated Docker Compose file is named <code>docker-compose.yaml</code>.  Here are some examples:</p> <pre><code>cd compose-builder/\nmake gen ds-mqtt mqtt-broker\n  - Generates secure Compose file configured to use MQTT for the message bus, adds then MQTT broker and the Device MQTT services. \n\nmake gen no-secty ds-modbus \n  - Generates non-secure compose file with just the Device Modbus device service.\n\nmake gen no-secty arm64 ds-grove \n  - Generates non-secure compose file for ARM64 with just the Device Grove device service.\n</code></pre> <p>Edgex 2.2</p> <p>New in Edgex 2.2 (Kamakura) is the TUI generator tool that walks user through the generation and running of a custom compose file. In a Linux terminal from the <code>compose-builder</code> folder run <code>./tui-generator.sh</code> and make your selections from the menus.  </p> <p>See the README document in the compose-builder directory for details on all the available options.  The Compose Builder is different per release, so make sure to consult the README in the appropriate release branch.  See Ireland's Compose Builder README for details on the lastest release Compose Builder options for <code>make gen</code>.</p> <p>Note</p> <p>The generated Docker Compose file may require addition customizations for your specific needs, such as environment override(s) to set appropriate Host IP address, etc.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#run-edgex-foundry","title":"Run EdgeX Foundry","text":"<p>Now that you have the EdgeX Docker Compose file, you are ready to run EdgeX. Follow these steps to get the container images and start EdgeX!</p> <p>In a command terminal, change directories to the location of your docker-compose.yml.  Run the following command in the terminal to pull (fetch) and then start the EdgeX containers.</p> <pre><code>docker-compose up -d\n</code></pre> <p>Warning</p> <p>If you are using Docker Compose Version 2, please replace <code>docker-compose</code> with <code>docker compose</code> before proceeding. This change should be applied to all the <code>docker-compose</code> in this tutorial. See:  https://www.docker.com/blog/announcing-compose-v2-general-availability/ for more information.</p> <p>Info</p> <p>If you wish, you can fetch the images first and then run them.  This allows you to make sure the EdgeX images you need are all available before trying to run.</p> <pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre> <p>Note</p> <p>The -d option indicates you want Docker Compose to run the EdgeX containers in detached mode - that is to run the containers in the background. Without -d, the containers will all start in the terminal and in order to use the terminal further you have to stop the containers.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#verify-edgex-foundry-running","title":"Verify EdgeX Foundry Running","text":"<p>In the same terminal, run the process status command shown below to confirm that all the containers downloaded and started.</p> <pre><code>docker-compose ps\n</code></pre> <p> If all EdgeX containers pulled and started correctly and without error, you should see a process status (ps) that looks similar to the image above.  If you are using a custom Compose file, your containers list may vary.  Also note that some \"setup\" containers are designed to start and then exit after configuring your EdgeX instance.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#checking-the-status-of-edgex-foundry","title":"Checking the Status of EdgeX Foundry","text":"<p>In addition to the process status of the EdgeX containers, there are a number of other tools to check on the health and status of your EdgeX instance.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#edgex-foundry-container-logs","title":"EdgeX Foundry Container Logs","text":"<p>Use the command below to see the log of any service.</p> <pre><code># see the logs of a service\ndocker-compose logs -f [compose-service-name]\n# example - core data\ndocker-compose logs -f data\n</code></pre> <p>See EdgeX Container Names for a list of the EdgeX Docker Compose service names.</p> <p> A check of an EdgeX service log usually indicates if the service is running normally or has errors. </p> <p>When you are done reviewing the content of the log, select Control-c to stop the output to your terminal.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#ping-check","title":"Ping Check","text":"<p>Each EdgeX micro service has a built-in response to a \"ping\" HTTP request. In networking environments, use a ping request to check the reach-ability of a network resource.  EdgeX uses the same concept to check the availability or reach-ability of a micro service. After the EdgeX micro service containers are running, you can \"ping\" any one of the micro services to check that it is running. Open a browser or HTTP REST client tool and use the service's ping address (outlined below) to check that is available.</p> <pre><code>http://localhost:[service port]/api/v2/ping\n</code></pre> <p>See EdgeX Default Service Ports for a list of the EdgeX default service ports.</p> <p></p> <p>\"Pinging\" an EdgeX micro service allows you to check on its availability.  If the service does not respond to ping, the service is down or having issues.</p>"},{"location":"getting-started/Ch-GettingStartedDockerUsers/#consul-registry-check","title":"Consul Registry Check","text":"<p>EdgeX uses the open source Consul project as its registry service. All EdgeX micro services are expected to register with Consul as they start. Going to Consul's dashboard UI enables you to see which services are up. Find the Consul UI at http://localhost:8500/ui.</p> <p></p> <p>EdgeX 2.0</p> <p>Please note that as of EdgeX 2.0, Consul can be secured.  When EdgeX is running in secure mode with secure Consul, you must provide  Consul's access token to get to the dashboard UI referenced above.  See How to get Consul ACL token for details.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/","title":"Getting Started - Go Developers","text":""},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#introduction","title":"Introduction","text":"<p>These instructions are for Go Lang Developers and Contributors to get, run and otherwise work with Go-based EdgeX Foundry micro services. Before reading this guide, review the general developer requirements.</p> <p>If you want to get the EdgeX platform and run it (but do not intend to change or add to the existing code base now) then you are considered a \"User\". Users should read: Getting Started as a User)</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#what-you-need-for-go-development","title":"What You Need For Go Development","text":"<p>In additional to the hardware and software listed in the Developers guide, you will need the following to work with the EdgeX Go-based micro services.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#go","title":"Go","text":"<p>The open sourced micro services of EdgeX Foundry are written in Go 1.16. See https://golang.org/dl/ for download and installation instructions. Newer versions of Go are available and may work, but the project has not built and tested to these newer versions of the language. Older versions of Go, especially 1.10 or older, are likely to cause issues (EdgeX now uses Go Modules which were introduced with Go Lang 1.11).</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#build-essentials","title":"Build Essentials","text":"<p>In order to compile and build some elements of EdgeX, Gnu C compiler, utilities (like make), and associated librarires need to be installed.  Some IDEs may already come with these tools.  Some OS environments may already come with these tools.  Others environments may require you install them.  For Ubuntu environments, you can install a convenience package called Build Essentials.</p> <p>Note</p> <p>If you are installing Build Essentials, note that there is a build-essential package for each Ubuntu release.  Search for 'build-essential' associated to your Ubuntu version via Ubuntu Packages Search.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#ide-optional","title":"IDE (Optional)","text":"<p>There are many tool options for writing and editing Go Lang code.  You could use a simple text editor. For more convenience, you may choose to use an integrated development environment (IDE).  The list below highlights IDEs used by some of the EdgeX community (without any project endorsement).</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#goland","title":"GoLand","text":"<p>GoLand is a popular, although subscription-fee based,  Go specific IDE. Learn how to purchase and download Go Land here: https://www.jetbrains.com/go/.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code is a free, open source IDE developed by Microsoft. Find and download Visual Studio Code here: https://code.visualstudio.com/.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#atom","title":"Atom","text":"<p>Atom is also a free, open source IDE used with many languages. Find and download Atom here: https://ide.atom.io/.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#get-the-code","title":"Get the code","text":"<p>This part of the documentation assumes you wish to get and work with the key EdgeX services. This includes but is not limited to Core, Supporting, some security, and system management services. To work with other Go-based security services, device services, application services, SDKs, user interface, or other service you may need to pull in other EdgeX repository code. See other getting started guides for working with other Go-based services. As you will see below, you do not need to explicitly pull in dependency modules (whether EdgeX or 3rd party provided). Dependencies will automatically be pulled through the building process.</p> <p>To work with the key services, you will need to download the source code from the EdgeX Go repository. The EdgeX Go-based micro services are all available in a single GitHub repository download.  Once the code is pulled, the Go micro services are built and packaged as platform dependent executables.  If Docker is installed, the executable can also be containerized for end user deployment/use.</p> <p>To download the EdgeX Go code, first change directories to the location where you want to download the code (to edgex in the image below).  Then use your git tool and request to clone this repository with the following command:</p> <p><pre><code>git clone https://github.com/edgexfoundry/edgex-go.git\n</code></pre> </p> <p>Note</p> <p>If you plan to contribute code back to the EdgeX project (as a Contributor), you are going to want to fork the repositories you plan to work with and then pull your fork versus the EdgeX repositories directly. This documentation does not address the process and procedures for working with an EdgeX fork, committing changes and submitting contribution pull requests (PRs). See some of the links below in the EdgeX Wiki for help on how to fork and contribute EdgeX code.</p> <ul> <li>https://wiki.edgexfoundry.org/display/FA/Contributor%27s+Guide</li> <li>https://wiki.edgexfoundry.org/display/FA/Contributor%27s+Process</li> </ul> <p>Furthermore, this pulls and works with the latest code from the <code>main</code> branch.  The <code>main</code> branch contains code that is \"work in progress\" for the upcoming release.  If you want to work with a specific release, checkout code from the specific release branch or tag(e.g. <code>v2.0.0</code>, <code>hanoi</code>, <code>v1.3.11</code>, etc.)</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#build-edgex-foundry","title":"Build EdgeX Foundry","text":"<p>To build the Go Lang services found in edgex-go, first change directories to the root of the edgex-go code</p> <p><pre><code>cd edgex-go\n</code></pre> Second, use the community provided Makefile to build all the services in a single call</p> <p><pre><code>make build\n</code></pre> </p> <p>Info</p> <p>The first time EdgeX builds, it will take longer than other builds as it has to download all dependencies. Depending on the size of your host machine, an initial build can take several minutes. Make sure the build completes and has no errors. If it does build, you should find new service executables in each of the service folders under the service directories found in the /edgex-go/cmd folder.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#run-edgex-foundry","title":"Run EdgeX Foundry","text":""},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#run-the-database","title":"Run the Database","text":"<p>Several of the EdgeX Foundry micro services use a database. This includes core-data, core-metadata, support-scheduler, among others. Therefore, when working with EdgeX Foundry its a good idea to have the database up and running as a general rule. See the Redis Quick Start Guide for how to run Redis in a Linux environment (or find similar documentation for other environments).</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#run-edgex-services","title":"Run EdgeX Services","text":"<p>With the services built, and the database up and running, you can now run each of the services.  In this example, the services will run without security services turned on.  If you wish to run with security, you will need to clone, build and run the security services.</p> <p>In order to turn security off, first set the <code>EDGEX_SECURITY_SECRET_STORE</code> environment variable to false with an export call.</p> <p>Simply call</p> <pre><code>export EDGEX_SECURITY_SECRET_STORE=false\n</code></pre> <p>Next, move to the <code>cmd</code> folder and then change folders to the service folder for the service you want to run. Start the executable (with default configuration) that is in that folder.  For example, to start Core Metadata, enter the cmd/core-metadata folder and start core-metadata.</p> <p><pre><code>cd cmd/core-metadata/\n./core-metadata &amp;\n</code></pre> </p> <p>Note</p> <p>When running the services from the command line, you will usually want to start the service with the <code>&amp;</code> character after the command.  This makes the command run in the background.  If you do not run the service in the background, then you will need to leave the service running in the terminal and open another terminal to start the other services.</p> <p>This will start the EdgeX go service and leave it running in the background until you kill it.  The log entries from the service will still display in the terminal.  Watch the log entries for any ERROR indicators. </p> <p>Info</p> <p>To kill a service there are several options, but an easy means is to use pkill with the service name. <pre><code>pkill core-metadata\n</code></pre></p> <p>Start as many services as you need in order to carry out your development, testing, etc.  As an absolute minimal set, you will typically need to run core-metadata, core-data, core-command and a device service.  Selection of the device service will depend on which physical sensor or device you want to use (or use the virtual device to simulate a sensor).  Here are the set of commands to launch core-data and core-command (in addition to core-metadata above)</p> <pre><code>cd ../core-data/\n./core-data &amp;\ncd ../core-command/\n./core-command &amp;\n</code></pre> <p>Tip</p> <p>You can run some services via Docker containers while working on specific services in Go.  See Working in a Hybrid Environment for more details.</p> <p>While the EdgeX services are running you can make EdgeX API calls to <code>localhost</code>.</p> <p>Info</p> <p>No sensor data will flow yet as this just gets the key services up and running. To get sensor data flowing into EdgeX, you will need to get, build and run an EdgeX device service in a similar fashion. The community provides a virtual device service to test and experiment with (https://github.com/edgexfoundry/device-virtual-go).</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#verify-edgex-is-working","title":"Verify EdgeX is Working","text":"<p>Each EdgeX micro service has a built-in respond to a \"ping\" HTTP request. In networking environments, use a ping request to check the reach-ability of a network resource.  EdgeX uses the same concept to check the availability or reach-ability of a micro service. After the EdgeX micro services are running, you can \"ping\" any one of the micro services to check that it is running. Open a browser or HTTP REST client tool and use the service's ping address (outlined below) to check that is available.</p> <pre><code>http://localhost:[port]/api/v2/ping\n</code></pre> <p>See EdgeX Default Service Ports for a list of the EdgeX default service ports.</p> <p></p> <p>\"Pinging\" an EdgeX micro service allows you to check on its availability.  If the service does not respond to ping, the service is down or having issues. The example above shows the ping of core-data.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#next-steps","title":"Next Steps","text":"<p>Application services and some device services are also built in Go.  To explore how to create and build EdgeX application and devices services in Go, head to SDK documentation covering these EdgeX elements.</p> <ul> <li>Application Services and the Application Functions SDK</li> <li>Device Services in Go</li> </ul>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#edgex-foundry-in-goland","title":"EdgeX Foundry in GoLand","text":"<p>IDEs offer many code editing conveniences. Go Land was specifically built to edit and work with Go code. So if you are doing any significant code work with the EdgeX Go micro services, you will likely find it convenient to edit, build, run, test, etc. from GoLand or other IDE.</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#import-edgex","title":"Import EdgeX","text":"<p>To bring in the EdgeX repository code into Go Land, use the File \u2192 Open... menu option in Go Land to open the Open File or Project Window.</p> <p></p> <p>In the \"Open File or Project\" popup, select the location of the folder containing your cloned edgex-go repo.</p> <p></p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#open-the-terminal","title":"Open the Terminal","text":"<p>From the View menu in Go Land, select the Terminal menu option. This will open a command terminal from which you can issue commands to install the dependencies, build the micro services, run the micro services, etc.</p> <p></p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#build-the-edgex-micro-services","title":"Build the EdgeX Micro Services","text":"<p>Run \"make build\" in the Terminal view (as shown below) to build the services. This can take a few minutes to build all the services.</p> <p></p> <p>Just as when running make build from the command line in a terminal, the micro service executables that get built in Go Land's terminal will be created in each of the service folders under the service directories found in the /edgex-go/cmd folder..</p>"},{"location":"getting-started/Ch-GettingStartedGoDevelopers/#run-edgex","title":"Run EdgeX","text":"<p>With all the micro services built, you can now run EdgeX services. You may first want to make sure the database is running. Then, set any environment variables, change directories to the /cmd and service subfolder, and run the service right from the the terminal (same as in Run EdgeX Services).</p> <p></p> <p>You can now call on the service APIs to make sure they are running correctly. Namely, call on <code>http://localhost:\\[service port\\]/api/v2/ping</code> to see each service respond to the simplest of requests.</p>"},{"location":"getting-started/Ch-GettingStartedHybrid/","title":"Working in a Hybrid Environment","text":"<p>In some cases, as a developer or contributor, you want to work on a particular micro service. Yet, you don't want to have to download all the source code, and then build and run all the micro services. There is an alternative approach!  You can download and run the EdgeX Docker containers for all the micro services you need and run your single micro service (the one you are presumably working on) natively or from a developer tool of choice outside of a container. Within EdgeX, we call this a \"hybrid\" environment - where part of your EdgeX platform is running from a development environment, while other parts are running from Docker containers. This page outlines how to work in a hybrid development environment.</p> <p>As an example of this process, let's say you want to do coding work with/on the Virtual Device service. You want the rest of the EdgeX environment up and running via Docker containers. How would you set up this hybrid environment? Let's take a look.</p>"},{"location":"getting-started/Ch-GettingStartedHybrid/#get-and-run-the-edgex-docker-containers","title":"Get and Run the EdgeX Docker Containers","text":"<ol> <li>If you haven't already, follow the Getting Started using Docker guide to set up your environment (Docker, Docker Compose, etc.) before continuing.</li> <li> <p>Since we plan to work with the virtual device service in this example, you don't need or want to run the virtual device service. You will run all the other services via Docker Compose. </p> <p>Based on the instructions found in the Getting Started using Docker, locate and download the appropriate Docker Compose file for your development environment.  Next, issue the following commands to start the EdgeX containers and then stop the virtual device service (which is the service you are working on in this example). </p> <pre><code>docker-compose up -d \ndocker-compose stop device-virtual\n</code></pre> <p> Run the EdgeX containers and then stop the service container that you are going to work on - in this case the virtual device service container.</p> <p>Note</p> <p>These notes assume you are working with the EdgeX Ireland release.  It also assumes you have downloaded the appropriate Docker Compose file and have named it <code>docker-compose.yml</code> so you don't have to specify the file name each time you run a Docker Compose command.  Some versions of EdgeX may require other or additional containers to run.</p> <p>Tip</p> <p>You can also use the EdgeX Compose Builder tool to create a custom Docker Compose file with just the services you want.  See the Compose Builder documentation on and checkout the Compose Builder tool in GitHub.</p> </li> <li> <p>Run the command below to confirm that all the containers have started and that the virtual device container is no longer running.     <pre><code>docker-compose ps\n</code></pre></p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedHybrid/#get-build-and-run-the-non-docker-service","title":"Get, Build and Run the (non-Docker) Service","text":"<p>With the EdgeX containers running, you can now download, build and run natively (outside of a container) the service you want to work on.  In this example, the virtual device service is used to exemplify the steps necessary to get, build and run the native service with the EdgeX containerized services.  However, the practice could be applied to any service.</p>"},{"location":"getting-started/Ch-GettingStartedHybrid/#get-the-service-code","title":"Get the service code","text":"<p>Per Getting Started Go Developers, pull the micro service code you want to work on from GitHub. In this example, we use the device-virtual-go as the micro service that is going to be worked on.</p> <pre><code>git clone https://github.com/edgexfoundry/device-virtual-go.git\n</code></pre>"},{"location":"getting-started/Ch-GettingStartedHybrid/#build-the-service-code","title":"Build the service code","text":"<p>At this time, you can add or modify the code to make the service changes you need.  Once ready, you must compile and build the service into an executable.  Change folders to the cloned micro service directory and build the service.</p> <pre><code>cd device-virtual-go/\nmake build\n</code></pre> <p> Clone the service from Github, make your code changes and then build the service locally.</p>"},{"location":"getting-started/Ch-GettingStartedHybrid/#change-the-configuration","title":"Change the configuration","text":"<p>Depending on the service you are working on, you may need to change the configuration of the service to point to and use the other services that are containerized (running in Docker).  In particular, if the service you are working on is not on the same host as the Docker Engine running the containerized services, you will likely need to change the configuration.</p> <p>Examine the configuration.toml file in the cmd/res folder of the device-virtual-go. Note that the Service (located in the [Service] section of the configuration), Registry (located in the [Registry] section) and all the \"Clients\" (located in the [Clients] section) suggest that the <code>Host</code> of these services is \"localhost\".  These and other host configuration elements need to change when the services are not running on the same host - specifically the localhost.  When your service is running on a different host than the rest of EdgeX, change the [Service] <code>Host</code> to be the address of the machine hosting your service.  Change the [Registry] and [Clients] <code>Host</code> configuration to specify the location of the machine hosting these services.  If you do have to change the configuration, save the configuration.toml file after making changes.</p>"},{"location":"getting-started/Ch-GettingStartedHybrid/#run-the-service-code-natively","title":"Run the service code natively.","text":"<p>The executable created by the <code>make build</code> command is found in the cmd folder of the service.  Change folders to the location of the executable.  Set any environment variables needed depending on your EdgeX setup.  In this example, we did not start the security elements so we need to set <code>EDGEX_SECURITY_SECRET_STORE</code> to <code>false</code> in order to turn off security.   Finally, run the service right from a terminal.</p> <pre><code>cd cmd\nexport EDGEX_SECURITY_SECRET_STORE=false\n./device-virtual\n</code></pre> <p> Change folders to the service's cmd/ folder, set env vars, and then execute the service executable in the cmd folder.</p>"},{"location":"getting-started/Ch-GettingStartedHybrid/#check-the-results","title":"Check the results","text":"<p>At this time, your virtual device micro service should be communicating with the other EdgeX micro services running in their Docker containers. Because Core Metadata callbacks do not work in the hybrid environment, the virtual device service will not receive the Add Device callbacks on the inital run after creating them in Core Metadata.  The simple work around for this issue is to stop (<code>Ctrl-c</code> from the terminal) and restart the virtual device service (again with <code>./device-virtual</code> execution).</p> <p> The virtual device service log after stopping and restarting.</p> <p>Give the virtual device a few seconds or so to initialize itself and start sending data to Core Data. To check that it is working properly, open a browser and point your browser to Core Data to check that events are being deposited. You can do this by calling on the Core Data API that checks the count of events in Core Data.</p> <pre><code>http://localhost:59880/api/v2/event/count\n</code></pre> <p></p> <p>For this example, you can check that the virtual device service is sending data into Core Data by checking the event count.</p> <p>Note</p> <p>If you choose, you can also import the service into GoLand and then code and run the service from GoLand.  Follow the instructions in the Getting Started - Go Developers  to learn how to import, build and run a service in GoLand.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-C/","title":"C SDK","text":"<p>In this guide, you create a simple device service that generates a random number as a means to simulate getting data from an actual device. In this way, you explore some of the SDK framework and work necessary to complete a device service without actually having a device to talk to.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#install-dependencies","title":"Install dependencies","text":"<p>See the Getting Started - C Developers guide to install the necessary tools and infrastructure needed to develop a C service.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#get-the-edgex-device-sdk-for-c","title":"Get the EdgeX Device SDK for C","text":"<p>The next step is to download and build the EdgeX device service SDK for C.</p> <ol> <li> <p>First, clone the device-sdk-c from Github:     <pre><code>git clone -b v2.0.0 https://github.com/edgexfoundry/device-sdk-c.git\ncd ./device-sdk-c\n</code></pre></p> <p></p> <p>Note</p> <p>The clone command above has you pull v2.0.0 of the C SDK which is the version compatible with the Ireland release.</p> </li> <li> <p>Then, build the device-sdk-c:     <pre><code>make\n</code></pre></p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#starting-a-new-device-service","title":"Starting a new Device Service","text":"<p>For this guide, you use the example template provided by the C SDK as a starting point for a new device service.  You modify the device service to generate random integer values.</p> <p>Begin by copying the template example source into a new directory     named <code>example-device-c</code>:     <pre><code>mkdir -p ../example-device-c/res/profiles\nmkdir -p ../example-device-c/res/devices\ncp ./src/c/examples/template.c ../example-device-c\ncd ../example-device-c\n</code></pre></p> <p></p> <p>EdgeX 2.0</p> <p>In EdgeX 2.0 the profiles have been moved to their own <code>res/profiles</code> directory and device definitions have been moved out of the configuration file into the <code>res/devices</code> directory.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#build-your-device-service","title":"Build your Device Service","text":"<p>Now you are ready to build your new device service using the C SDK you compiled in an earlier step.</p> <ol> <li> <p>Tell the compiler where to find the C SDK files:     <pre><code>export CSDK_DIR=../device-sdk-c/build/release/_CPack_Packages/Linux/TGZ/csdk-2.0.0\n</code></pre></p> <p>Note</p> <p>The exact path to your compiled CSDK_DIR may differ depending on the tagged version number on the SDK.  The version of the SDK can be found in the VERSION file located in the ./device-sdk-c/VERSION file.  In the example above, the Ireland release of 2.0.0 is used.</p> </li> <li> <p>Now build your device service executable:</p> <pre><code>gcc -I$CSDK_DIR/include -L$CSDK_DIR/lib -o device-example-c template.c -lcsdk\n</code></pre> <p>If everything is working properly, a <code>device-example-c</code> executable will be created in the directory.</p> <p></p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#customize-your-device-service","title":"Customize your Device Service","text":"<p>Up to now you've been building the example device service provided by the C SDK. In order to change it to a device service that generates random numbers, you need to modify your <code>template.c</code> method template_get_handler.  Replace the following code:</p> <pre><code>for (uint32_t i = 0; i &lt; nreadings; i++)\n{\n/* Log the attributes for each requested resource */\niot_log_debug (driver-&gt;lc, \"  Requested reading %u:\", i);\ndump_attributes (driver-&gt;lc, requests[i].resource-&gt;attrs);\n/* Fill in a result regardless */\nreadings[i].value = iot_data_alloc_string (\"Template result\", IOT_DATA_REF);\n}\nreturn true;\n</code></pre> <p>with this code:</p> <pre><code>for (uint32_t i = 0; i &lt; nreadings; i++)\n{\nconst char *rdtype = iot_data_string_map_get_string (requests[i].resource-&gt;attrs, \"type\");\nif (rdtype)\n{\nif (strcmp (rdtype, \"random\") == 0)\n{\n/* Set the reading as a random value between 0 and 100 */\nreadings[i].value = iot_data_alloc_i32 (rand() % 100);\n}\nelse\n{\n*exception = iot_data_alloc_string (\"Unknown sensor type requested\", IOT_DATA_REF);\nreturn false;\n}\n}\nelse\n{\n*exception = iot_data_alloc_string (\"Unable to read value, no \\\"type\\\" attribute given\", IOT_DATA_REF);\nreturn false;\n}\n}\nreturn true;\n</code></pre> <p>Here the reading value is set to a random signed integer. Various <code>iot_data_alloc_</code> functions are defined in the <code>iot/data.h</code> header allowing readings of different types to be generated.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#creating-your-device-profile","title":"Creating your Device Profile","text":"<p>A device profile is a YAML file that describes a class of device to EdgeX. General characteristics about the type of device, the data these devices provide, and how to command the device are all in a device profile.   The device profile tells the device service what data gets collected from the the device and how to get it. </p> <p>Follow these steps to create a device profile for the simple random number generating device service.</p> <ol> <li> <p>Explore the files in the device-sdk-c/src/c/examples/res/profiles folder.   Note the example TemplateProfile.json device profile that is already in this folder.  Open the file with your favorite editor and explore its contents.  Note how <code>deviceResources</code> in the file represent properties of a device (properties like SensorOne, SensorTwo and Switch).</p> <p></p> </li> <li> <p>A pre-created device profile for the random number device is provided in this documentation.  This is supplied in the alternative file format .yaml. Download random-generator-device.yaml and save the file to the <code>./res/profiles</code> folder.</p> </li> <li> <p>Open the random-generator-device.yaml file in a text editor. In this device profile, the device described has a deviceResource:  <code>RandomNumber</code>.  Note how the association of a type to the deviceResource.  In this case, the device profile informs EdgeX that <code>RandomNumber</code> will be a Int32.  In real world IoT situations, this deviceResource list could be extensive and filled with many deviceResources all different types of data.</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#creating-your-device","title":"Creating your Device","text":"<p>Device Service accepts pre-defined devices to be added to EdgeX during device service startup.</p> <p>Follow these steps to create a pre-defined device for the simple random number generating device service.</p> <ol> <li> <p>Explore the files in the cmd/device-simple/res/devices folder.   Note the example simple-device.json that is already in this folder.  Open the file with your favorite editor and explore its contents.  Note how the file contents represent an actual device with its properties (properties like Name, ProfileName, AutoEvents).</p> </li> <li> <p>A pre-created device for the random number device is provided in this documentation.  Download random-generator-device.json and save the file to the <code>~/edgexfoundry/device-simple/cmd/device-simple/res/devices</code> folder.</p> </li> <li> <p>Open the random-generator-device.json file in a text editor. In this example, the device described has a profileName:  <code>RandNum-Device</code>.  In this case, the device informs EdgeX that it will be using the device profile we created in Creating your Device Profile</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#configuring-your-device-service","title":"Configuring your Device Service","text":"<p>Now update the configuration for the new device service.    This documentation provides a new configuration.toml file.  This configuration file: - changes the port the service operates on so as not to conflict with other device services</p> <p>Download  configuration.toml and save the file to the ./res folder.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#custom-structured-configuration","title":"Custom Structured Configuration","text":"<p>C Device Services support structured custom configuration as part of the <code>[Driver]</code> section in the configuration.toml file.</p> <p>View the <code>main</code> function of <code>template.c</code>. The <code>confparams</code> variable is initialized with default values for three test parameters. These values may be overridden by entries in the configuration file or by environment variables in the usual way. The resulting configuration is passed to the <code>init</code> function when the service starts.</p> <p>Configuration parameters <code>X</code>, <code>Y/Z</code> and <code>Writable/Q</code> correspond to configuration file entries as follows: <pre><code>[Writable]\n  [Writable.Driver]\n    Q = \"foo\"\n\n[Driver]\n  X = \"bar\"\n  [Driver.Y]\n    Z = \"baz\"\n</code></pre></p> <p>Entries in the writable section can be changed dynamically if using the registry; the <code>reconfigure</code> callback will be invoked with the new configuration when changes are made.</p> <p>In addition to strings, configuration entries may be integer, float or boolean typed. Use the different <code>iot_data_alloc_</code> functions when setting up the defaults as appropriate.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#rebuild-your-device-service","title":"Rebuild your Device Service","text":"<p>Now you have your new device service, modified to return a random number, a device profile that will tell EdgeX how to read that random number, as well as a configuration file that will let your device service register itself and its device profile with EdgeX, and begin taking readings every 10 seconds.</p> <p>Rebuild your Device Service to reflect the changes that you have made:</p> <pre><code>gcc -I$CSDK_DIR/include -L$CSDK_DIR/lib -o device-example-c template.c -lcsdk\n</code></pre>"},{"location":"getting-started/Ch-GettingStartedSDK-C/#run-your-device-service","title":"Run your Device Service","text":"<p>Allow your newly created Device Service, which was formed out of the Device Service C SDK, to create sensor mimicking data which it then sends to EdgeX.</p> <ol> <li> <p>Follow the Getting Started using Docker guide to start all of EdgeX. From     the folder containing the docker-compose file, start EdgeX with the     following call:</p> <pre><code>docker-compose up -d\n</code></pre> </li> <li> <p>Back in your custom device service directory, tell your device     service where to find the <code>libcsdk.so</code>:</p> <pre><code>export LD_LIBRARY_PATH=$CSDK_DIR/lib\n</code></pre> </li> <li> <p>Run your device service:</p> <pre><code>./device-example-c\n</code></pre> </li> <li> <p>You should now see your device service having its /Random command     called every 10 seconds. You can verify that it is sending data into     EdgeX by watching the logs of the <code>edgex-core-data</code>     service:</p> <pre><code>docker logs -f edgex-core-data\n</code></pre> <p>Which would print an event record every time your device service is called.</p> </li> <li> <p>You can manually generate an event using curl to query the device     service directly:</p> <pre><code>curl 0:59992/api/v2/device/name/RandNum-Device01/RandomNumber\n</code></pre> </li> <li> <p>Using a browser, enter the following URL to see the event/reading     data that the service is generating and sending to EdgeX:</p> <p>http://localhost:59880/api/v2/event/device/name/RandNum-Device01?limit=100</p> <p>This request asks core data to provide the last 100 events/readings associated to the RandNum-Device-01.</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/","title":"Golang SDK","text":"<p>In this guide, you create a simple device service that generates a random number as a means to simulate getting data from an actual device. In this way, you explore some SDK framework and work necessary to complete a device service without actually having a device to talk to.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#install-dependencies","title":"Install dependencies","text":"<p>See the Getting Started - Go Developers guide to install the necessary tools and infrastructure needed to develop a GoLang service.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#get-the-edgex-device-sdk-for-go","title":"Get the EdgeX Device SDK for Go","text":"<p>Follow these steps to create a folder on your file system, download the Device SDK, and get the GoLang device service SDK on your system.</p> <ol> <li> <p>Create a collection of nested folders, <code>~/edgexfoundry</code> on your file system. This folder will hold your new Device Service. In Linux, create a directory with a single mkdir command     <pre><code>mkdir -p ~/edgexfoundry\n</code></pre></p> </li> <li> <p>In a terminal window, change directories to the folder just created and pull down the SDK in Go with the commands as shown.     <pre><code>cd ~/edgexfoundry\ngit clone --depth 1 --branch v2.0.0 https://github.com/edgexfoundry/device-sdk-go.git\n</code></pre></p> <p></p> <p>Note</p> <p>The clone command above has you pull v2.0.0 of the Go SDK which is the version associated to Ireland.  There are later releases of EdgeX, and it is always a good idea to pull and use the latest version associated with the major version of EdgeX you are using.  You may want to check for the latest released version by going to https://github.com/edgexfoundry/device-sdk-go and look for the latest release.</p> </li> <li> <p>Create a folder that will hold the new device service.  The name of the folder is also the name you want to give your new device service. Standard practice in EdgeX is to prefix the name of a device service with <code>device-</code>.  In this example, the name 'device-simple' is used.     <pre><code>mkdir -p ~/edgexfoundry/device-simple\n</code></pre></p> </li> <li> <p>Copy the example code from device-sdk-go to device-simple:     <pre><code>cd ~/edgexfoundry\ncp -rf ./device-sdk-go/example/* ./device-simple/\n</code></pre></p> </li> <li> <p>Copy Makefile to device-simple:     <pre><code>cp ./device-sdk-go/Makefile ./device-simple\n</code></pre></p> </li> <li>Copy version.go to device-simple:     <pre><code>cp ./device-sdk-go/version.go ./device-simple/\n</code></pre></li> </ol> <p>After completing these steps, your device-simple folder should look like the listing below.</p> <p></p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#start-a-new-device-service","title":"Start a new Device Service","text":"<p>With the device service application structure in place, time now to program the service to act like a sensor data fetching service.</p> <ol> <li> <p>Change folders to the device-simple directory.</p> <pre><code>cd ~/edgexfoundry/device-simple\n</code></pre> </li> <li> <p>Open main.go file in the cmd/device-simple folder with your favorite text editor. Modify the     import statements.  Replace <code>github.com/edgexfoundry/device-sdk-go/v2/example/driver</code> with <code>github.com/edgexfoundry/device-simple/driver</code> in the import statements.     Also replace <code>github.com/edgexfoundry/device-sdk-go/v2</code> with <code>github.com/edgexfoundry/device-simple</code>. Save the file when you have finished editing.</p> <p></p> </li> <li> <p>Open Makefile found in the base folder (~/edgexfoundry/device-simple) in your favorite text editor and make the following     changes</p> <ul> <li> <p>Replace:</p> <pre><code>MICROSERVICES=example/cmd/device-simple/device-simple\n</code></pre> <p>with:</p> <pre><code>MICROSERVICES=cmd/device-simple/device-simple\n</code></pre> </li> <li> <p>Change:</p> <pre><code>GOFLAGS=-ldflags \"-X github.com/edgexfoundry/device-sdk-go/v2.Version=$(VERSION)\"\n</code></pre> <p>to refer to the new service with:</p> <pre><code>GOFLAGS=-ldflags \"-X github.com/edgexfoundry/device-simple.Version=$(VERSION)\"\n</code></pre> </li> <li> <p>Change:</p> <pre><code>example/cmd/device-simple/device-simple:\ngo mod tidy\n$(GOCGO) build $(GOFLAGS) -o $@ ./example/cmd/device-simple\n</code></pre> <p>to:</p> <pre><code>cmd/device-simple/device-simple:\ngo mod tidy\n$(GOCGO) build $(GOFLAGS) -o $@ ./cmd/device-simple\n</code></pre> </li> </ul> </li> <li> <p>Save the file.</p> </li> <li> <p>Enter the following command to create the initial module definition     and write it to the go.mod file:</p> <pre><code>GO111MODULE=on go mod init github.com/edgexfoundry/device-simple\n</code></pre> <p></p> </li> <li> <p>Use an editor to open and edit the go.mod file created in ~/edgexfoundry/device-simple.  Add the code highlighted below to the bottom of the file.  This code indicates which version of the device service SDK and the associated EdgeX contracts module to use.</p> <p><pre><code>require (\ngithub.com/edgexfoundry/device-sdk-go/v2 v2.0.0\ngithub.com/edgexfoundry/go-mod-core-contracts/v2 v2.0.0\n)\n</code></pre> </p> <p>Note</p> <p>You should always check the go.mod file in the latest released version SDK for the correct versions of the Go SDK and go-mod-contracts to use in your go.mod.</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#build-your-device-service","title":"Build your Device Service","text":"<p>To ensure that the code you have moved and updated still works, build the device service. In a terminal window, make sure you are still in the device-simple folder (the folder containing the Makefile).  Build the service by issuing the following command:</p> <pre><code>make build\n</code></pre> <p>If there are no errors, your service is ready for you to add custom code to generate data values as if there was a sensor attached.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#customize-your-device-service","title":"Customize your Device Service","text":"<p>The device service you are creating isn't going to talk to a real device. Instead, it is going to generate a random number where the service would ordinarily make a call to get sensor data from the actual device.</p> <ol> <li> <p>Locate the simpledriver.go file in the /driver folder and open it     with your favorite editor.</p> <p></p> </li> <li> <p>In the import() area at the top of the file, add \"math/rand\" under \"time\".</p> <p></p> </li> <li> <p>Locate the HandleReadCommands() function in this same file (simpledriver.go). Find the     following lines of code in this file (around line 139):</p> <pre><code>if reqs[0].DeviceResourceName == \"SwitchButton\" {\ncv, _ := sdkModels.NewCommandValue(reqs[0].DeviceResourceName, common.ValueTypeBool, s.switchButton)  res[0] = cv\n}\n</code></pre> <p>Add the conditional (if-else) code in front of the above conditional:</p> <pre><code>if reqs[0].DeviceResourceName == \"randomnumber\" {\ncv, _ := sdkModels.NewCommandValue(reqs[0].DeviceResourceName, common.ValueTypeInt32, int32(rand.Intn(100)))\nres[0] = cv\n} else\n</code></pre> <p></p> <p>The first line of code checks that the current request is for a resource called \"RandomNumber\". The second line of code generates an integer (between 0 and 100) and uses that as the value the device service sends to EdgeX -- mimicking the collection of data from a real device. It is here that the device service would normally capture some sensor reading from a device and send the data to EdgeX. The HandleReadCommands is where you'd need to do some customization work to talk to the device, get the latest sensor values and send them into EdgeX.</p> </li> <li> <p>Save the simpledriver.go file</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#creating-your-device-profile","title":"Creating your Device Profile","text":"<p>A device profile is a YAML file that describes a class of device to EdgeX. General characteristics about the type of device, the data these devices provide, and how to command the device are all in a device profile.   The device profile tells the device service what data gets collected from the the device and how to get it. </p> <p>Follow these steps to create a device profile for the simple random number generating device service.</p> <ol> <li> <p>Explore the files in the cmd/device-simple/res/profiles folder.   Note the example Simple-Driver.yaml device profile that is already in this folder.  Open the file with your favorite editor and explore its contents.  Note how <code>deviceResources</code> in the file represent properties of a device (properties like SwitchButton, X, Y and Z rotation).</p> <p></p> </li> <li> <p>A pre-created device profile for the random number device is provided in this documentation.  Download random-generator-device.yaml and save the file to the <code>~/edgexfoundry/device-simple/cmd/device-simple/res/profiles</code> folder.</p> </li> <li> <p>Open the random-generator-device.yaml file in a text editor. In this device profile, the device described has a deviceResource:  <code>RandomNumber</code>.  Note how the association of a type to the deviceResource.  In this case, the device profile informs EdgeX that RandomNumber will be a INT32.  In real world IoT situations, this deviceResource list could be extensive.  Rather than a single deviceResource, you might find this section filled with many deviceResources and each deviceResource associated to a different type.</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#creating-your-device","title":"Creating your Device","text":"<p>Device Service accepts pre-defined devices to be added to EdgeX during device service startup.</p> <p>Follow these steps to create a pre-defined device for the simple random number generating device service.</p> <ol> <li> <p>Explore the files in the cmd/device-simple/res/devices folder.   Note the example simple-device.toml that is already in this folder.  Open the file with your favorite editor and explore its contents.  Note how <code>DeviceList</code> in the file represent an actual device with its properties (properties like Name, ProfileName, AutoEvents).</p> </li> <li> <p>A pre-created device for the random number device is provided in this documentation.  Download random-generator-device.toml and save the file to the <code>~/edgexfoundry/device-simple/cmd/device-simple/res/devices</code> folder.</p> </li> <li> <p>Open the random-generator-device.toml file in a text editor. In this example, the device described has a ProfileName:  <code>RandNum-Device</code>.  In this case, the device informs EdgeX that it will be using the device profile we created in Creating your Device Profile</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#validating-your-device","title":"Validating your Device","text":"<p>Go Device Services provide <code>/api/v2/validate/device</code> API to validate device's ProtocolProperties. This feature allows Device Services whose protocol has strict rule to validate their devices before adding them into EdgeX.</p> <p>Go SDK provides <code>DeviceValidator</code> interface: <pre><code>// DeviceValidator is a low-level device-specific interface implemented\n// by device services that validate device's protocol properties.\ntype DeviceValidator interface {\n// ValidateDevice triggers device's protocol properties validation, returns error\n// if validation failed and the incoming device will not be added into EdgeX.\nValidateDevice(device models.Device) error\n}\n</code></pre></p> <p>By implementing <code>DeviceValidator</code> interface whenever a device is added or updated, <code>ValidateDevice</code> function will be called to validate incoming device's ProtocolProperties and reject the request if validation failed.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#configuring-your-device-service","title":"Configuring your Device Service","text":"<p>Now update the configuration for the new device service.    This documentation provides a new configuration.toml file.  This configuration file:</p> <ul> <li>changes the port the service operates on so as not to conflict with other device services</li> </ul> <p>Download  configuration.toml and save the file to the <code>~/edgexfoundry/device-simple/cmd/device-simple/res</code> folder (overwrite the existing configuration file).  Change the host address of the device service to your system's IP address.</p> <p>Warning</p> <p>In the configuration.toml, change the host address (around line 14) to the IP address of the system host.  This allows core metadata to callback to your new device service when a new device is created.  Because the rest of EdgeX, to include core metadata, will be running in Docker, the IP address of the host system on the Docker network must be provided to allow metadata in Docker to call out from Docker to the new device service running on your host system.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#custom-structured-configuration","title":"Custom Structured Configuration","text":"<p>EdgeX 2.0</p> <p>New for EdgeX 2.0</p> <p>Go Device Services can now define their own custom structured configuration section in the <code>configuration.toml</code> file. Any additional sections in the TOML are ignored by the SDK when it parses the file for the SDK defined sections. </p> <p>This feature allows a Device Service to define and watch it's own structured section in the service's TOML configuration file.</p> <p>The <code>SDK</code> API provides the follow APIs to enable structured custom configuration:</p> <ul> <li> <p><code>LoadCustomConfig(config UpdatableConfig, sectionName string) error</code></p> <p>Loads the service's custom configuration from local file or the Configuration Provider (if enabled). The Configuration Provider will also be seeded with the custom configuration the first time the service is started, if service is using the Configuration Provider. The <code>UpdateFromRaw</code> interface will be called on the custom configuration when the configuration is loaded from the Configuration Provider.</p> </li> <li> <p><code>ListenForCustomConfigChanges(configToWatch interface{}, sectionName string, changedCallback func(interface{})) error</code></p> <p>Starts a listener on the Configuration Provider for changes to the specified section of the custom configuration. When changes are received from the Configuration Provider the UpdateWritableFromRaw interface will be called on the custom configuration to apply the updates and then signal that the changes occurred via changedCallback.</p> </li> </ul> <p>See the Device MQTT Service for an example of using the new Structured Custom Configuration capability.</p> <ul> <li>See here for defining the structured custom configuration</li> <li>See here for custom section on the configuration.toml file</li> <li>See here for loading, validating and watching the configuration</li> </ul>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#retrieving-secrets","title":"Retrieving Secrets","text":"<p>The Go Device SDK provides the <code>SecretProvider.GetSecret()</code> API to retrieve the Device Services secrets.  See the Device MQTT Service for an example of using the <code>SecretProvider.GetSecret()</code> API. Note that this code implements a retry loop allowing time for the secret(s) to be push into the service's <code>SecretStore</code> via the /secret endpoint. See Storing Secrets section for more details.  </p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#rebuild-your-device-service","title":"Rebuild your Device Service","text":"<p>Just as you did in the Build your Device Service step above, build the device-simple service, which creates the executable program that is your device service.  In a terminal window, make sure you are in the device-simple folder (the folder containing the Makefile).  Build the service by issuing the following command:</p> <p><pre><code>cd ~/edgexfoundry/device-simple\nmake build\n</code></pre> </p> <p>If there are no errors, your service is created and put in the  <code>~/edgexfoundry/device-simple/cmd/device-simple</code> folder.  Look for the <code>device-simple</code> executable in the folder.</p>"},{"location":"getting-started/Ch-GettingStartedSDK-Go/#run-your-device-service","title":"Run your Device Service","text":"<p>Allow the newly created device service, which was formed out of the Device Service Go SDK, to create sensor-mimicking data that it then sends to EdgeX:</p> <ol> <li> <p>Follow the Getting Started using Docker guide to start all of EdgeX. From     the folder containing the docker-compose file, start EdgeX with the     following call (we're using non-security EdgeX in this example):</p> <pre><code>docker-compose -f docker-compose-no-secty.yml up -d\n</code></pre> </li> <li> <p>In a terminal window, change directories to the device-simple's     cmd/device-simple folder and run the new device-simple service.</p> <pre><code>cd ~/edgexfoundry/device-simple/cmd/device-simple\n./device-simple\n</code></pre> <p>This starts the service and immediately displays log entries in the terminal.</p> </li> <li> <p>Using a browser, enter the following URL to see the event/reading     data that the service is generating and sending to EdgeX:</p> <p>http://localhost:59880/api/v2/event/device/name/RandNum-Device01</p> <p>This request asks core data to provide the events associated to the RandNum-Device-01.</p> </li> </ol>"},{"location":"getting-started/Ch-GettingStartedSDK/","title":"Device Service SDK","text":"<p>The EdgeX device service software development kits (SDKs) help developers create new device connectors for EdgeX.  An SDK provides the common scaffolding that each device service needs.  This allows developers to create new device/sensor connectors more quickly.</p> <p></p> <p>The EdgeX community already provides many device services.  However, there is no way the community can provide for every protocol and every sensor. Even if the EdgeX community provided a device service for every protocol, your use case, sensor, or security infrastructure might require customization.  Thus, the device service SDKs provide the means to extend or customize EdgeX\u2019s device connectivity.</p> <p>EdgeX provides two SDKs to help developers create new device services.   Most of EdgeX is written in Go and C. Thus, there's a device service SDK written in both Go and C to support the more popular languages used in EdgeX today. In the future, the community may offer alternate language SDKs.</p> <p>The SDKs are libraries that get incorporated into a new micro services.  They make writing a new device service much easier. By importing the SDK library into your new device service project, developers are left to focus on the code that is specific to the communications with the device via the protocol of the device.</p> <p>The code in the SDK handles the other details, such as: - initialization of the device service - getting the service configured - sending sensor data to core data - managing communications with core metadata - and much more.</p> <p>The code in the SDK also helps to ensure your device service adheres to rules and standards of EdgeX.  For example, it makes sure the service registers with the EdgeX registry service when it starts.</p> <p>Use the GoLang SDK</p> <p>Use the C SDK</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/","title":"Getting Started using Snaps","text":""},{"location":"getting-started/Ch-GettingStartedSnapUsers/#introduction","title":"Introduction","text":"<p>Snaps are application packages that are easy to install and update while being  secure, cross\u2010platform and self-contained. Snaps can be installed on any Linux distribution with snap support.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#installation","title":"Installation","text":"<p>When using the snap CLI, the installation is possible by simply executing: <pre><code>snap install &lt;snap&gt;\n</code></pre></p> <p>This is similar to setting <code>--channel=latest/stable</code> or shorthand <code>--stable</code> and will install the latest stable release of a snap. In this case, <code>latest/stable</code> is the channel, composed of <code>latest</code> track and <code>stable</code> risk level.</p> <p>To install a specific version with long term support (e.g. 2.1), or to install a beta or development release, refer to the store page for the snap, choose install, and then pick the desired channel. The store page also provides instructions for installation on different Linux distributions as well as the list of supported CPU architectures.</p> <p>For the list of EdgeX snaps, please refer here.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#configuration","title":"Configuration","text":"<p>EdgeX snaps are packaged with default service configuration files. In certain cases, few configuration fields are overridden within the snap for snap-specific deployment requirements.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#config-files","title":"Config files","text":"<p>The default configuration files are typically placed at <code>/var/snap/&lt;snap&gt;/current/config</code>. Upon startup, the server configurations files are uploaded to the registry by default. Once the service starts without errors, the local configurations become obsolete and will no longer be read. Any modifications after the initial startup will not be applied. </p> <p>For device services, the  Device and Device Profile files are submitted to Core Metadata upon initial startup. Refer to the documentation of Device Services for details.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#config-registry","title":"Config registry","text":"<p>The configurations that are uploaded to Consul can be modified using Consul's UI or kv REST API. Changes to configurations in Consul are loaded by the service at startup. If the service has already started, a restart is required to load new configurations. Configurations that are in the writable section get loaded not only at startup, but also during the runtime. In other words, changes to the writable configurations are loaded automatically without a restart. Please refer to  Common Configuration and  Configuration and Registry Providers for more information.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#config-provider-snap","title":"Config provider snap","text":"<p>Most EdgeX snaps have a content interface which allows another snap to seed the snap with configuration files. This is useful when replacing entire configuration files via another snap, packaged with the deployment-specific configurations.</p> <p>Please refer to edgex-config-provider, for an example.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#config-overrides","title":"Config overrides","text":"<p>EdgeX 2.2 - app options</p> <p>This version of EdgeX snaps introduce a new scheme for the snap configuration options: <pre><code>apps.&lt;app&gt;.&lt;type&gt;.&lt;key&gt;\n</code></pre> where:</p> <ul> <li><code>&lt;app&gt;</code> is the name of the app (service, executable)</li> <li><code>&lt;type&gt;</code> is the type of option with respect to the app</li> <li><code>&lt;key&gt;</code> is key for the option. It could contain a path to set a value inside an object, e.g. <code>x.y=z</code> sets <code>{\"x\": {\"y\": \"z\"}}</code>.</li> </ul> <p>The app options are disabled by default. This is for usability purposes and to avoid confusion with legacy options. The app options may be enabled by default in the next major release of EdgeX.</p> <p>Refer to edgexfoundry/edgex-go#3986 for details.</p> <p>EdgeX 2.2 - config options</p> <p>The snaps now provide an interface to set any environment variable for supported apps. We call these the config options because they use a <code>config</code> prefix for the variable names. The config options are a subset of app options, which are disabled by default.</p> <p>This functionality supersedes for the snap env options (prefix <code>env.</code>) which allow setting a pre-defined set of configurations. Existing env options will continue to work until the next major EdgeX release. Please refer to snap READMEs (<code>jakarta</code> branch) for the documentation of the deprecated options.</p> <p>Enabling app options will migrate internal env options and persistently remove any newly set env option.</p> <p>The EdgeX services allow overriding server configurations using environment variables. Moreover, the services read EdgeX Common Environment Variables to change configurations that aren't defined in config files. The EdgeX snaps provide an interface via snap configuration options to set environment variables for the services. We call these the config options because they a have <code>config</code> prefix for the variable names.</p> <p>The snap options for setting environment variable uses the the following format:</p> <ul> <li><code>apps.&lt;app&gt;.config.&lt;env-var&gt;</code>: setting an app-specific value (e.g. <code>apps.core-data.config.service-port=1000</code>).</li> <li><code>config.&lt;env-var&gt;</code>: setting a global value (e.g. <code>config.service-host=localhost</code> or <code>config.writable-loglevel=DEBUG</code></li> </ul> <p>where:</p> <ul> <li><code>&lt;app&gt;</code> is the name of the app (service, executable)</li> <li><code>&lt;env-var&gt;</code> is a lowercase, dash-separated mapping to uppercase, underscore-separate environment variable name (e.g. <code>x-y</code>-&gt;<code>X_Y</code>). The reason for such mapping is that uppercase and underscore characters are not supported as config keys for snaps.</li> </ul> <p>Mapping examples:</p> Snap config key Environment Variable Service configuration TOML service-port SERVICE_PORT [Service]Port clients-core-data-host CLIENTS_CORE_DATA_HOST [Clients]--[Clients.core-data]--Host edgex-startup-duration EDGEX_STARTUP_DURATION - add-secretstore-tokens ADD_SECRETSTORE_TOKENS - <p>Note</p> <p>The config options are supported as of EdgeX 2.2 and are disabled by default!</p> <p>Setting <code>app-options=true</code> is necessary to enable their support.</p> <p>Enabling app options will migrate internal env options and persistently remove any newly set env option.</p> <p>For example, to change the service port of the core-data service on <code>edgexfoundry</code> snap to 8080: <pre><code>snap set edgexfoundry app-options=true\nsnap set edgexfoundry apps.core-data.config.service-port=8080\n</code></pre></p> <p>The services load the set config options on startup. If the service has already started, a restart is necessary to load them.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#disabling-security","title":"Disabling security","text":"<p>Warning</p> <p>Disabling security is NOT recommended, unless for demonstration purposes, or when there are other means to secure the services.</p> <p>The snap will NOT allow the Secret Store to be re-enabled. The only way to re-enable the Secret Store is to re-install the snap.</p> <p>The Secret Store is used by EdgeX for secret management (e.g. certificates, keys, passwords). Use of the Secret Store by all services can be disabled globally. Note that doing so will also disable the API Gateway, as it depends on the Secret Store.</p> <p>The following command disables the Secret Store and in turn the API Gateway: <pre><code>sudo snap set edgexfoundry security-secret-store=off\n</code></pre></p> <p>All services in the snap except for the API Gateway are restricted by default to listening on localhost (127.0.0.1). The API Gateway proxies external requests to internal services. Since disabling the Secret Store also disables the API Gateway, the service endpoint will no longer be accessible from other systems. They will be still accessible on the local machine for demonstration and testing.</p> <p>If you really need to make an insecure service accessible remotely, set the bind address of the service to the IP address of that networking interface on the local machine. If you trust all your interfaces and want the services to accept connections from all, set it to <code>0.0.0.0</code>.</p> <p>After disabling the Secret Store, the external services should be configured such that they don't attempt to initialize the security. For this purpose, EDGEX_SECURITY_SECRET_STORE should be set to false, using the corresponding snap option: <code>config.edgex-security-secret-store</code>.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#managing-services","title":"Managing services","text":"<p>The services of a snap can be started/stopped/restarted using the snap CLI. When starting/stopping, you can additionally set them to enable/disable which configures whether or not the service should also start on boot.</p> <p>To list the services and check their status: <pre><code>snap services &lt;snap&gt;\n</code></pre></p> <p>To start and optionally enable services: <pre><code># all services\nsnap start --enable &lt;snap&gt;\n\n# one service\nsnap start --enable &lt;snap&gt;.&lt;app&gt;\n</code></pre></p> <p>Similarly, a service can be stopped and optionally disabled using <code>snap stop --disable</code>.</p> Seeding custom service startup using snap options <p>To spin up an EdgeX instance with a different startup configuration (e.g. enabled instead of disabled), the <code>edgexfoundry</code> snap provides the following config options that accept values <code>\"on\"</code>/<code>\"off\"</code> to enable/disable a service by default:</p> <ul> <li><code>consul</code></li> <li><code>redis</code></li> <li><code>core-metadata</code></li> <li><code>core-command</code></li> <li><code>core-data</code></li> <li><code>support-notifications</code></li> <li><code>support-scheduler</code></li> <li><code>device-virtual</code></li> <li><code>security-secret-store</code></li> <li><code>security-proxy</code></li> </ul> <p>Device and app service snaps provide a similar functionality using the <code>auto-start</code> option.</p> <p>This is particularly useful when seeding the snap from a Gadget on an Ubuntu Core system.</p> <p>To restart services, e.g. to load the configurations: <pre><code># all services\nsnap restart &lt;snap&gt;\n\n# one service\nsnap restart &lt;snap&gt;.&lt;app&gt;\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#debugging","title":"Debugging","text":"<p>The service logs can be queried using the <code>snap log</code> command.</p> <p>For example, to query 100 lines and follow: <pre><code># all services\nsnap logs -n=100 -f &lt;snap&gt;\n\n# one service\nsnap logs -n=100 -f &lt;snap&gt;.&lt;app&gt;\n</code></pre> Check <code>snap logs --help</code> for details.</p> <p>To query not only the service logs, but also the snap logs (incl. hook apps such as install and configure), use <code>journalctl</code>: <pre><code>sudo journalctl -n 100 -f | grep &lt;snap&gt;\n</code></pre></p> <p>Info</p> <p>The verbosity of service logs is INFO by default. This can be changed by overriding the log level using the <code>WRITABLE_LOGLEVEL</code> environment variable using snap config overrides <code>apps.&lt;app&gt;.config.writable-loglevel</code> or globally as <code>config.writable-loglevel</code>.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#edgex-snaps","title":"EdgeX Snaps","text":"<p>The following snaps are maintained by the EdgeX working groups. To find all EdgeX snaps on the public Snap Store, search by keyword.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#platform-snap","title":"Platform Snap","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The main platform snap, simply called <code>edgexfoundry</code> contains all reference core services along with several other security, supporting, application, and device services.</p> <p>Upon installation, the following EdgeX services are automatically started:</p> <ul> <li>consul (Registry)</li> <li>core-command</li> <li>core-data</li> <li>core-metadata</li> <li>kong-daemon (API Gateway / Reverse Proxy)</li> <li>postgres (kong's database)</li> <li>redis (default Message Bus and database backend for core-data and core-metadata)</li> <li>security-bootstrapper-redis (oneshot service to setup secure Redis)</li> <li>security-consul-bootstrapper (oneshot service to setup secure Consul)</li> <li>security-proxy-setup (oneshot service to setup Kong)</li> <li>security-secretstore-setup (oneshot service to setup Vault)</li> <li>vault (Secret Store)</li> </ul> <p>The following services are disabled by default:</p> <ul> <li>support-notifications</li> <li>support-scheduler</li> <li>sys-mgmt-agent - deprecated EdgeX component</li> <li>device-virtual</li> <li>kuiper (Rules Engine / eKuiper) - deprecated; use the standalone EdgeX eKuiper snap</li> <li>app-service-configurable (used to filter events for kuiper) - deprecated; use the standalone App Service Configurable snap</li> </ul> <p>The disabled services can be manually enabled and started; see managing services.</p> <p>For the configuration of services, refer to configuration.</p> <p>Most services are exposed and accessible on localhost without access control. However, the access from outside is restricted to authorized users.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#adding-api-gateway-users","title":"Adding API Gateway users","text":"<p>The service endpoints can be accessed securely through the API Gateway. The API Gateway requires a JSON Web Token (JWT) to authorize requests. Please refer to Adding EdgeX API Gateway Users Remotely and use the snapped <code>edgexfoundry.secrets-config</code> utility.</p> <p>To get the usage help: <pre><code>edgexfoundry.secrets-config proxy adduser -h\n</code></pre> You may also refer to the secrets-config proxy documentation.</p> <p>Creating an example user</p> <p>Create private and public keys: <pre><code>openssl ecparam -genkey -name prime256v1 -noout -out private.pem\nopenssl ec -in private.pem -pubout -out public.pem\n</code></pre></p> <p>Read the API Gateway token: <pre><code>KONG_ADMIN_JWT=`sudo cat /var/snap/edgexfoundry/current/secrets/security-proxy-setup/kong-admin-jwt`\n</code></pre></p> <p>Use secrets-config to add a user <code>example</code> with id <code>1000</code>: <pre><code>edgexfoundry.secrets-config proxy adduser --token-type jwt --user example --algorithm ES256 --public_key public.pem --id 1000 --jwt $KONG_ADMIN_JWT\n</code></pre> On success, the above command prints the user id.</p> Seeding an admin user using snap options <p>To spin up a pre-configured and securely accessible EdgeX instance, the snap provides a way to pass the public key of a single user with snap options. When requested, the user is created with user <code>admin</code>, id <code>1</code> and JWT signing algorithm <code>ES256</code>. The snap option for passing the public key is: <code>apps.secrets-config.proxy.admin.public-key</code>.</p> <p>This is particularly useful when seeding the snap from a Gadget on an Ubuntu Core system.</p> <p>Generating a JWT token for the example user</p> <p>On success, a JWT token is printed out and written to <code>user-jwt.txt</code> file. We use the user id <code>1000</code> as set in the previous example. <pre><code>edgexfoundry.secrets-config proxy jwt --algorithm ES256 --private_key private.pem --id 1000 --expiration=1h | tee user-jwt.txt\n</code></pre></p> <p>It is also possible to create the JWT token using bash and openssl. But that is beyond the scope of this guide.</p> <p>Once you have the token, you can access the services via the API Gateway.</p> <p>Calling an API on behalf of example user</p> <p><pre><code>curl --insecure https://localhost:8443/core-data/api/v2/ping -H \"Authorization: Bearer $(cat user-jwt.txt)\"\n</code></pre> Output: <code>{\"apiVersion\":\"v2\",\"timestamp\":\"Mon May  2 12:14:17 CEST 2022\",\"serviceName\":\"core-data\"}</code></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#accessing-consul","title":"Accessing Consul","text":"<p>Consul API and UI can be accessed using the consul token (Secret ID). For the snap, token is the value of <code>SecretID</code> typically placed in a JSON file at <code>/var/snap/edgexfoundry/current/secrets/consul-acl-token/bootstrap_token.json</code>.</p> <p>Example</p> <p>To get the token: <pre><code>$ sudo cat /var/snap/edgexfoundry/current/secrets/consul-acl-token/bootstrap_token.json | jq -r '.SecretID' | tee consul-token.txt\n</code></pre> The output is printed out and written to <code>consul-token.txt</code>. Example output: <code>ee3964d0-505f-6b62-4c88-0d29a8226daa</code></p> <p>Try it out locally: <pre><code>curl --insecure --silent http://localhost:8500/v1/kv/edgex/core/2.0/core-data/Service/Port -H \"X-Consul-Token:$(cat consul-token.txt)\"\n</code></pre></p> <p>Through the API Gateway: We need to pass both the Consul token and Secret Store token obtained in Adding API Gateway users examples. <pre><code>curl --insecure --silent https://localhost:8443/consul/v1/kv/edgex/core/2.0/core-data/Service/Port -H \"X-Consul-Token:$(cat consul-token.txt)\" -H \"Authorization: Bearer $(cat user-jwt.txt)\"\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#changing-tls-certificates","title":"Changing TLS certificates","text":"<p>The API Gateway setup generates a self-signed certificate by default. To replace that with your own certificate, refer to API Gateway guide: Using a bring-your-own external TLS certificate for API gateway and use the snapped <code>edgexfoundry.secrets-config</code> utility.</p> <p>To get the usage help: <pre><code>edgexfoundry.secrets-config proxy tls -h\n</code></pre> You may also refer to the secrets-config proxy documentation.</p> <p>Example</p> <p>Given the following files created outside the scope of this document:</p> <ul> <li><code>cert.pem</code> certificate</li> <li><code>privkey.pem</code> private key</li> <li><code>ca.pem</code> certificate authority file (if not available in root certificates)</li> </ul> <p>Read the API Gateway token: <pre><code>KONG_ADMIN_JWT=`sudo cat /var/snap/edgexfoundry/current/secrets/security-proxy-setup/kong-admin-jwt`\n</code></pre></p> <p>Add the certificate, using Kong Admin JWT to authenticate: <pre><code>edgexfoundry.secrets-config proxy tls --incert cert.pem --inkey privkey.pem --admin_api_jwt $KONG_ADMIN_JWT\n</code></pre></p> <p>Try it out: <pre><code>curl --cacert ca.pem https://localhost:8443/core-data/api/v2/ping\n</code></pre> Output: <code>{\"message\":\"Unauthorized\"}</code> This means that TLS is setup correctly, but the request is not authorized. Set the <code>-v</code> command for diagnosing TLS issues. The <code>--cacert</code> can be omitted if the CA is available in root certificates (e.g. CA-signed or pre-installed CA certificate).</p> Seeding a custom TLS certificate using snap options <p>To spin up an EdgeX instance with a custom certificate, the snap provides the following configuration options:</p> <ul> <li><code>apps.secrets-config.proxy.tls.cert</code></li> <li><code>apps.secrets-config.proxy.tls.key</code></li> <li><code>apps.secrets-config.proxy.tls.snis</code> (comma-separated values)</li> </ul> <p>This is particularly useful when seeding the snap from a Gadget on an Ubuntu Core system.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#secret-store-token","title":"Secret Store token","text":"<p>The services inside standalone snaps (e.g. device, app snaps) automatically receive a Secret Store token when:</p> <ul> <li>The standalone snap is downloaded and installed from the store</li> <li>The platform snap is downloaded and installed from the store</li> <li>Both snaps are installed on the same machine</li> <li>The service is registered as an add-on service</li> </ul> <p>The <code>edgex-secretstore-token</code> content interface provides the mechanism to automatically supply tokens to connected snaps.</p> <p>Execute the following command to check the status of connections: <pre><code>sudo snap connections edgexfoundry\n</code></pre></p> <p>To manually connect the edgexfoundry's plug to a standalone snap's slot: <pre><code>snap connect edgexfoundry:edgex-secretstore-token &lt;snap&gt;:edgex-secretstore-token\n</code></pre></p> <p>Note that the token has a limited expiry time of 1h by default. The connection and service startup should happen within the validity period.</p> <p>To better understand the snap connections, read the interface management</p> <p>Extend the default Secret Store token TTL</p> <p>Set TOKENFILEPROVIDER_DEFAULTTOKENTTL for security-secretstore-setup and restart: <pre><code>sudo snap set edgexfoundry app-options=true\nsudo snap set edgexfoundry apps.security-secretstore-setup.config.tokenfileprovider-defaulttokenttl=72h\nsudo snap restart edgexfoundry.security-secretstore-setup\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#add-on-services","title":"Add-on services","text":"<p>The platform is pre-configured with a set of add-on services.</p> <p>The equivalent snap options for addon services are:</p> <ul> <li><code>apps.security-secretstore-setup.config.add-secretstore-tokens</code></li> <li><code>apps.security-secretstore-setup.config.add-known-secrets</code></li> <li><code>apps.security-bootstrapper.config.add-registry-acl-roles</code></li> </ul> <p>Query Secret Store tokens</p> <p><pre><code>sudo snap get edgexfoundry apps.security-secretstore-setup.config.add-secretstore-tokens\n</code></pre> Outputs: <code>app-functional-tests,app-rules-engine,app-http-export,...</code></p> <p>Adding a new service is possible by appending its name to the value of the above options.</p> <p>Add an add-on service with known secrets and Consul ACL role</p> <p>First, enable the new snap options, if they aren't:</p> <pre><code>sudo snap set edgexfoundry app-options=true\n</code></pre> <p>For each option, we need to:</p> <ol> <li>Query the existing items</li> <li>Append the new service to the existing items</li> <li>Set the appended string</li> </ol> <pre><code>SERVICE=\"my-new-service\"\n\n# Secret store token\nTEMP1=$(sudo snap get edgexfoundry apps.security-secretstore-setup.config.add-secretstore-tokens)\nsudo snap set edgexfoundry apps.security-secretstore-setup.config.add-secretstore-tokens=\"$TEMP1,$SERVICE\"\n\n# Include known secrets (e.g. Redis DB's credentials) to service's secret store\nTEMP2=$(sudo snap get edgexfoundry apps.security-secretstore-setup.config.add-known-secrets)\nsudo snap set edgexfoundry apps.security-secretstore-setup.config.add-known-secrets=\"$TEMP2,redisdb[$SERVICE]\"\n\n# Registry ACL roles for the service\nTEMP3=$(sudo snap get edgexfoundry apps.security-bootstrapper.config.add-registry-acl-roles)\nsudo snap set edgexfoundry apps.security-bootstrapper.config.add-registry-acl-roles=\"$TEMP3,$SERVICE\"\n\n# Verify the new values before losing temp variables\nsudo snap get edgexfoundry apps -d\n\n# Run the bootstrappers:\nsudo snap start edgexfoundry.security-secretstore-setup # for creating new tokens\nsudo snap start edgexfoundry.security-consul-bootstrapper # for applying new consul ACL roles\n</code></pre> <p>To verify that the token has been generated and the service has been added to <code>ADD_REGISTRY_ACL_ROLES</code> environment variable, inspecting the following files:</p> <ul> <li><code>/var/snap/edgexfoundry/current/secrets/&lt;service&gt;/secrets-token.json</code> where <code>&lt;service&gt;</code> is the service name</li> <li><code>/var/snap/edgexfoundry/current/config/security-bootstrapper/res/security-bootstrapper.env</code></li> </ul>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#edgex-ui","title":"EdgeX UI","text":"<p>| Installation | Managing Services | Debugging | Source |</p> <p>For usage instructions, please refer to the Graphical User Interface (GUI) guide.</p> <p>By default, the UI is reachable locally at: http://localhost:4000</p> <p>A valid JWT token is required to access the UI; follow Adding API Gateway users steps to generate a token.</p> <p>To enable all the functionalities of the UI, the following support services should be running:</p> <ul> <li>Support Scheduler</li> <li>Support Notifications</li> <li>System Management Agent</li> <li>EdgeX eKuiper</li> </ul> <p>For example, to start/install all: <pre><code>sudo snap start edgexfoundry.support-scheduler\nsudo snap start edgexfoundry.support-notifications\nsudo snap start edgexfoundry.sys-mgmt-agent\nsudo snap install edgex-ekuiper\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#edgex-cli","title":"EdgeX CLI","text":"<p>| Installation | Source |</p> <p>For usage instructions, refer to Command Line Interface (CLI) guide.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#edgex-ekuiper","title":"EdgeX eKuiper","text":"<p>| Installation | Managing Services | Debugging | Source |</p> <p>EdgeX 2.2</p> <p>This version of EdgeX introduces a standalone EdgeX eKuiper snap. The new snap is the supported way of using eKuiper with other EdgeX snaps.</p> <p>For the documentation of the standalone EdgeX eKuiper snap, visit the README.</p> <p>Note</p> <p>The standalone EdgeX eKuiper snap documented here should not be confused with the deprecated <code>edgexfoundry.kuiper</code> and <code>edgexfoundry.kuiper-cli</code> apps built into the platform. The standalone snap can provide similar functionality.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#app-service-configurable","title":"App Service Configurable","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-app-service-configurable/current/config/\n\u2514\u2500\u2500 res\n    \u251c\u2500\u2500 external-mqtt-trigger\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configuration.toml\n    \u251c\u2500\u2500 functional-tests\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configuration.toml\n    \u251c\u2500\u2500 http-export\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configuration.toml\n    \u251c\u2500\u2500 metrics-influxdb\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configuration.toml\n    \u251c\u2500\u2500 mqtt-export\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configuration.toml\n    \u251c\u2500\u2500 push-to-core\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configuration.toml\n    \u2514\u2500\u2500 rules-engine\n        \u2514\u2500\u2500 configuration.toml\n</code></pre></p> <p>Please refer to App Service Configurable guide for detailed usage instructions.</p> <p>Profile</p> <p>Before you can start the service, you must select one of available profiles,  using snap options.</p> <p>For example, to set <code>mqtt-export</code> profile using the snap CLI: <pre><code>sudo snap set edgex-app-service-configurable profile=mqtt-export\n</code></pre></p> <p>Note</p> <p>The standalone App Service Configurable snap documented above should not be confused with the deprecated <code>edgexfoundry.app-service-configurable</code>, built into the platform snap. The standalone snap can serve the same functionality of filtering events for eKuiper by using the rules-engine profile.</p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#app-rfid-llrp-inventory","title":"App RFID LLRP Inventory","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-app-rfid-llrp-inventory/current/config/\n\u2514\u2500\u2500 app-rfid-llrp-inventory\n    \u2514\u2500\u2500 res\n        \u2514\u2500\u2500 configuration.toml\n</code></pre></p> <p>Aliases</p> <p>The aliases need to be provided for the service to work.  See Setting the Aliases.</p> <p>For the snap, this can either be by:</p> <ul> <li>using a config-provider-snap to provide a <code>configuration.toml</code> file with the correct aliases, before startup</li> <li>setting the values manually in Consul during or after deployment</li> </ul>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-camera","title":"Device Camera","text":"<p>| Installation  | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-device-camera/current/config/\n\u2514\u2500\u2500 device-camera\n    \u2514\u2500\u2500 res\n        \u251c\u2500\u2500 configuration.toml\n        \u251c\u2500\u2500 devices\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 camera.toml\n        \u2514\u2500\u2500 profiles\n            \u251c\u2500\u2500 camera-axis.yaml\n            \u251c\u2500\u2500 camera-bosch.yaml\n            \u2514\u2500\u2500 camera.yaml\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-gpio","title":"Device GPIO","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-device-gpio/current/config\n\u2514\u2500\u2500 device-gpio\n    \u2514\u2500\u2500 res\n        \u251c\u2500\u2500 configuration.toml\n        \u251c\u2500\u2500 devices\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 device.custom.gpio.toml\n        \u2514\u2500\u2500 profiles\n            \u2514\u2500\u2500 device.custom.gpio.yaml\n</code></pre></p> <p>GPIO Access</p> <p>This snap is strictly confined which means that the access to interfaces are subject to various security measures.</p> <p>On a Linux distribution without snap confinement for GPIO (e.g. Raspberry Pi OS 11), the snap may be able to access the GPIO directly, without any snap interface and manual connections.</p> <p>On Linux distributions with snap confinement for GPIO such as Ubuntu Core, the GPIO access is possible via the gpio interface, provided by a gadget snap.  The official Raspberry Pi Ubuntu Core image includes that gadget. It is NOT possible to use this snap on Linux distributions that have the GPIO confinement but not the interface (e.g. Ubuntu Server 20.04), unless for development purposes.</p> <p>In development environments, it is possible to install the snap in dev mode (using <code>--devmode</code> flag which disables security confinement and automatic upgrades) to allow direct GPIO access.</p> <p>The <code>gpio</code> interface provides slots for each GPIO channel. The slots can be listed using: <pre><code>$ sudo snap interface gpio\nname:    gpio\nsummary: allows access to specific GPIO pin\nplugs:\n  - edgex-device-gpio\nslots:\n  - pi:bcm-gpio-0\n  - pi:bcm-gpio-1\n  - pi:bcm-gpio-10\n  ...\n</code></pre></p> <p>The slots are not connected automatically. For example, to connect GPIO-17: <pre><code>$ sudo snap connect edgex-device-gpio:gpio pi:bcm-gpio-17\n</code></pre></p> <p>Check the list of connections: <pre><code>$ sudo snap connections\nInterface        Plug                            Slot              Notes\ngpio             edgex-device-gpio:gpio          pi:bcm-gpio-17    manual\n\u2026\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-grove","title":"Device Grove","text":"<p>| Installation | Source |</p> <p>beta</p> <p>Device Grove snap is released as beta for <code>arm64</code>. It is compatible with EdgeX 1.3 only.</p> <p>It does not support the snap configurations described above.</p> <p>The default configuration files are under <code>/var/snap/edgex-device-grove/current/config/</code>. </p> <p>This device service is started by default.  Changes to the configuration files require a restart to take effect: <pre><code>sudo snap restart edgex-device-grove\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-modbus","title":"Device Modbus","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-device-modbus/current/config/\n\u2514\u2500\u2500 device-modbus\n    \u2514\u2500\u2500 res\n        \u251c\u2500\u2500 configuration.toml\n        \u251c\u2500\u2500 devices\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 modbus.test.devices.toml\n        \u2514\u2500\u2500 profiles\n            \u2514\u2500\u2500 modbus.test.device.profile.yml\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-mqtt","title":"Device MQTT","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-device-mqtt/current/config/\n\u2514\u2500\u2500 device-mqtt\n    \u2514\u2500\u2500 res\n        \u251c\u2500\u2500 configuration.toml\n        \u251c\u2500\u2500 devices\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 mqtt.test.device.toml\n        \u2514\u2500\u2500 profiles\n            \u2514\u2500\u2500 mqtt.test.device.profile.yml\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-rest","title":"Device REST","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-device-rest/current/config/\n\u2514\u2500\u2500 device-rest\n    \u2514\u2500\u2500 res\n        \u251c\u2500\u2500 configuration.toml\n        \u251c\u2500\u2500 devices\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample-devices.toml\n        \u2514\u2500\u2500 profiles\n            \u251c\u2500\u2500 sample-image-device.yaml\n            \u251c\u2500\u2500 sample-json-device.yaml\n            \u2514\u2500\u2500 sample-numeric-device.yaml\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-rfid-llrp","title":"Device RFID LLRP","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-device-rfid-llrp/current/config/\n\u2514\u2500\u2500 device-rfid-llrp\n    \u2514\u2500\u2500 res\n        \u251c\u2500\u2500 configuration.toml\n        \u251c\u2500\u2500 devices\n        \u251c\u2500\u2500 profiles\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 llrp.device.profile.yaml\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 llrp.impinj.profile.yaml\n        \u2514\u2500\u2500 provision_watchers\n            \u251c\u2500\u2500 impinj.provision.watcher.json\n            \u2514\u2500\u2500 llrp.provision.watcher.json\n</code></pre></p> <p>Subnet setup</p> <p>The <code>DiscoverySubnets</code> setting needs to be provided before a device discovery can occur. This can be done in a number of ways:</p> <ul> <li> <p>Using <code>snap set</code> to set your local subnet information. Example:</p> <pre><code>sudo snap set edgex-device-rfid-llrp apps.device-rfid-llrp.config.app-custom.discovery-subnets=\"192.168.10.0/24\"\n\ncurl -X POST http://localhost:59989/api/v2/discovery\n</code></pre> </li> <li> <p>Using a config-provider-snap to set device configuration</p> </li> <li> <p>Using the <code>auto-configure</code> command. </p> <p>This command finds all local network interfaces which are online and non-virtual and sets the value of <code>DiscoverySubnets</code>  in Consul. When running with security enabled, it requires a Consul token, so it needs to be run as follows:</p> <pre><code># get Consul ACL token\nCONSUL_TOKEN=$(sudo cat /var/snap/edgexfoundry/current/secrets/consul-acl-token/bootstrap_token.json | jq \".SecretID\" | tr -d '\"') echo $CONSUL_TOKEN # start the device service and connect the interfaces required for network interface discovery\nsudo snap start edgex-device-rfid-llrp.device-rfid-llrp \nsudo snap connect edgex-device-rfid-llrp:network-control \nsudo snap connect edgex-device-rfid-llrp:network-observe # run the nework interface discovery, providing the Consul token\nedgex-device-rfid-llrp.auto-configure $CONSUL_TOKEN\n</code></pre> </li> </ul>"},{"location":"getting-started/Ch-GettingStartedSnapUsers/#device-snmp","title":"Device SNMP","text":"<p>| Installation | Configuration | Managing Services | Debugging | Source |</p> <p>The service is not started by default. Please refer to configuration and managing services.</p> <p>The default configuration files are installed at: <pre><code>/var/snap/edgex-device-snmp/current/config/\n\u2514\u2500\u2500 device-snmp\n    \u2514\u2500\u2500 res\n        \u251c\u2500\u2500 configuration.toml\n        \u251c\u2500\u2500 devices\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 device.snmp.trendnet.TPE082WS.toml\n        \u2514\u2500\u2500 profiles\n            \u251c\u2500\u2500 device.snmp.patlite.yaml\n            \u251c\u2500\u2500 device.snmp.switch.dell.N1108P-ON.yaml\n            \u2514\u2500\u2500 device.snmp.trendnet.TPE082WS.yaml\n</code></pre></p>"},{"location":"getting-started/Ch-GettingStartedUsers/","title":"Getting Started as a User","text":"<p>This section provides instructions for Users to get EdgeX up and running. If you are a Developer, you should read Getting Started as a Developer.</p> <p>EdgeX is a collection of more than a dozen micro services that are deployed to provide a minimal edge platform capability.</p> <p>You can download EdgeX micro service source code and build your own micro services. However, if you do not have a need to change or add to EdgeX, then you do not need to download source code. Instead, you can download and run the pre-built EdgeX micro service artifacts.</p> <p>The EdgeX community builds and creates Docker images as well as Snap packages with each release. The community also provides the latest unstable builds (prior to releases).</p> <p>Please continue by referring to:</p> <ul> <li>Getting Started using Docker</li> <li>Getting Started using Snaps</li> </ul>"},{"location":"getting-started/Ch-GettingStartedUsersNexus/","title":"Getting Docker Images from EdgeX Nexus Repository","text":"<p>Released EdgeX Docker container images are available from Docker Hub. Please refer to the Getting Started using Docker for instructions related to stable releases.</p> <p>In some cases, it may be necessary to get your EdgeX container images from the Nexus repository.  The Linux Foundation manages the Nexus repository for the project.</p> <p>Warning</p> <p>Containers used from Nexus are considered \"work in progress\". There is no guarantee that these containers will function properly or function properly with other containers from the current release.</p> <p>Nexus contains the EdgeX project staging and development container images. In other words, Nexus contains work-in-progress or pre-release images.  These, pre-release/work-in-progress Docker images are built nightly and made available at the following Nexus location:</p> <pre><code>nexus3.edgexfoundry.org:10004\n</code></pre>"},{"location":"getting-started/Ch-GettingStartedUsersNexus/#rationale-to-use-nexus-images","title":"Rationale To Use Nexus Images","text":"<p>Reasons you might want to use container images from Nexus include:</p> <ol> <li>The container is not available from Docker Hub (or Docker Hub is down temporarily)</li> <li>You need the latest development container image (the work in progress)</li> <li>You are working in a Windows or non-Linux environment and you are unable to build a container without some issues.</li> </ol> <p>A set of Docker Compose files have been created to allow you to get and use the latest EdgeX service images from Nexus.  Find these Nexus \"Nightly Build\" Compose files in the <code>main</code> branch of the <code>edgex-compose</code> respository in GitHub.  The EdgeX development team provides these Docker Compose files.  As with the EdgeX release Compose files, you will find several different Docker Compose files that allow you to get the type of EdgeX instance setup based on: </p> <ul> <li>your hardware (x86 or ARM)</li> <li>your desire to have security services on or off</li> <li>your desire to run with the EdgeX GUI included</li> </ul> <p></p> <p>Warning</p> <p>The \"Nightly Build\" images are provided as-is and may not always function properly or with other EdgeX services.  Use with caution and typically only if you are a developer/contributor to EdgeX. These images represent the latest development work and may not have been thoroughly tested or integrated.</p>"},{"location":"getting-started/Ch-GettingStartedUsersNexus/#using-nexus-images","title":"Using Nexus Images","text":"<p>The operations to pull the images and run the Nexus Repository containers are the same as when using EdgeX images from Docker Hub (see Getting Started using Docker).</p> <p>To get container images from the Nexus Repository, in a command terminal, change directories to the location of your downloaded Nexus Docker Compose yaml.  Rename the file to docker-compose.yml.  Then run the following command in the terminal to pull (fetch) and then start the EdgeX Nexus-image containers.</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"getting-started/Ch-GettingStartedUsersNexus/#using-a-single-nexus-image","title":"Using a Single Nexus Image","text":"<p>In some cases, you may only need to use a single image from Nexus while other EdgeX services are created from the Docker Hub images.  In this case, you can simply replace the image location for the selected image in your original Docker Compose file.  The address of Nexus is nexus3.edgexfoundry.org at port 10004.  So, if you wished to use the EdgeX core data image from Nexus, you would replace the name and location of the core data image <code>edgexfoundry/core-data:2.0.0</code> with <code>nexus3.edgexfoundry.org:10004/core-data:latest</code> in the Compose file.</p> <p> </p> <p>Note</p> <p>The example above replaces the Ireland core data service from Docker Hub with the latest core data image in Nexus. </p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will get EdgeX up and running on your machine in as little as 5 minutes using Docker containers. We will skip over lengthy descriptions for now. The goal here is to get you a working IoT Edge stack, from device to cloud, as simply as possible.  </p> <p>When you need more detailed instructions or a breakdown of some of the commands you see in this quick start, see either the Getting Started as a User or Getting Started as a Developer guides.</p>"},{"location":"getting-started/quick-start/#setup","title":"Setup","text":"<p>The fastest way to start running EdgeX is by using our pre-built Docker images. To use them you'll need to install the following:</p> <ul> <li>Docker https://docs.docker.com/install/</li> <li>Docker Compose https://docs.docker.com/compose/install/</li> </ul>"},{"location":"getting-started/quick-start/#running-edgex","title":"Running EdgeX","text":"<p>Info</p> <p>Jakarta (v 2.1) is the latest version of EdgeX and used by example in this guide.</p> <p>Once you have Docker and Docker Compose installed, you need to:</p> <ul> <li>download / save the latest <code>docker-compose</code> file</li> <li>issue command to download and run the EdgeX Foundry Docker images from Docker Hub</li> </ul> <p>This can be accomplished with a single command as shown below (please note the tabs for x86 vs ARM architectures).</p> x86ARM <pre><code>curl https://raw.githubusercontent.com/edgexfoundry/edgex-compose/jakarta/docker-compose-no-secty.yml -o docker-compose.yml; docker-compose up -d\n</code></pre> <pre><code>curl https://raw.githubusercontent.com/edgexfoundry/edgex-compose/Jakarta/docker-compose-no-secty-arm64.yml -o docker-compose.yml; docker-compose up -d\n</code></pre> <p>Verify that the EdgeX containers have started: <pre><code>docker-compose ps \n</code></pre> If all EdgeX containers pulled and started correctly and without error, you should see a process status (ps) that looks similar to the image above.</p>"},{"location":"getting-started/quick-start/#connected-devices","title":"Connected Devices","text":"<p>EdgeX Foundry provides a Virtual device service which is useful for testing and development.  It simulates a number of devices, each randomly generating data of various types and within configurable parameters.  For example, the Random-Integer-Device will generate random integers.</p> <p>The Virtual Device (also known as Device Virtual) service is already a service pulled and running as part of the default EdgeX configuration.</p> <p>You can verify that Virtual Device readings are already being sent by querying the EdgeX core data service for the event records sent for Random-Integer-Device: <pre><code>curl http://localhost:59880/api/v2/event/device/name/Random-Integer-Device\n</code></pre> Verify the virtual device service is operating correctly by requesting the last event records received by core data for the Random-Integer-Device.</p> <p>Note</p> <p>By default, the maximum number of events returned will be 20 (the default limit).  You can pass a <code>limit</code> parameter to get more or less event records. <pre><code>curl http://localhost:59880/api/v2/event/device/name/Random-Integer-Device?limit=50\n</code></pre></p>"},{"location":"getting-started/quick-start/#controlling-the-device","title":"Controlling the Device","text":"<p>Reading data from devices is only part of what EdgeX is capable of.  You can also use it to control your devices - this is termed 'actuating' the device. When a device registers with the EdgeX services, it provides a Device Profile that describes both the data readings available from that device, and also the commands that control it. </p> <p>When our Virtual Device service registered the device <code>Random-Integer-Device</code>, it used a profile to also define commands that allow you to tell the service not to generate random integers, but to always return a value you set.</p> <p>You won't call commands on devices directly, instead you use the EdgeX Foundry Command Service to do that. The first step is to check what commands are available to call by asking the Command service about your device: <pre><code>curl http://localhost:59882/api/v2/device/name/Random-Integer-Device\n</code></pre></p> <p>This will return a lot of JSON, because there are a number of commands you can call on this device, but the commands we're going to use in this guide are <code>Int16</code> (the comand to get the current integer 16 value) and <code>WriteInt16Value</code> (the command to disable the generation of the random integer 16 number and specify the integer value to return).  Look for the <code>Int16</code> and <code>WriteInt16Value</code> commands like those shown in the JSON as below: <pre><code>{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"deviceCoreCommand\": {\n\"deviceName\": \"Random-Integer-Device\",\n\"profileName\": \"Random-Integer-Device\",\n\"coreCommands\": [\n{\n\"name\": \"WriteInt16Value\",\n\"set\": true,\n\"path\": \"/api/v2/device/name/Random-Integer-Device/WriteInt16Value\",\n\"url\": \"http://edgex-core-command:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"Int16\",\n\"valueType\": \"Int16\"\n},\n{\n\"resourceName\": \"EnableRandomization_Int16\",\n\"valueType\": \"Bool\"\n}\n]\n},\n{\n\"name\": \"Int16\",\n\"get\": true,\n\"set\": true,\n\"path\": \"/api/v2/device/name/Random-Integer-Device/Int16\",\n\"url\": \"http://edgex-core-command:59882\",\n\"parameters\": [\n{\n\"resourceName\": \"Int16\",\n\"valueType\": \"Int16\"\n}\n]\n}\n...\n\n]\n}\n}\n</code></pre> You'll notice that the commands have <code>get</code> or <code>set</code> (or both) options. A get call will return a random number (integer 16), and is what is being called automatically to send data into the rest of EdgeX (specifically core data). You can also call get manually using the URL provided (with no additinal parameters needed): <pre><code>curl http://localhost:59882/api/v2/device/name/Random-Integer-Device/Int16\n</code></pre></p> <p>Warning</p> <p>Notice that localhost replaces edgex-core-command here. That's because the EdgeX Foundry services are running in Docker.  Docker recognizes the internal hostname edgex-core-command, but when calling the service from outside of Docker, you have to use localhost to reach it.</p> <p>This command will return a JSON result that looks like this: <pre><code>{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"event\": {\n\"apiVersion\": \"v2\",\n\"id\": \"6d829637-730c-4b70-9208-dc179070003f\",\n\"deviceName\": \"Random-Integer-Device\",\n\"profileName\": \"Random-Integer-Device\",\n\"sourceName\": \"Int16\",\n\"origin\": 1625605672073875500,\n\"readings\": [\n{\n\"id\": \"545b7add-683b-4745-84f1-d859f3d839e0\",\n\"origin\": 1625605672073875500,\n\"deviceName\": \"Random-Integer-Device\",\n\"resourceName\": \"Int16\",\n\"profileName\": \"Random-Integer-Device\",\n\"valueType\": \"Int16\",\n\"binaryValue\": null,\n\"mediaType\": \"\",\n\"value\": \"-8146\"\n}\n]\n}\n}\n</code></pre></p> <p> A call to GET of the Int16 device's Random-Integer-Device operation through the command service results in the next random value produced by the device in JSON format.</p> <p>The default range for this reading is -32,768 to 32,767.  In the example above, a value of <code>-8146</code> was returned as the reading value.  With the service set up to randomly return values, the value returned will be different each time the <code>Int16</code> command is sent.  However, we can use the <code>WriteInt16Value</code> command to disable random values from being returned and instead specify a value to return.  Use the curl command below to call the set command to disable random values and return the value <code>42</code> each time. </p> <pre><code>curl -X PUT -d '{\"Int16\":\"42\", \"EnableRandomization_Int16\":\"false\"}' http://localhost:59882/api/v2/device/name/Random-Integer-Device/WriteInt16Value\n</code></pre> <p>Warning</p> <p>Again, also notice that localhost replaces edgex-core-command.</p> <p>If successful, the service will confirm your setting of the value to be returned with a <code>200</code> status code.</p> <p> A call to the device's SET command through the command service will return the API version and a status code (200 for success).</p> <p>Now every time we call get on the <code>Int16</code> command, the returned value will be <code>42</code>.</p> <p></p> <p>A call to GET of the Int16 device's Random-Integer-Device operation after setting the Int16 value to 42 and disabling randomization will always return a value of 42.</p>"},{"location":"getting-started/quick-start/#exporting-data","title":"Exporting Data","text":"<p>EdgeX provides exporters (called application services) for a variety of cloud services and applications. To keep this guide simple, we're going to use the community provided 'application service configurable' to send the EdgeX data to a public MQTT broker hosted by HiveMQ.  You can then watch for the EdgeX event data via HiveMQ provided MQTT browser client.</p> <p>First add the following application service to your docker-compose.yml file right after the 'app-service-rules' service (the first service in the file).  Spacing is important in YAML, so make sure to copy and paste it correctly.</p> <pre><code>  app-service-mqtt:\ncontainer_name: edgex-app-mqtt\ndepends_on:\n- consul\n- data\nenvironment:\nCLIENTS_CORE_COMMAND_HOST: edgex-core-command\nCLIENTS_CORE_DATA_HOST: edgex-core-data\nCLIENTS_CORE_METADATA_HOST: edgex-core-metadata\nCLIENTS_SUPPORT_NOTIFICATIONS_HOST: edgex-support-notifications\nCLIENTS_SUPPORT_SCHEDULER_HOST: edgex-support-scheduler\nDATABASES_PRIMARY_HOST: edgex-redis\nEDGEX_PROFILE: mqtt-export\nEDGEX_SECURITY_SECRET_STORE: \"false\"\nMESSAGEQUEUE_HOST: edgex-redis\nREGISTRY_HOST: edgex-core-consul\nSERVICE_HOST: edgex-app-mqtt\nTRIGGER_EDGEXMESSAGEBUS_PUBLISHHOST_HOST: edgex-redis\nTRIGGER_EDGEXMESSAGEBUS_SUBSCRIBEHOST_HOST: edgex-redis\nWRITABLE_PIPELINE_FUNCTIONS_MQTTEXPORT_PARAMETERS_BROKERADDRESS: tcp://broker.mqttdashboard.com:1883\nWRITABLE_PIPELINE_FUNCTIONS_MQTTEXPORT_PARAMETERS_TOPIC: EdgeXEvents\nhostname: edgex-app-mqtt\nimage: edgexfoundry/app-service-configurable:2.0.0\nnetworks:\nedgex-network: {}\nports:\n- 127.0.0.1:59702:59702/tcp\nread_only: true\nsecurity_opt:\n- no-new-privileges:true\nuser: 2002:2001\n</code></pre> <p>Note</p> <p>This adds the application service configurable to your EdgeX system.  The application service configurable allows you to configure (versus program) new exports - in this case exporting the EdgeX sensor data to the HiveMQ broker at <code>tcp://broker.mqttdashboard.com:1883</code>.  You will be publishing to the EdgeXEvents topic.</p> <p>For convenience, see documentation on the EdgeX Compose Builder to create custom Docker Compose files.</p> <p>Save the compose file and then execute another compose up command to have Docker Compose pull and start the configurable application service.</p> <p><pre><code>docker-compose up -d\n</code></pre> You can connect to this broker with any MQTT client to watch the sent data. HiveMQ provides a web-based client that you can use.  Use a browser to go to the client's URL.  Once there, hit the Connect button to connect to the HiveMQ public broker.  </p> <p> Using the HiveMQ provided client tool, connect to the same public HiveMQ broker your configurable application service is sending EdgeX data to.</p> <p>Then, use the Subscriptions area to subscribe to the \"EdgeXEvents\" topic.</p> <p> You must subscribe to the same topic - EdgeXEvents - to see the EdgeX data sent by the configurable application service.</p> <p>You will begin seeing your random number readings appear in the Messages area on the screen.</p> <p> Once subscribed, the EdgeX event data will begin to appear in the Messages area on the browser screen.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You now have a full EdgeX deployment reading data from a (virtual) device and publishing it to an MQTT broker in the cloud, and you were able to control your device through commands into EdgeX. </p> <p>It's time to continue your journey by reading the Introduction to EdgeX Foundry, what it is and how it's built. From there you can take the Walkthrough to learn how the micro services work together to control devices and read data from them as you just did.</p>"},{"location":"getting-started/tools/Ch-CommandLineInterface/","title":"Command Line Interface (CLI)","text":""},{"location":"getting-started/tools/Ch-CommandLineInterface/#what-is-edgex-cli","title":"What is EdgeX CLI?","text":"<p>EdgeX CLI is a command-line interface tool for developers, used for interacting with EdgeX Foundry microservices. </p>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#installing-edgex-cli","title":"Installing EdgeX CLI","text":"<p>The client can be installed using a snap</p> <pre><code>sudo snap install edgex-cli\n</code></pre> <p>You can also download the appropriate binary for your operating system from GitHub.</p> <p>If you want to build EdgeX CLI from source, do the following:</p> <pre><code>git clone http://github.com/edgexfoundry/edgex-cli.git\ncd edgex-cli\nmake tidy\nmake build\n./bin/edgex-cli\n</code></pre> <p>For more information, see the EdgeX CLI README.</p>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#features","title":"Features","text":"<p>EdgeX CLI provides access to most of the core and support APIs. The commands map directly to the REST API structure.</p> <p>Running <code>edgex-cli</code> with no arguments shows a list of the available commands and information for each of them, including the name of the service implementing the command. Use the <code>-h</code> or <code>--help</code> flag to get more information about each command.</p> <pre><code>$ edgex-cli\nEdgeX-CLI\n\nUsage:\n  edgex-cli [command]\n\nAvailable Commands:\n  command          Read, write and list commands [Core Command]\n  config           Return the current configuration of all EdgeX core/support microservices\n  device           Add, remove, get, list and modify devices [Core Metadata]\n  deviceprofile    Add, remove, get and list device profiles [Core Metadata]\n  deviceservice    Add, remove, get, list and modify device services [Core Metadata]\n  event            Add, remove and list events\n  help             Help about any command\n  interval         Add, get and list intervals [Support Scheduler]\n  intervalaction   Get, list, update and remove interval actions [Support Scheduler]\n  metrics          Output the CPU/memory usage stats for all EdgeX core/support microservices\n  notification     Add, remove and list notifications [Support Notifications]\n  ping             Ping (health check) all EdgeX core/support microservices\n  provisionwatcher Add, remove, get, list and modify provison watchers [Core Metadata]\n  reading          Count and list readings\n  subscription     Add, remove and list subscriptions [Support Notificationss]\n  transmission     Remove and list transmissions [Support Notifications]\n  version          Output the current version of EdgeX CLI and EdgeX microservices\n\nFlags:\n  -h, --help   help for edgex-cli\n\nUse \"edgex-cli [command] --help\" for more information about a command.\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#commands-implemented-by-all-microservices","title":"Commands implemented by all microservices","text":"<p>The <code>ping</code>, <code>config</code>, <code>metrics</code> and <code>version</code> work with more than one microservice. </p> <p>By default these commands will return values from all core and support services:</p> <pre><code>$ edgex-cli metrics\nService               CpuBusyAvg MemAlloc MemFrees MemLiveObjects MemMallocs MemSys   MemTotalAlloc\ncore-metadata         13         1878936  38262    9445           47707      75318280 5967608\ncore-data             13         1716256  40200    8997           49197      75580424 5949504\ncore-command          13         1737288  31367    8582           39949      75318280 5380584\nsupport-scheduler     10         2612296  20754    20224          40978      74728456 4146800\nsupport-notifications 10         2714480  21199    20678          41877      74728456 4258640\n</code></pre> <p>To only return information for one service, specify the service to use:</p> <pre><code>  -c, --command         use core-command service endpoint\n  -d, --data            use core-data service endpoint\n  -m, --metadata        use core-metadata service endpoint\n  -n, --notifications   use support-notifications service endpoint\n  -s, --scheduler       use support-scheduler service endpoint\n</code></pre> <p>Example: <pre><code>$ edgex-cli metrics -d\nService   CpuBusyAvg MemAlloc MemFrees MemLiveObjects MemMallocs MemSys   MemTotalAlloc\ncore-data 14         1917712  870037   12258          882295     75580424 64148880\n\n$ edgex-cli metrics -c\nService      CpuBusyAvg MemAlloc MemFrees MemLiveObjects MemMallocs MemSys   MemTotalAlloc\ncore-command 13         1618424  90890    8328           99218      75580424 22779448\n\n$ edgex-cli metrics --metadata\nService       CpuBusyAvg MemAlloc MemFrees MemLiveObjects MemMallocs MemSys   MemTotalAlloc\ncore-metadata 12         1704256  39606    8870           48476      75318280 6139912\n</code></pre></p> <p>The <code>-j/--json</code> flag can be used with most of <code>edgex-go</code> commands to return the JSON output:</p> <pre><code>$ edgex-cli metrics --metadata --json\n{\"apiVersion\":\"v2\",\"metrics\":{\"memAlloc\":1974544,\"memFrees\":39625,\"memLiveObjects\":9780,\"memMallocs\":49405,\"memSys\":75318280,\"memTotalAlloc\":6410200,\"cpuBusyAvg\":13}}\n</code></pre> <p>This could then be formatted and filtered using <code>jq</code>:</p> <pre><code>$ edgex-cli metrics --metadata --json | jq '.'\n{\n  \"apiVersion\": \"v2\",\n  \"metrics\": {\n    \"memAlloc\": 1684176,\n    \"memFrees\": 41142,\n    \"memLiveObjects\": 8679,\n    \"memMallocs\": 49821,\n    \"memSys\": 75318280,\n    \"memTotalAlloc\": 6530824,\n    \"cpuBusyAvg\": 12\n  }\n}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#core-command-service","title":"Core-command service","text":""},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-command-list","title":"<code>edgex-cli command list</code>","text":"<p>Return a list of all supported device commands, optionally filtered by device name. </p> <p>Example:</p> <pre><code>$ edgex-cli command list\nName                    Device Name                    Profile Name                   Methods   URL\nBoolArray               Random-Boolean-Device          Random-Boolean-Device          Get, Put  http://localhost:59882/api/v2/device/name/Random-Boolean-Device/BoolArray\nWriteBoolValue          Random-Boolean-Device          Random-Boolean-Device          Put       http://localhost:59882/api/v2/device/name/Random-Boolean-Device/WriteBoolValue\nWriteBoolArrayValue     Random-Boolean-Device          Random-Boolean-Device          Put       http://localhost:59882/api/v2/device/name/Random-Boolean-Device/WriteBoolArrayValue\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-command-read","title":"<code>edgex-cli command read</code>","text":"<p>Issue a read command to the specified device. </p> <p>Example:</p> <pre><code>$ edgex-cli command read -c Int16 -d Random-Integer-Device -j | jq '.'\n{\n  \"apiVersion\": \"v2\",\n  \"statusCode\": 200,\n  \"event\": {\n    \"apiVersion\": \"v2\",\n    \"id\": \"e19f417e-3130-485f-8212-64b593b899f9\",\n    \"deviceName\": \"Random-Integer-Device\",\n    \"profileName\": \"Random-Integer-Device\",\n    \"sourceName\": \"Int16\",\n    \"origin\": 1641484109458647300,\n    \"readings\": [\n      {\n        \"id\": \"dc1f212d-148a-457c-ab13-48aa0fa58dd1\",\n        \"origin\": 1641484109458647300,\n        \"deviceName\": \"Random-Integer-Device\",\n        \"resourceName\": \"Int16\",\n        \"profileName\": \"Random-Integer-Device\",\n        \"valueType\": \"Int16\",\n        \"binaryValue\": null,\n        \"mediaType\": \"\",\n        \"value\": \"587\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-command-write","title":"<code>edgex-cli command write</code>","text":"<p>Issue a write command to the specified device. </p> <p>Example using in-line request body:</p> <pre><code>$ edgex-cli command write -d Random-Integer-Device -c Int8 -b \"{\\\"Int8\\\": \\\"99\\\"}\"\n$ edgex-cli command read -d Random-Integer-Device -c Int8\napiVersion: v2,statusCode: 200\nCommand Name  Device Name            Profile Name           Value Type  Value\nInt8          Random-Integer-Device  Random-Integer-Device  Int8        99\n</code></pre> <p>Example using a file containing the request:</p> <pre><code>$ echo \"{ \\\"Int8\\\":\\\"88\\\" }\" &gt; file.txt\n\n$ edgex-cli command write -d Random-Integer-Device -c Int8 -f file.txt\napiVersion: v2,statusCode: 200\n\n$ edgex-cli command read -d Random-Integer-Device -c Int8\nCommand Name  Device Name            Profile Name           Value Type  Value\nInt8          Random-Integer-Device  Random-Integer-Device  Int8        88\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#core-metadata-service","title":"Core-metadata service","text":""},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceservice-list","title":"<code>edgex-cli deviceservice list</code>","text":"<p>List device services</p> <pre><code>$ edgex-cli deviceservice list\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceservice-add","title":"<code>edgex-cli deviceservice add</code>","text":"<p>Add a device service</p> <pre><code>$ edgex-cli deviceservice add -n TestDeviceService -b \"http://localhost:51234\"\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceservice-name","title":"<code>edgex-cli deviceservice name</code>","text":"<p>Shows information about a device service. Most <code>edgex-cli</code> commands support the <code>-v/--verbose</code> and <code>-j/--json</code> flags:</p> <pre><code>$ edgex-cli deviceservice name -n TestDeviceService\nName               BaseAddress             Description\nTestDeviceService  http://localhost:51234  \n\n$ edgex-cli deviceservice name -n TestDeviceService -v\nName               BaseAddress             Description  AdminState  Id                                    Labels  LastConnected  LastReported  Modified\nTestDeviceService  http://localhost:51234               UNLOCKED    7f29ad45-65dc-46c0-a928-00147d328032  []      0              0             10 Jan 22 17:26 GMT\n\n$ edgex-cli deviceservice name -n TestDeviceService  -j | jq '.'\n{\n  \"apiVersion\": \"v2\",\n  \"statusCode\": 200,\n  \"service\": {\n    \"created\": 1641835585465,\n    \"modified\": 1641835585465,\n    \"id\": \"7f29ad45-65dc-46c0-a928-00147d328032\",\n    \"name\": \"TestDeviceService\",\n    \"baseAddress\": \"http://localhost:51234\",\n    \"adminState\": \"UNLOCKED\"\n  }\n}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceservice-rm","title":"<code>edgex-cli deviceservice rm</code>","text":"<p>Remove a device service</p> <pre><code>$ edgex-cli deviceservice rm -n TestDeviceService\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceservice-update","title":"<code>edgex-cli deviceservice update</code>","text":"<p>Update the device service, getting the ID using jq and confirm that the labels were added</p> <pre><code>$ edgex-cli deviceservice add -n TestDeviceService -b \"http://localhost:51234\"\n{{{v2} c2600ad2-6489-4c3f-9207-5bdffdb8d68f  201} 844473b1-551d-4545-9143-28cfdf68a539}\n\n$ ID=`edgex-cli deviceservice name -n TestDeviceService -j | jq -r '.service.id'`\n$ edgex-cli deviceservice update -n TestDeviceService -i $ID --labels \"label1,label2\"\n{{v2} 9f4a4758-48a1-43ce-a232-828f442c2e34  200}\n\n$ edgex-cli deviceservice name -n TestDeviceService -v\nName               BaseAddress             Description  AdminState  Id                                    Labels           LastConnected  LastReported  Modified\nTestDeviceService  http://localhost:51234               UNLOCKED    844473b1-551d-4545-9143-28cfdf68a539  [label1 label2]  0              0             28 Jan 22 12:00 GMT\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceprofile-list","title":"<code>edgex-cli deviceprofile list</code>","text":"<p>List device profiles</p> <pre><code>$ edgex-cli deviceprofile list\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceprofile-add","title":"<code>edgex-cli deviceprofile add</code>","text":"<p>Add a device profile</p> <pre><code>$ edgex-cli deviceprofile add -n TestProfile -r \"[{\\\"name\\\": \\\"SwitchButton\\\",\\\"description\\\": \\\"Switch On/Off.\\\",\\\"properties\\\": {\\\"valueType\\\": \\\"String\\\",\\\"readWrite\\\": \\\"RW\\\",\\\"defaultValue\\\": \\\"On\\\",\\\"units\\\": \\\"On/Off\\\" } }]\"  -c \"[{\\\"name\\\": \\\"Switch\\\",\\\"readWrite\\\": \\\"RW\\\",\\\"resourceOperations\\\": [{\\\"deviceResource\\\": \\\"SwitchButton\\\",\\\"DefaultValue\\\": \\\"false\\\" }]} ]\"\n{{{v2} 65d083cc-b876-4744-af65-59a00c63fc25  201} 4c0af6b0-4e83-4f3c-a574-dcea5f42d3f0}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceprofile-name","title":"<code>edgex-cli deviceprofile name</code>","text":"<p>Show information about a specifed device profile</p> <pre><code>$ edgex-cli deviceprofile name -n TestProfile\nName         Description  Manufacturer  Model  Name\nTestProfile                                    TestProfile\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-deviceprofile-rm","title":"<code>edgex-cli deviceprofile rm</code>","text":"<p>Remove a device profile</p> <pre><code>$ edgex-cli deviceprofile rm -n TestProfile\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-device-list","title":"<code>edgex-cli device list</code>","text":"<p>List current devices</p> <pre><code>$ edgex-cli device list\nName                           Description                ServiceName        ProfileName                    Labels                    AutoEvents\nRandom-Float-Device            Example of Device Virtual  device-virtual     Random-Float-Device            [device-virtual-example]  [{30s false Float32} {30s false Float64}]\nRandom-UnsignedInteger-Device  Example of Device Virtual  device-virtual     Random-UnsignedInteger-Device  [device-virtual-example]  [{20s false Uint8} {20s false Uint16} {20s false Uint32} {20s false Uint64}]\nRandom-Boolean-Device          Example of Device Virtual  device-virtual     Random-Boolean-Device          [device-virtual-example]  [{10s false Bool}]\nTestDevice                                                TestDeviceService  TestProfile                    []                        []\nRandom-Binary-Device           Example of Device Virtual  device-virtual     Random-Binary-Device           [device-virtual-example]  []\nRandom-Integer-Device          Example of Device Virtual  device-virtual     Random-Integer-Device          [device-virtual-example]  [{15s false Int8} {15s false Int16} {15s false Int32} {15s false Int64}]\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-device-add","title":"<code>edgex-cli device add</code>","text":"<p>Add a new device. This needs a device service and device profile to be created first</p> <pre><code>$ edgex-cli device add -n TestDevice -p TestProfile -s TestDeviceService --protocols \"{\\\"modbus-tcp\\\":{\\\"Address\\\": \\\"localhost\\\",\\\"Port\\\": \\\"1234\\\" }}\"\n{{{v2} e912aa16-af4a-491d-993b-b0aeb8cd9c67  201} ae0e8b95-52fc-4778-892d-ae7e1127ed39}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-device-name","title":"<code>edgex-cli device name</code>","text":"<p>Show information about a specified named device </p> <pre><code>$ edgex-cli device name -n TestDevice\nName        Description  ServiceName        ProfileName  Labels  AutoEvents\nTestDevice               TestDeviceService  TestProfile  []      []\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-device-rm","title":"<code>edgex-cli device rm</code>","text":"<p>Remove a device</p> <pre><code>edgex-cli device rm -n TestDevice\nedgex-cli device list\nedgex-cli device add -n TestDevice -p TestProfile -s TestDeviceService --protocols \"{\\\"modbus-tcp\\\":{\\\"Address\\\": \\\"localhost\\\",\\\"Port\\\": \\\"1234\\\" }}\"\nedgex-cli device list\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-device-update","title":"<code>edgex-cli device update</code>","text":"<p>Update a device </p> <p>This example gets the ID of a device, updates it using that ID and then displays device information to confirm that the labels were added</p> <pre><code>$ ID=`edgex-cli device name -n TestDevice -j | jq -r '.device.id'`\n\n$ edgex-cli device update -n TestDevice -i $ID --labels \"label1,label2\"\n{{v2} 73427492-1158-45b2-9a7c-491a474cecce  200}\n\n$ edgex-cli device name -n TestDevice\nName        Description  ServiceName        ProfileName  Labels           AutoEvents\nTestDevice               TestDeviceService  TestProfile  [label1 label2]  []\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-provisionwatcher-add","title":"<code>edgex-cli provisionwatcher add</code>","text":"<p>Add a new provision watcher</p> <pre><code>$ edgex-cli provisionwatcher add -n TestWatcher --identifiers \"{\\\"address\\\":\\\"localhost\\\",\\\"port\\\":\\\"1234\\\"}\" -p TestProfile -s TestDeviceService\n{{{v2} 3f05f6e0-9d9b-4d96-96df-f394cc2ad6f4  201} ee76f4d8-46d4-454c-a4da-8ad9e06d8d7e}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-provisionwatcher-list","title":"<code>edgex-cli provisionwatcher list</code>","text":"<p>List provision watchers</p> <pre><code>$ edgex-cli provisionwatcher list\nName         ServiceName        ProfileName  Labels  Identifiers\nTestWatcher  TestDeviceService  TestProfile  []      map[address:localhost port:1234]\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-provisionwatcher-name","title":"<code>edgex-cli provisionwatcher name</code>","text":"<p>Show information about a specific named provision watcher </p> <pre><code>$ edgex-cli provisionwatcher name -n TestWatcher\nName         ServiceName        ProfileName  Labels  Identifiers\nTestWatcher  TestDeviceService  TestProfile  []      map[address:localhost port:1234]\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-provisionwatcher-rm","title":"<code>edgex-cli provisionwatcher rm</code>","text":"<p>Remove a provision watcher</p> <pre><code>$ edgex-cli provisionwatcher rm -n TestWatcher\n$ edgex-cli provisionwatcher list\nNo provision watchers available\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-provisionwatcher-update","title":"<code>edgex-cli provisionwatcher update</code>","text":"<p>Update a provision watcher </p> <p>This example gets the ID of a provision watcher, updates it using that ID and then displays  information about it to confirm that the labels were added</p> <pre><code>$ edgex-cli provisionwatcher add -n TestWatcher2 --identifiers \"{\\\"address\\\":\\\"localhost\\\",\\\"port\\\":\\\"1234\\\"}\" -p TestProfile -s TestDeviceService\n{{{v2} fb7b8bcf-8f58-477b-929e-8dac53cddc81  201} 7aadb7df-1ff1-4b3b-8986-b97e0ef53116}\n\n$ ID=`edgex-cli provisionwatcher name -n TestWatcher2 -j | jq -r '.provisionWatcher.id'`\n\n$ edgex-cli provisionwatcher update -n TestWatcher2 -i $ID --labels \"label1,label2\"\n{{v2} af1e70bf-4705-47f4-9046-c7b789799405  200}\n\n$ edgex-cli provisionwatcher name -n TestWatcher2\nName          ServiceName        ProfileName  Labels           Identifiers\nTestWatcher2  TestDeviceService  TestProfile  [label1 label2]  map[address:localhost port:1234]\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#core-data-service","title":"Core-data service","text":""},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-event-add","title":"<code>edgex-cli event add</code>","text":"<p>Create an event with a specified number of random readings</p> <pre><code>$ edgex-cli event add -d Random-Integer-Device -p Random-Integer-Device -r 1 -s Int16 -t int16\nAdded event 75f06078-e8da-4671-8938-ab12ebb2c244\n\n$ edgex-cli event list -v\nOrigin               Device                 Profile                Source  Id                                    Versionable  Readings\n10 Jan 22 15:38 GMT  Random-Integer-Device  Random-Integer-Device  Int16   75f06078-e8da-4671-8938-ab12ebb2c244  {v2}         [{974a70fe-71ef-4a47-a008-c89f0e4e3bb6 1641829092129391876 Random-Integer-Device Int16 Random-Integer-Device Int16 {[] } {13342}}]\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-event-count","title":"<code>edgex-cli event count</code>","text":"<p>Count the number of events in core data, optionally filtering by device name</p> <pre><code>$ edgex-cli event count -d Random-Integer-Device\nTotal Random-Integer-Device events: 54\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-event-list","title":"<code>edgex-cli event list</code>","text":"<p>List all events, optionally specifying a limit and offset</p> <pre><code>$ edgex-cli event list\n</code></pre> <p>To see two readings only, skipping the first 100 readings:</p> <pre><code>$ edgex-cli reading list --limit 2 --offset 100\nOrigin               Device                 ProfileName            Value                ValueType\n28 Jan 22 12:55 GMT  Random-Integer-Device  Random-Integer-Device  22502                Int16\n28 Jan 22 12:55 GMT  Random-Integer-Device  Random-Integer-Device  1878517239016780388  Int64\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-event-rm","title":"<code>edgex-cli event rm</code>","text":"<p>Remove events, specifying either device name or maximum event age in milliseconds - <code>edgex-cli event rm --device {devicename}</code> removes all events for the specified device - <code>edgex-cli event rm --age {ms}</code> removes all events generated in the last {ms} milliseconds</p> <pre><code>$ edgex-cli event rm -a 30000\n$ edgex-cli event count\nTotal events: 0\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-reading-count","title":"<code>edgex-cli reading count</code>","text":"<p>Count the number of readings in core data, optionally filtering by device name</p> <pre><code>$ edgex-cli reading count\nTotal readings: 235\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-reading-list","title":"<code>edgex-cli reading list</code>","text":"<p>List all readings, optionally specifying a limit and offset</p> <pre><code>$ edgex-cli reading list\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#support-scheduler-service","title":"Support-scheduler service","text":""},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-interval-add","title":"<code>edgex-cli interval add</code>","text":"<p>Add an interval</p> <pre><code>$ edgex-cli interval add -n \"hourly\" -i \"1h\"\n{{{v2} c7c51f21-dab5-4307-a4c9-bc5d5f2194d9  201} 98a6d5f6-f4c4-4ec5-a00c-7fe24b9c9a18}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-interval-name","title":"<code>edgex-cli interval name</code>","text":"<p>Return an interval by name</p> <pre><code>$ edgex-cli interval name -n \"hourly\"\nName    Interval  Start  End\nhourly  1h               \n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-interval-list","title":"<code>edgex-cli interval list</code>","text":"<p>List all intervals</p> <pre><code>$ edgex-cli interval list  -j | jq '.'\n{\n  \"apiVersion\": \"v2\",\n  \"statusCode\": 200,\n  \"intervals\": [\n    {\n      \"created\": 1641830955058,\n      \"modified\": 1641830955058,\n      \"id\": \"98a6d5f6-f4c4-4ec5-a00c-7fe24b9c9a18\",\n      \"name\": \"hourly\",\n      \"interval\": \"1h\"\n    },\n    {\n      \"created\": 1641830953884,\n      \"modified\": 1641830953884,\n      \"id\": \"507a2a9a-82eb-41ea-afa8-79a9b0033665\",\n      \"name\": \"midnight\",\n      \"start\": \"20180101T000000\",\n      \"interval\": \"24h\"\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-interval-update","title":"<code>edgex-cli interval update</code>","text":"<p>Update an interval, specifying either ID or name</p> <pre><code>$ edgex-cli interval update -n \"hourly\" -i \"1m\"\n{{v2} 08239cc4-d4d7-4ea2-9915-d91b9557c742  200}\n$ edgex-cli interval name -n \"hourly\" -v\nId                                    Name    Interval  Start  End\n98a6d5f6-f4c4-4ec5-a00c-7fe24b9c9a18  hourly  1m  \n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-interval-rm","title":"<code>edgex-cli interval rm</code>","text":"<p>Delete a named interval and associated interval actions</p> <pre><code>$ edgex-cli interval rm  -n \"hourly\" \n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-intervalaction-add","title":"<code>edgex-cli intervalaction add</code>","text":"<p>Add an interval action</p> <pre><code>$ edgex-cli intervalaction add -n \"name01\" -i \"midnight\" -a \"{\\\"type\\\": \\\"REST\\\", \\\"host\\\": \\\"192.168.0.102\\\", \\\"port\\\": 8080, \\\"httpMethod\\\": \\\"GET\\\"}\"\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-intervalaction-name","title":"<code>edgex-cli intervalaction name</code>","text":"<p>Return an interval action by name</p> <pre><code>$ edgex-cli intervalaction name -n \"name01\"\nName    Interval  Address                                                      Content  ContentType\nname01  midnight  {REST 192.168.0.102 8080 { GET} {  0 0 false false 0} {[]}}  \n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-intervalaction-list","title":"<code>edgex-cli intervalaction list</code>","text":"<p>List all interval actions</p> <pre><code>$ edgex-cli intervalaction list\nName               Interval  Address                                                                                       Content  ContentType\nname01             midnight  {REST 192.168.0.102 8080 { GET} {  0 0 false false 0} {[]}}                                            \nscrub-aged-events  midnight  {REST localhost 59880 {/api/v2/event/age/604800000000000 DELETE} {  0 0 false false 0} {[]}}   \n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-intervalaction-update","title":"<code>edgex-cli intervalaction update</code>","text":"<p>Update an interval action, specifying either ID or name</p> <pre><code>$ edgex-cli intervalaction update -n \"name01\" --admin-state \"LOCKED\"\n{{v2} afc7b08c-5dc6-4923-9786-30bfebc8a8b6  200}\n$ edgex-cli intervalaction name -n \"name01\" -j | jq '.action.adminState'\n\"LOCKED\"\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-intervalaction-rm","title":"<code>edgex-cli intervalaction rm</code>","text":"<p>Delete an interval action by name</p> <pre><code>$ edgex-cli intervalaction rm  -n \"name01\" \n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#support-notifications-service","title":"Support-notifications service","text":""},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-notification-add","title":"<code>edgex-cli notification add</code>","text":"<p>Add a notification to be sent</p> <pre><code>$ edgex-cli notification add -s \"sender01\" -c \"content\" --category \"category04\" --labels \"l3\"\n{{{v2} 13938e01-a560-47d8-bb50-060effdbe490  201} 6a1138c2-b58e-4696-afa7-2074e95165eb}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-notification-list","title":"<code>edgex-cli notification list</code>","text":"<p>List notifications associated with a given label, category or time range</p> <pre><code>$ edgex-cli notification list -c \"category04\"\nCategory    Content  Description  Labels  Sender    Severity  Status\ncategory04  content               [l3]    sender01  NORMAL    PROCESSED\n\n$ edgex-cli notification list --start \"01 jan 20 00:00 GMT\" --end \"01 dec 24 00:00 GMT\"\nCategory    Content  Description  Labels  Sender    Severity  Status\ncategory04  content               [l3]    sender01  NORMAL    PROCESSED\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-notification-rm","title":"<code>edgex-cli notification rm</code>","text":"<p>Delete a notification and all of its associated transmissions</p> <pre><code>$ ID=`edgex-cli notification list -c \"category04\" -v -j | jq -r '.notifications[0].id'`\n$ echo $ID\n6a1138c2-b58e-4696-afa7-2074e95165eb\n$ edgex-cli notification rm -i $ID\n$ edgex-cli notification list -c \"category04\"\nNo notifications available\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-notification-cleanup","title":"<code>edgex-cli notification cleanup</code>","text":"<p>Delete all notifications and corresponding transmissions</p> <pre><code>$ edgex-cli notification cleanup\n$ edgex-cli notification list --start \"01 jan 20 00:00 GMT\" --end \"01 dec 24 00:00 GMT\"\nNo notifications available\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-subscription-add","title":"<code>edgex-cli subscription add</code>","text":"<p>Add a new subscription</p> <pre><code>$ edgex-cli subscription add -n \"name01\" --receiver \"receiver01\" -c \"[{\\\"type\\\": \\\"REST\\\", \\\"host\\\": \\\"localhost\\\", \\\"port\\\": 7770, \\\"httpMethod\\\": \\\"POST\\\"}]\" --labels \"l1,l2,l3\"\n{{{v2} 2bbfdac0-d2e1-4f08-8344-392b8e8ddc5e  201} 1ec08af0-5767-4505-82f7-581fada6006b}\n\n$ edgex-cli subscription add -n \"name02\" --receiver \"receiver01\" -c \"[{\\\"type\\\": \\\"EMAIL\\\", \\\"recipients\\\": [\\\"123@gmail.com\\\"]}]\" --labels \"l1,l2,l3\"\n{{{v2} f6b417ca-740c-4dee-bc1e-c721c0de4051  201} 156fc2b9-de60-423b-9bff-5312d8452c48}\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-subscription-name","title":"<code>edgex-cli subscription name</code>","text":"<p>Return a subscription by its unique name</p> <pre><code>$ edgex-cli subscription name -n \"name01\"\nName    Description  Channels                                                    Receiver    Categories  Labels\nname01               [{REST localhost 7770 { POST} {  0 0 false false 0} {[]}}]  receiver01  []          [l1 l2 l3]\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-subscription-list","title":"<code>edgex-cli subscription list</code>","text":"<p>List all subscriptions, optionally filtered by a given category, label or receiver</p> <pre><code>$ edgex-cli subscription list --label \"l1\"\nName    Description  Channels                                                    Receiver    Categories  Labels\nname02               [{EMAIL  0 { } {  0 0 false false 0} {[123@gmail.com]}}]    receiver01  []          [l1 l2 l3]\nname01               [{REST localhost 7770 { POST} {  0 0 false false 0} {[]}}]  receiver01  []          [l1 l2 l3]\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-subscription-rm","title":"<code>edgex-cli subscription rm</code>","text":"<p>Delete the named subscription</p> <pre><code>$ edgex-cli subscription rm -n \"name01\" \n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-transmission-list","title":"<code>edgex-cli transmission list</code>","text":"<p>To create a transmission, first create a subscription and notifications: <pre><code>$ edgex-cli subscription add -n \"Test-Subscription\" --description \"Test data for subscription\" --categories \"health-check\" --labels \"simple\" --receiver \"tafuser\" --resend-limit 0 --admin-state \"UNLOCKED\" -c \"[{\\\"type\\\": \\\"REST\\\", \\\"host\\\": \\\"localhost\\\", \\\"port\\\": 7770, \\\"httpMethod\\\": \\\"POST\\\"}]\"\n{{{v2} f281ec1a-876e-4a29-a14d-195b66d0506c  201} 3b489d23-b0c7-4791-b839-d9a578ebccb9}\n\n$ edgex-cli notification add -d \"Test data for notification 1\" --category \"health-check\" --labels \"simple\" --content-type \"string\" --content \"This is a test notification\" --sender \"taf-admin\"\n{{{v2} 8df79c7c-03fb-4626-b6e8-bf2d616fa327  201} 0be98b91-daf9-46e2-bcca-39f009d93866}\n\n\n$ edgex-cli notification add -d \"Test data for notification 2\" --category \"health-check\" --labels \"simple\" --content-type \"string\" --content \"This is a test notification\" --sender \"taf-admin\"\n{{{v2} ec0b2444-c8b0-45d0-bbd6-847dd007c2fd  201} a7c65d7d-0f9c-47e1-82c2-c8098c47c016}\n\n$ edgex-cli notification add -d \"Test data for notification 3\" --category \"health-check\" --labels \"simple\" --content-type \"string\" --content \"This is a test notification\" --sender \"taf-admin\"\n{{{v2} 45af7f94-c99e-4fb1-a632-fab5ff475be4  201} f982fc97-f53f-4154-bfce-3ef8666c3911}\n</code></pre></p> <p>Then list the transmissions: <pre><code>$ edgex-cli transmission list\nSubscriptionName   ResendCount  Status\nTest-Subscription  0            FAILED\nTest-Subscription  0            FAILED\nTest-Subscription  0            FAILED\n</code></pre></p>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-transmission-id","title":"<code>edgex-cli transmission id</code>","text":"<p>Return a transmission by ID</p> <pre><code>$ ID=`edgex-cli transmission list -j | jq -r '.transmissions[0].id'`\n$ edgex-cli transmission id -i $ID\nSubscriptionName   ResendCount  Status\nTest-Subscription  0            FAILED\n</code></pre>"},{"location":"getting-started/tools/Ch-CommandLineInterface/#edgex-cli-transmission-rm","title":"<code>edgex-cli transmission rm</code>","text":"<p>Delete processed transmissions older than the specificed age (in milliseconds)</p> <pre><code>$ edgex-cli transmission rm -a 100\n</code></pre>"},{"location":"getting-started/tools/Ch-GUI/","title":"Graphical User Interface (GUI)","text":"<p>EdgeX's graphical user interface (GUI) is provided for demonstration and development use to manage and monitor a single instance of EdgeX Foundry.</p>"},{"location":"getting-started/tools/Ch-GUI/#setup","title":"Setup","text":"<p>You can quickly run the GUI in a Docker container or as a Snap.  You can also download, build and run the GUI natively on your host.</p>"},{"location":"getting-started/tools/Ch-GUI/#docker-compose","title":"Docker Compose","text":"<p>The EdgeX GUI is now incorporated into all the secure and non-sure Docker Compose files provided by the project.  Locate and download the Docker Compose file that best suits your needs from https://github.com/edgexfoundry/edgex-compose.  For example, in the Jakarta branch of <code>edgex-compose</code> the <code>*-with-app-sample*</code> compose files include the Sample App Service allowing the configurable pipeline to be manipulated from the UI. See the four Docker Compose files that include the Sample App Service circled below.</p> <p></p> <p>Note</p> <p>The GUI can now be used in secure mode as well as non-secure mode.</p> <p>See the Getting Started using Docker guide for help on how to find, download and use a Docker Compose file to run EdgeX - in this case with the Sample App Service.</p>"},{"location":"getting-started/tools/Ch-GUI/#secure-mode-with-api-gateway-token","title":"Secure mode with API Gateway token","text":"<p>When first running the UI in secure mode, you will be prompted to enter a token.</p> <p></p> <p>Following the How to get access token? link to view the documentation how get an API Gateway access token. Once you enter the token the UI will have asses to the EdgeX service via the API Gateway.</p> <p>Note</p> <p>The UI is no longer restricted to access from <code>localhost</code>. It can now be accessed from any IP address that can access the host system. This is allowed because the UI is secured via API Gateway token when running in secure mode.</p>"},{"location":"getting-started/tools/Ch-GUI/#snaps","title":"Snaps","text":""},{"location":"getting-started/tools/Ch-GUI/#installing-edgex-ui-as-a-snap","title":"Installing EdgeX UI as a snap","text":"<p>The latest stable version of the snap can be installed using:</p> <pre><code>$ sudo snap install edgex-ui\n</code></pre> <p>A specific release of the snap can be installed from a dedicated channel. For example, to install the 2.1 (Jakarta) release:</p> <pre><code>$ sudo snap install edgex-ui --channel=2.1\n</code></pre> <p>The latest development version of the edgex-ui snap can be installed using:</p> <pre><code>$ sudo snap install edgex-ui --edge\n</code></pre>"},{"location":"getting-started/tools/Ch-GUI/#generate-token-for-entering-ui-secure-mode","title":"Generate token for entering UI secure mode","text":"<p>A JWT access token is required to access the UI securely through the API Gateway. To do so:</p> <ol> <li>Generate a public/private keypair</li> </ol> <pre><code>$ openssl ecparam -genkey -name prime256v1 -noout -out private.pem\n$ openssl ec -in private.pem -pubout -out public.pem\n</code></pre> <ol> <li>Configure user and public-key</li> </ol> <pre><code>$ sudo snap set edgexfoundry env.security-proxy.user=user01,USER_ID,ES256\n$ sudo snap set edgexfoundry env.security-proxy.public-key=\"$(cat public.pem)\"\n</code></pre> <ol> <li>Generate a token</li> </ol> <pre><code>$ edgexfoundry.secrets-config proxy jwt --algorithm ES256 \\\n--private_key private.pem --id USER_ID --expiration=1h\n</code></pre> <p>This output is the JWT token for UI login in secure mode. Please keep the token in a safe place for future re-use as the same token cannot be regenerated or recovered from EdgeX's secret-config CLI. The token is required each time you reopen the web page.</p>"},{"location":"getting-started/tools/Ch-GUI/#using-the-edgex-ui-snap","title":"Using the edgex-ui snap","text":"<p>Open your browser http://localhost:4000</p> <p></p> <p>Please log in to EdgeX with the JWT token we generated above.</p> <p>For more details please refer to edgex-ui Snap</p>"},{"location":"getting-started/tools/Ch-GUI/#native","title":"Native","text":"<p>If you are running EdgeX natively (outside of Docker Compose or a Snap), you will find instructions on how to build and run the GUI on your platform in the GUI repository README</p>"},{"location":"getting-started/tools/Ch-GUI/#general","title":"General","text":""},{"location":"getting-started/tools/Ch-GUI/#gui-address","title":"GUI Address","text":"<p>Once the GUI is up and running, simply visit port 4000 on the GUI's host machine (ex:  http://localhost:4000) to enter the GUI Dashboard (see below).  The GUI does not require any login.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#menu-bar","title":"Menu Bar","text":"<p>The left side of the Dashboard holds a menu bar that allows you access to the GUI functionality.  The \"hamburger\" icon on the menu bar allows you to shrink or expand the menu bar to icons vs icons and menu bar labels.</p> <p> </p>"},{"location":"getting-started/tools/Ch-GUI/#mobile-device-ready","title":"Mobile Device Ready","text":"<p>The EdgeX GUI can be used/displayed on a mobile device via the mobile device's browser if the GUI address is accessible to the device.  The display may be skewed in order to fit the device screen.  For example, the Dashboard menu will often change to icons  over the expanded labeled menu bar when shown on a mobile device.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#capability","title":"Capability","text":"<p>The GUI allows you to </p> <ul> <li>manage (add, remove, update) most of the EdgeX objects to include devices, device profiles, device services, rules, schedules, notifications, app services, etc.</li> <li>start, stop or restart the EdgeX services</li> <li>explore the memory, CPU and network traffic usage of EdgeX services</li> <li>monitor the data stream (the events and readings) collected by sensors and devices</li> <li>explore the configuration of an EdgeX service</li> </ul>"},{"location":"getting-started/tools/Ch-GUI/#dashboard","title":"Dashboard","text":"<p>The Dashboard page (the main page of the GUI) presents you with a set of clickable \"tiles\" that provide a quick view of the status of your EdgeX instance.  That is, it provides some quick data points about the EdgeX instance and what the GUI is tracking.  Specifically, the tiles in the Dashboard show you:</p> <ul> <li>the number of device services that it is aware of and their status (locked vs unlocked)</li> <li>the number of devices being managed by EdgeX (through the associated device services)</li> <li>the number of device profiles registered with core metadata</li> <li>the number of schedules (or intervals) EdgeX is managing</li> <li>the number of notifications EdgeX has seen</li> <li>the number of events and readings generated by device services and passing through core data</li> <li>the number of EdgeX micro services currently being monitored through the system management service</li> </ul> <p></p> <p>If for some reason the GUI has an issue or difficulty getting the information it needs to display a tile in the Dashboard when it is displayed, a popup will be displayed over the screen indicating the issue.  In the example below, the support scheduling service was down and the GUI Dashboard was unable to access the scheduler service.</p> <p></p> <p>In this way, the Dashboard provides a quick and easy way to see whether the EdgeX instance is nominal or has underlying issues.</p> <p>You can click on each of the tiles in the Dashboard.  Doing so provides more details about each.  More precisely, clicking on a tile takes you to another part of the GUI where the details of that item can be found.  For example, clicking on the Device Profiles tile takes you to the Metadata page and the Device Profile tab (covered below)</p>"},{"location":"getting-started/tools/Ch-GUI/#system","title":"System","text":"<p>The EdgeX platform is comprised of a set of micro services.  The system management service (and associated executors) tracks the micro services status (up or down), metrics of the running service (memory, CPU, network traffic), and configuration influencing the operation of the service.  The system management service also provides the ability (through APIs) to start, stop and restart a service.</p> <p>Service information and the ability to call on the start, stop, restart APIs is surfaced through the System page.</p> <p></p> <p>Warning</p> <p>The system management services are deprecated in EdgeX as of Ireland.  Their full replacement has not been identified, but adopters should be aware that the service will be replaced in a future release.</p> <p>Please note that the System List display provides access to a static list of EdgeX services.  As device services and application services (among other services) may be added or removed based on use case needs (often requireing new custom south and north side services), the GUI is not made aware of these and therefore will not display details on these services.</p>"},{"location":"getting-started/tools/Ch-GUI/#metrics","title":"Metrics","text":"<p>From the System Service List, you can click on the <code>Metric</code> icon for any service to see the memory, CPU and network traffic telemetry for any service.</p> <p></p> <p>The referesh rate can be adjusted on the display to have the GUI poll the system management service more or less frequently.</p> <p>Info</p> <p>The metrics are provided via an associated executor feeding the system management agent telemtry data.  In the case of Docker, a Docker executor is capturing standard Docker stats and relaying them to the system management agent that in turn makes these available through its APIs to the GUI.</p>"},{"location":"getting-started/tools/Ch-GUI/#config","title":"Config","text":"<p>The configuration of each service is made available for each service by clicking on the <code>Config</code> icon for any service from the System Service List.  The configuration is displayed in JSON form and is read only.  If running Consul, use the Consul Web UI to make changes to the configuration.</p>"},{"location":"getting-started/tools/Ch-GUI/#operation","title":"Operation","text":"<p>From the System Service List, you can request to stop, start or restart any of the listed services with the operation buttons in the far right column.</p> <p></p> <p>Warning</p> <p>There is no confirmation popup or warning on these requests.  When you push a stop, start, restart button, the request is immediately made to the system management service for that operation.</p> <p>The state of the service will change when these operations are invoked.  When a service is stopped, the metric and config information for the service will be unavailable.</p> <p></p> <p>After starting (or restarting) a service, you may need to hit the <code>Refresh</code> button on the page to get the state and metric/config icons to change.</p>"},{"location":"getting-started/tools/Ch-GUI/#metadata","title":"Metadata","text":"<p>The Metadata page (available from the Metadata menu option) provides three tabs to be able to see and manage the basic elements of metadata:  device services, device profiles and devices.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#device-service-tab","title":"Device Service Tab","text":"<p>The Device Service tab displays the device services known to EdgeX (as device services registered in core metadata).  Device services cannot be added or removed through the GUI, but information about the existing device services (i.e., port, admin state) and several actions on the existing device services can be accomplished on this tab.</p> <p>First note that for each device service listed, the number of associated devices are depicted.  If you click on the <code>Associated Devices</code> button, it will take you to the Device tab to be able to get more information about or work with any of the associated devices.</p> <p></p> <p>The <code>Settings</code> button on each device service allows you to change the description or the admin state of the device service.</p> <p></p> <p>Alert</p> <p>Please note that you must hit the <code>Save</code> button after making any changes to the Device Service Settings.  If you don't and move away from the page, your changes will be lost.</p>"},{"location":"getting-started/tools/Ch-GUI/#device-tab","title":"Device Tab","text":"<p>The Device Tab on the Metadata page offers you details about all the sensors/devices known to your EdgeX instance.  Buttons at the top of the tab allow you to add, remove or edit a device (or collection of devices when deleting and using the selector checkbox in the device list).</p> <p></p> <p>On the row of each device listed, links take you to the appropriate tabs to see the associated device profile or device service for the device.</p> <p></p> <p>Icons on the row of each device listed cause editable areas to expand at the bottom of the tab to execute a device command or see/modify the device's AutoEvents.</p> <p></p> <p>The command execution display allows you to select the specific device resource or device command (from the <code>Command Name List</code>), and execute or <code>try</code> either a GET or SET command (depending on what the associated device profile for the device says is allowed).  The response will be displayed in the <code>ResponseRaw</code> area after the <code>try</code> button is pushed.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#add-device-wizard","title":"Add Device Wizard","text":"<p>The <code>Add</code> button on the Device List tab will take you to the <code>Add Device Wizard</code>.  This nice utility will assist you, entry screen by entry screen, in getting a new device setup in EdgeX.  Specifically, it has you (in order):</p> <ul> <li>select the device service to which the new device will be associated</li> <li>select the device profile to which the new device will be templated or typed after</li> <li>enter general characteristics for the device (name, description, labels, etc.) and set its operating and admin states</li> <li>optionally setup auto events for scheduled data collection</li> <li>enter specific protocol properties for the device (based on known templates the GUI has at its disposal such as REST, MQTT, Modbus, etc.)</li> </ul> <p>Once all the information in the <code>Add Device Wizard</code> screens is entered, the <code>Submit</code> button at the end of the wizard causes your new device to be created in core metadata with all appropriate associations.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#device-profile-tab","title":"Device Profile Tab","text":"<p>The Device Profile Tab on the Metadata page displays the device profiles known to EdgeX and allows you to add new profiles or edit/remove existing profiles.</p> <p></p> <p>The <code>AssociatedDevice</code> button on each row of the Device Profile List will take you to the Device tab and show you the list of devices currently associated to the device profile.</p> <p></p> <p>Warning</p> <p>When deleting a profile, the system will popup an error if deices are still associated to the profile.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#data-center-seeing-eventreading-data","title":"Data Center (Seeing Event/Reading Data)","text":"<p>From the Data Center option on the GUI's menu bar you can see the stream of Event/Readings coming from the device services into core data.  The event/reading data will be displayed in JSON form.</p> <p>There are two tabs on the Data Stream page, both with <code>Start</code> and <code>Pause</code> buttons:</p> <ul> <li>Event (which allows incoming events to be displayed and the display will include the event's associated readings)</li> <li>Reading (allows incoming readings to be displayed, which will only show the reading and not its associated owning event)</li> </ul> <p>Hit the <code>Start</code> button on either tab to see the event or reading data displayed in the stream pane (events are shown in the example below).  Push the <code>Pause</code> button to stop the display of event or reading data.</p> <p></p> <p>Warning</p> <p>In actuality, the event and reading data is pulled from core data via REST call every three (3) seconds - so it is not a live stream display but a poll of data.  Furthermore, if EdgeX is setup to have device services send data directly to application services via message bus and core data is not running or if core data is configured to have persistence turned off, there will be no data in core data to pull and so there will be no events or readings to see.</p>"},{"location":"getting-started/tools/Ch-GUI/#scheduler-intervalinterval-list","title":"Scheduler (Interval/Interval List)","text":"<p>Interval and Interval Actions, which help define task management schedules in EdgeX, are managed via the Scheduler page from selecting Scheduler off the menu bar.</p> <p></p> <p>Again, as with many of the EdgeX GUI pages, there are two tabs on the Scheduler page:</p> <ul> <li>Interval List to display, add, edit and delete Intervals</li> <li>Interval Action List to display, add, edit and delete Interval Actions which must be associated to an Interval</li> </ul>"},{"location":"getting-started/tools/Ch-GUI/#interval-list","title":"Interval List","text":"<p>When updating or adding an Interval, you must provide a name Interval duration string which takes an unsigned integer plus a unit of measure which must be one of \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\" representing nanoseconds, microseconds, milliseconds, seconds, minutes or hours.  Optionally provide a start/end dates and an indication that the interval runs only once (and thereby ignores the interval).</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#interval-action-list","title":"Interval Action List","text":"<p>Interval Actions define what happens when the Interval kicks off.  Interval Actions can define REST, MQTT or Email actions that take place when an Interval timer hits.  The GUI provides the means to edit or create any of these actions.  Note that an Interval Action must be associated to an already defined Interval.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#notifications","title":"Notifications","text":"<p>Notifications are messages from EdgeX to external systems about something that has happened in EdgeX - for example that a new device has been created.  Currently, notifications can be sent by email or REST call.</p> <p>The Notification Center page, available from the Notifications menu option, allows you to see new (not processed), processed or escalated (notifications that have failed to be sent within its resend limit) notifications.  By default, the new notifications are displayed, but if you click on the <code>Advanced &gt;&gt;</code> link on the page (see below), you can select which type of notifications to display.</p> <p></p> <p>The Subscriptions tab on the Notification Center page allows you to add, update or remove subscriptions to notifications.  Subscribers are registered receivers of notifications - either via email or REST.</p> <p></p> <p>When adding (or editing) a subscription, you must provide a name, category, label, receiver, and either an email address or REST endpoint.  A template is provided to specify either the email or REST endpoint configuration data needed for the subscription.</p>"},{"location":"getting-started/tools/Ch-GUI/#ruleengine","title":"RuleEngine","text":"<p>The Rule Engine page, from the RuleEngine menu option, provides the means to define streams and rules for the integrated eKuiper rules engine.</p> <p>Via the Stream tab, streams are defined by JSON.  All that is really required is a stream name (EdgeXStream in the example below).</p> <p></p> <p>The Rules tab allows eKuiper rules to be added, removed or updated/edited as well as started, stopped or restarted.  When adding or editing a rule, you must provide a name, the rule SQL and action.  The action can be one of the following (some requiring extra parameters):</p> <ul> <li>send the result to a REST HTTP Server (allowing an EdgeX command to be called)</li> <li>send the result to an MQTT broker</li> <li>send the result to the EdgeX message bus</li> <li>send the result to a log file </li> </ul> <p>See the eKuiper documentation for more information on how to define rules.</p> <p></p> <p>Alert</p> <p>Once a rule is created, it is started by default.  Return to the Rules tab on the RulesEngine page to stop a new rule.</p> <p>When creating or editing the rule, if the stream referenced in the rule is not already defined, the GUI will present an error when trying to submit the rule.</p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#appservice","title":"AppService","text":"<p>In the AppService page, you can configure existing configurable application services.  The list of available configurable app services is determined by the UI automatically (based on a query for available app services from the registry service). </p> <p></p>"},{"location":"getting-started/tools/Ch-GUI/#configurable","title":"Configurable","text":"<p>When the application service is a configurable app service and is known to the GUI, the <code>Configurable</code> button on the App Service List allows you to change the triggers, functions, secrets and other configuration associated to the configurable app service.</p> <p></p> <p>There are four tabs in the Configurable Setting editor:</p> <ul> <li>Trigger which defines how the configurable app service begins execution</li> <li>Pipeline Functions defining which functions are part of the configurable app service pipeline and in which order should they be executed </li> <li>Insecure Secrets - setting up secrets used by the configurable app service when running in non-secure mode (meaning Vault is not used to provide the secrets)</li> <li>Store and Forward which enables and configures the batch store and forward export capability</li> </ul> <p>Note</p> <p>When the Trigger is changed, the service must be restarted for the change to take effect.</p>"},{"location":"getting-started/tools/Ch-GUI/#why-demo-and-developer-use-only","title":"Why Demo and Developer Use Only","text":"<p>The GUI is meant as a developer tool or to be used in EdgeX demonstration situations.  It is not yet designed for production settings.  There are several reasons for this restriction.</p> <ul> <li>The GUI is not designed to assist you in managing multiple EdgeX instances running in a deployment as would be typical in a production setting.  It cannot be dynamically pointed to any  running instance of EdgeX on multiple hosts. The GUI knows about a single instance of EdgeX running (by default, the instance that is on the same host as the GUI).</li> <li>The GUI provides no access controls.  All functionality is open to anyone that can access the GUI URL.</li> <li>The GUI does not have the Kong token to negotiate through the API Gateway when the GUI is running outside of the Docker network - where the other EdgeX services are running.  This would mean that the GUI would not be able to access any of the EdgeX service instance APIs.</li> </ul> <p>The EdgeX community is exploring efforts to make the GUI available in secure mode in a future release.</p>"},{"location":"microservices/application/AdvancedTopics/","title":"Advanced Topics","text":"<p>The following items discuss topics that are a bit beyond the basic use cases of the Application Functions SDK when interacting with EdgeX.</p>"},{"location":"microservices/application/AdvancedTopics/#configurable-functions-pipeline","title":"Configurable Functions Pipeline","text":"<p>This SDK provides the capability to define the functions pipeline via configuration rather than code by using the app-service-configurable application service. See the App Service Configurable section for more details.</p>"},{"location":"microservices/application/AdvancedTopics/#custom-rest-endpoints","title":"Custom REST Endpoints","text":"<p>It is not uncommon to require your own custom REST endpoints when building an Application Service. Rather than spin up your own webserver inside of your app (alongside the already existing running webserver), we've exposed a method that allows you add your own routes to the existing webserver. A few routes are reserved and cannot be used:</p> <ul> <li>/api/v2/version</li> <li>/api/v2/ping</li> <li>/api/v2/metrics</li> <li>/api/v2/config</li> <li>/api/v2/trigger</li> <li>/api/v2/secret</li> </ul> <p>To add your own route, use the <code>AddRoute()</code> API provided on the <code>ApplicationService</code> interface. </p> <p>Example - Add Custom REST route</p> <pre><code>myhandler := func(writer http.ResponseWriter, req *http.Request) {    service := req.Context().Value(interfaces.AppServiceContextKey).(interfaces.ApplicationService)    service.LoggingClient().Info(\"TEST\")     writer.Header().Set(\"Content-Type\", \"text/plain\")   writer.Write([]byte(\"hello\"))   writer.WriteHeader(200)    }    service := pkg.NewAppService(serviceKey)    service.AddRoute(\"/myroute\", myHandler, \"GET\")    </code></pre> <p>Under the hood, this simply adds the provided route, handler, and method to the gorilla <code>mux.Router</code> used in the SDK. For more information on <code>gorilla mux</code> you can check out the github repo here.  You can access the <code>interfaces.ApplicationService</code> API for resources such as the logging client by pulling it from the context as shown above -- this is useful for when your routes might not be defined in your <code>main.go</code>  where you have access to the <code>interfaces.ApplicationService</code> instance.</p>"},{"location":"microservices/application/AdvancedTopics/#target-type","title":"Target Type","text":"<p>The target type is the object type of the incoming data that is sent to the first function in the function pipeline. By default this is an EdgeX <code>dtos.Event</code> since typical usage is receiving <code>Events</code> from the EdgeX MessageBus. </p> <p>There are scenarios where the incoming data is not an EdgeX <code>Event</code>. One example scenario is two application services are chained via the EdgeX MessageBus. The output of the first service is inference data from analyzing the original <code>Event</code>data, and published back to the EdgeX MessageBus. The second service needs to be able to let the SDK know the target type of the input data it is expecting.</p> <p>For usages where the incoming data is not <code>events</code>, the <code>TargetType</code> of the expected incoming data can be set when the <code>ApplicationService</code> instance is created using the <code>NewAppServiceWithTargetType()</code> factory function.</p> <p>Example - Set and use custom Target Type</p> <pre><code>type Person struct {    FirstName string `json:\"first_name\"`    LastName  string `json:\"last_name\"`    }    service := pkg.NewAppServiceWithTargetType(serviceKey, &amp;Person{})    </code></pre> <p><code>TargetType</code> must be set to a pointer to an instance of your target type such as <code>&amp;Person{}</code> . The first function in your function pipeline will be passed an instance of your target type, not a pointer to it. In the example above, the first function in the pipeline would start something like:</p> <pre><code>func MyPersonFunction(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {    ctx.LoggingClient().Debug(\"MyPersonFunction executing\")\n\nif data == nil {\nreturn false, errors.New(\"no data received to     MyPersonFunction\")\n}\n\nperson, ok := data.(Person)\nif !ok {\nreturn false, errors.New(\"MyPersonFunction type received is not a Person\")\n}\n\n// ....\n</code></pre> <p>The SDK supports un-marshaling JSON or CBOR encoded data into an instance of the target type. If your incoming data is not JSON or CBOR encoded, you then need to set the <code>TargetType</code> to  <code>&amp;[]byte</code>.</p> <p>If the target type is set to <code>&amp;[]byte</code> the incoming data will not be un-marshaled.  The content type, if set, will be set on the <code>interfaces.AppFunctionContext</code> and can be access via the <code>InputContentType()</code> API.   Your first function will be responsible for decoding the data or not.</p>"},{"location":"microservices/application/AdvancedTopics/#command-line-options","title":"Command Line Options","text":"<p>See the Common Command Line Options for the set of command line options common to all EdgeX services. The following command line options are specific to Application Services.</p>"},{"location":"microservices/application/AdvancedTopics/#skip-version-check","title":"Skip Version Check","text":"<p><code>-s/--skipVersionCheck</code></p> <p>Indicates the service should skip the Core Service's version compatibility check.</p>"},{"location":"microservices/application/AdvancedTopics/#service-key","title":"Service Key","text":"<p><code>-sk/--serviceKey</code></p> <p>Sets the service key that is used with Registry, Configuration Provider and security services. The default service key is set by the application service. If the name provided contains the placeholder text <code>&lt;profile&gt;</code>, this text will be replaced with the name of the profile used. If profile is not set, the <code>&lt;profile&gt;</code> text is simply removed</p> <p>Can be overridden with EDGEX_SERVICE_KEY environment variable.</p>"},{"location":"microservices/application/AdvancedTopics/#environment-variables","title":"Environment Variables","text":"<p>See the Common Environment Variables section for the list of environment variables common to all EdgeX Services. The remaining in this section are specific to Application Services.</p>"},{"location":"microservices/application/AdvancedTopics/#edgex_service_key","title":"EDGEX_SERVICE_KEY","text":"<p>This environment variable overrides the <code>-sk/--serviceKey</code> command-line option and the default set by the application service.</p> <p>Note</p> <p>If the name provided contains the text <code>&lt;profile&gt;</code>, this text will be replaced with the name of the profile used.</p> <p>Example - Service Key</p> <p><code>EDGEX_SERVICE_KEY: app-&lt;profile&gt;-mycloud</code> <code>profile: http-export</code>   then service key will be <code>app-http-export-mycloud</code> </p> <p>EdgeX 2.0</p> <p>The deprecated lowercase <code>`edgex_service</code> environment variable specific have been removed for EdgeX 2.0</p>"},{"location":"microservices/application/AdvancedTopics/#custom-configuration","title":"Custom Configuration","text":"<p>Applications can specify custom configuration in the TOML file in two ways. </p>"},{"location":"microservices/application/AdvancedTopics/#application-settings","title":"Application Settings","text":"<p>The first simple way is to add items to the <code>ApplicationSetting</code> section. This is a map of string key/value pairs, i.e. <code>map[string]string</code>. Use for simple string values or comma separated list of string values. The <code>ApplicationService</code> API provides the follow access APIs for this configuration section:</p> <ul> <li><code>ApplicationSettings() map[string]string</code><ul> <li>Returns the whole list of application settings</li> </ul> </li> <li><code>GetAppSetting(setting string) (string, error)</code><ul> <li>Returns single entry from the map who's key matches the passed in <code>setting</code> value</li> </ul> </li> <li><code>GetAppSettingStrings(setting string) ([]string, error)</code><ul> <li>Returns list of strings for the entry who's key matches the passed in <code>setting</code> value. The Entry is assumed to be a comma separated list of strings.</li> </ul> </li> </ul>"},{"location":"microservices/application/AdvancedTopics/#structure-custom-configuration","title":"Structure Custom Configuration","text":"<p>EdgeX 2.0</p> <p>Structure Custom Configuration is new for Edgex 2.0</p> <p>The second is the more complex <code>Structured Custom Configuration</code> which allows the Application Service to define and watch it's own structured section in the service's TOML configuration file.</p> <p>The <code>ApplicationService</code> API provides the follow APIs to enable structured custom configuration:</p> <ul> <li> <p><code>LoadCustomConfig(config UpdatableConfig, sectionName string) error</code></p> <ul> <li>Loads the service's custom configuration from local file or the Configuration Provider (if enabled). The Configuration Provider will also be seeded with the custom configuration the first time the service is started, if service is using the Configuration Provider. The <code>UpdateFromRaw</code> interface will be called on the custom configuration when the configuration is loaded from the Configuration Provider.</li> </ul> </li> <li> <p><code>ListenForCustomConfigChanges(configToWatch interface{}, sectionName string, changedCallback func(interface{})) error</code></p> <ul> <li>Starts a listener on the Configuration Provider for changes to the specified section of the custom configuration. When changes are received from the Configuration Provider the UpdateWritableFromRaw interface will be called on the custom configuration to apply the updates and then signal that the changes occurred via changedCallback.</li> </ul> </li> </ul> <p>See the Application Service Template for an example of using the new Structured Custom Configuration capability.</p> <ul> <li>See here for defining the structured custom configuration</li> <li>See here for loading, validating and watching the configuration</li> </ul>"},{"location":"microservices/application/AdvancedTopics/#store-and-forward","title":"Store and Forward","text":"<p>The Store and Forward capability allows for export functions to persist data on failure and for the export of the data to be retried at a later time. </p> <p>Note</p> <p>The order the data exported via this retry mechanism is not guaranteed to be the same order in which the data was initial received from Core Data</p>"},{"location":"microservices/application/AdvancedTopics/#configuration","title":"Configuration","text":"<p><code>Writable.StoreAndForward</code> allows enabling, setting the interval between retries and the max number of retries. If running with Configuration Provider, these setting can be changed on the fly via Consul without having to restart the service.</p> <p>Example - Store and Forward configuration</p> <pre><code>[Writable.StoreAndForward]\nEnabled = false\nRetryInterval = \"5m\"\nMaxRetryCount = 10\n</code></pre> <p>Note</p> <p>RetryInterval should be at least 1 second (eg. '1s') or greater. If a value less than 1 second is specified, 1 second will be used. Endless retries will occur when MaxRetryCount is set to 0. If MaxRetryCount is set to less than 0, a default of 1 retry will be used.</p> <p>Database configuration section describes which database type to use and the information required to connect to the database. This section is required if Store and Forward is enabled. It is optional if not using <code>Redis</code> for the EdgeX MessageBus which is now the default. </p> <p>Example - Database configuration</p> <pre><code>[Database]\nType = \"redisdb\"\nHost = \"localhost\"\nPort = 6379\nTimeout = \"30s\"\n</code></pre> <p>EdgeX 2.0</p> <p>Support for Mongo DB has been removed in EdgeX 2.0</p>"},{"location":"microservices/application/AdvancedTopics/#how-it-works","title":"How it works","text":"<p>When an export function encounters an error sending data it can call <code>SetRetryData(payload []byte)</code> on the <code>AppFunctionContext</code>. This will store the data for later retry. If the Application Service is stopped and then restarted while stored data hasn't been successfully exported, the export retry will resume once the service is up and running again.</p> <p>Note</p> <p>It is important that export functions return an error and stop pipeline execution after the call to <code>SetRetryData</code>. See HTTPPost function in SDK as an example</p> <p>When the <code>RetryInterval</code> expires, the function pipeline will be re-executed starting with the export function that saved the data. The saved data will be passed to the export function which can then attempt to resend the data. </p> <p>Note</p> <p>The export function will receive the data as it was stored, so it is important that any transformation of the data occur in functions prior to the export function. The export function should only export the data that it receives.</p> <p>One of three out comes can occur after the export retried has completed. </p> <ol> <li> <p>Export retry was successful</p> <p>In this case, the stored data is removed from the database and the execution of the pipeline functions after the export function, if any, continues. </p> </li> <li> <p>Export retry fails and retry count <code>has not been</code> exceeded</p> <p>In this case, the stored data is updated in the database with the incremented retry count</p> </li> <li> <p>Export retry fails and retry count <code>has been</code> exceeded</p> <p>In this case, the stored data is removed from the database and never retried again.</p> </li> </ol> <p>Note</p> <p>Changing Writable.Pipeline.ExecutionOrder will invalidate all currently stored data and result in it all being removed from the database on the next retry. This is because the position of the export function can no longer be guaranteed and no way to ensure it is properly executed on the retry.</p>"},{"location":"microservices/application/AdvancedTopics/#custom-storage","title":"Custom Storage","text":"<p>The default backing store is redis.  Custom implementations of the <code>StoreClient</code> interface can be provided if redis does not meet your requirements.</p> <p><pre><code>type StoreClient interface {\n// Store persists a stored object to the data store and returns the assigned UUID.\nStore(o StoredObject) (id string, err error)\n\n// RetrieveFromStore gets an object from the data store.\nRetrieveFromStore(appServiceKey string) (objects []StoredObject, err error)\n\n// Update replaces the data currently in the store with the provided data.\nUpdate(o StoredObject) error\n\n// RemoveFromStore removes an object from the data store.\nRemoveFromStore(o StoredObject) error\n\n// Disconnect ends the connection.\nDisconnect() error\n}\n</code></pre> A factory function to create these clients can then be registered with your service by calling RegisterCustomStoreFactory</p> <pre><code>service.RegisterCustomStoreFactory(\"jetstream\", func(cfg interfaces.DatabaseInfo, cred config.Credentials) (interfaces.StoreClient, error) {\nconn, err := nats.Connect(fmt.Sprintf(\"nats://%s:%d\", cfg.Host, cfg.Port))\n\nif err != nil {\nreturn nil, err\n}\n\njs, err := conn.JetStream()\n\nif err != nil {\nreturn nil, err\n}\n\nkv, err := js.KeyValue(serviceKey)\n\nif err != nil {\nkv, err = js.CreateKeyValue(&amp;nats.KeyValueConfig{Bucket: serviceKey})\n}\n\nreturn &amp;JetstreamStore{\nconn:       conn,\nserviceKey: serviceKey,\nkv:         kv,\n}, err\n})\n</code></pre> <p>and configured using the registered name in the <code>Database</code> section:</p> <pre><code>[Database]\nType = \"jetstream\"\nHost = \"broker\"\nPort = 4222\nTimeout = \"5s\"\n</code></pre>"},{"location":"microservices/application/AdvancedTopics/#secrets","title":"Secrets","text":""},{"location":"microservices/application/AdvancedTopics/#configuration_1","title":"Configuration","text":"<p>All instances of App Services running in secure mode require a SecretStore to be configured. With the use of <code>Redis Pub/Sub</code> as the default EdgeX MessageBus all App Services need the <code>redisdb</code> known secret added to their SecretStore      so they can connect to the Secure EdgeX MessageBus. See the Secure MessageBus documentation for more details.</p> <p>Example - SecretStore configuration</p> <pre><code>[SecretStore]\nType = \"vault\"\nHost = \"localhost\"\nPort = 8200\nPath = \"app-sample/\"\nProtocol = \"http\"\nRootCaCertPath = \"\"\nServerName = \"\"\nTokenFile = \"/tmp/edgex/secrets/app-sample/secrets-token.json\"\n[SecretStore.Authentication]\nAuthType = \"X-Vault-Token\"\n</code></pre> <p>EdgeX 2.0</p> <p>For Edgex 2.0 all Application Service Secret Stores are <code>exclusive</code> so the explicit <code>[SecretStoreExclusive]</code> configuration has been removed.</p>"},{"location":"microservices/application/AdvancedTopics/#storing-secrets","title":"Storing Secrets","text":""},{"location":"microservices/application/AdvancedTopics/#secure-mode","title":"Secure Mode","text":"<p>When running an application service in secure mode, secrets can be stored in the SecretStore      by making an HTTP <code>POST</code> call to the <code>/api/v2/secret</code> API route in the application service. The secret data POSTed is stored and retrieved from the SecretStore based on values in the <code>[SecretStore]</code> section of the configuration file. Once a secret is stored, only the service that added the secret will be able to retrieve it.  For secret retrieval see Getting Secrets section below.</p> <p>Example - JSON message body</p> <pre><code>{\n\"path\" : \"MyPath\",\n\"secretData\" : [\n{\n\"key\" : \"MySecretKey\",\n\"value\" : \"MySecretValue\"\n}\n]\n}\n</code></pre> <p>Note</p> <p>Path specifies the type or location of the secret in the SecretStore. It is appended to the base path from the <code>[SecretStore]</code> configuration. </p>"},{"location":"microservices/application/AdvancedTopics/#insecure-mode","title":"Insecure Mode","text":"<p>When running in insecure mode, the secrets are stored and retrieved from the Writable.InsecureSecrets section of the service's configuration toml file. Insecure secrets and their paths can be configured as below.</p> <p>Example - InsecureSecrets Configuration</p> <pre><code>   [Writable.InsecureSecrets]    [Writable.InsecureSecrets.AWS]\nPath = \"aws\"\n[Writable.InsecureSecrets.AWS.Secrets]\nusername = \"aws-user\"\npassword = \"aws-pw\"\n\n[Writable.InsecureSecrets.DB]\nPath = \"redisdb\"\n[Writable.InsecureSecrets.DB.Secrets]\nusername = \"\"\npassword = \"\"\n</code></pre>"},{"location":"microservices/application/AdvancedTopics/#getting-secrets","title":"Getting Secrets","text":"<p>Application Services can retrieve their secrets from their SecretStore      using the  interfaces.ApplicationService.GetSecret() API or from the interfaces.AppFunctionContext.GetSecret() API  </p> <p>When in secure mode, the secrets are retrieved from the SecretStore      based on the <code>[SecretStore]</code>  configuration values. </p> <p>When running in insecure mode, the secrets are retrieved from the <code>[Writable.InsecureSecrets]</code> configuration.</p>"},{"location":"microservices/application/AdvancedTopics/#background-publishing","title":"Background Publishing","text":"<p>Application Services using the MessageBus trigger can request a background publisher using the AddBackgroundPublisher API in the SDK.  This method takes an int representing the background channel's capacity as the only parameter and returns a reference to a BackgroundPublisher.  This reference can then be used by background processes to publish to the configured MessageBus output.  A custom topic can be provided to use instead of the configured message bus output as well.</p> <p>Edgex 2.0</p> <p>For EdgeX 2.0 the background publish operation takes a full AppContext instead of just the parameters used to create a message envelope.  This allows the background publisher to leverage context-based topic formatting functionality as the trigger output.</p> <p>Example - Background Publisher</p> <pre><code>func runJob (service interfaces.ApplicationService, done chan struct{}){\nticker := time.NewTicker(1 * time.Minute)\n\n//initialize background publisher with a channel capacity of 10 and a custom topic\npublisher, err := service.AddBackgroundPublisherWithTopic(10, \"custom-topic\")\n\nif err != nil {\n// do something\n}\n\ngo func(pub interfaces.BackgroundPublisher) {\nfor {\nselect {\ncase &lt;-ticker.C:\nmsg := myDataService.GetMessage()\npayload, err := json.Marshal(message)\n\nif err != nil {\n//do something\n}\n\nctx := svc.BuildContext(uuid.NewString(), common.ContentTypeJSON)\n\n// modify context as needed\n\nerr = pub.Publish(payload, ctx)\n\nif err != nil {\n//do something\n}\ncase &lt;-j.done:\nticker.Stop()\nreturn\n}\n}\n}(publisher)\n}\n\nfunc main() {\nservice := pkg.NewAppService(serviceKey)\n\ndone := make(chan struct{})\ndefer close(done)\n\n//pass publisher to your background job\nrunJob(service, done)\n\nservice.SetFunctionsPipeline(\nAll,\nMy,\nFunctions,\n)\n\nservice.MakeItRun()\n\nos.Exit(0)\n}     </code></pre>"},{"location":"microservices/application/AdvancedTopics/#stopping-the-service","title":"Stopping the Service","text":"<p>Application Services will listen for SIGTERM / SIGINT signals from the OS and stop the function pipeline in response.  The pipeline can also be exited programmatically by calling <code>sdk.MakeItStop()</code> on the running <code>ApplicationService</code> instance.  This can be useful for cases where you want to stop a service in response to a runtime condition, e.g. receiving a \"poison pill\" message through its trigger.</p>"},{"location":"microservices/application/AdvancedTopics/#received-topic","title":"Received Topic","text":"<p>EdgeX 2.0</p> <p>Received Topic is new for Edgex 2.0</p> <p>When messages are received via the EdgeX MessageBus or External MQTT triggers, the topic that the data was received on is seeded into the new Context Storage on the <code>AppFunctionContext</code> with the key <code>receivedtopic</code>. This make the <code>Received Topic</code> available to all functions in the pipeline. The SDK provides the <code>interfaces.RECEIVEDTOPIC</code> constant for this key. See the Context Storage section for more details on extracting values.</p>"},{"location":"microservices/application/AdvancedTopics/#pipeline-per-topics","title":"Pipeline Per Topics","text":"<p>EdgeX 2.1</p> <p>Pipeline Per Topics is new for EdgeX 2.1</p> <p>The <code>Pipeline Per Topics</code> feature allows for multiple function pipelines to be defined. Each will execute only when one of the specified pipeline topics matches the received topic. The pipeline topics can have wildcards (<code>#</code>) allowing the topic to match a variety of received topics. Each pipeline has its own set of functions (transforms) that are executed on the received message. If the <code>#</code> wildcard is used by itself for a pipeline topic, it will match all received topics and the specified functions pipeline will execute on every message received. </p> <p>Note</p> <p>The <code>Pipeline Per Topics</code> feature is targeted for EdgeX MessageBus and External MQTT triggers, but can be used with Custom or HTTP triggers. When used with the HTTP trigger the incoming topic will always be <code>blank</code>, so the pipeline's topics must contain a single topic set to the <code>#</code> wildcard so that all messages received are processed by the pipeline.</p> <p>Example pipeline topics with wildcards</p> <pre><code>\"#\"                             - Matches all messages received\n\"edegex/events/#\"               - Matches all messages received with the based topic `edegex/events/`\n\"edegex/events/core/#\"          - Matches all messages received just from Core Data\n\"edegex/events/device/#\"        - Matches all messages received just from Device services\n\"edegex/events/#/my-profile/#\"  - Matches all messages received from Core Data or Device services for `my-profile`\n\"edegex/events/#/#/my-device/#\" - Matches all messages received from Core Data or Device services for `my-device`\n\"edegex/events/#/#/#/my-source\" - Matches all messages received from Core Data or Device services for `my-source`\n</code></pre> <p>Refer to the Filter By Topics section for details on the structure of the received topic.</p> <p>All pipeline function capabilities such as Store and Forward, Batching, etc. can be used with one or more of the multiple function pipelines. Store and Forward uses the Pipeline's ID to find and restart the pipeline on retries.</p> <p>Example - Adding multiple function pipelines</p> <p>This example adds two pipelines. One to process data from the <code>Random-Float-Device</code> device and one to process data from the <code>Int32</code> and <code>Int64</code> sources. </p> <pre><code>    sample := functions.NewSample()\nerr = service.AddFunctionsPipelineForTopics(\n\"Floats-Pipeline\", []string{\"edgex/events/#/#/Random-Float-Device/#\"}, transforms.NewFilterFor(deviceNames).FilterByDeviceName,\nsample.LogEventDetails,\nsample.ConvertEventToXML,\nsample.OutputXML)\nif err != nil {\n...\nreturn -1\n}\n\nerr = app.service.AddFunctionsPipelineForTopics(\n\"Int32-Pipleine\", []string{\"edgex/events/#/#/#/Int32\", \"edgex/events/#/#/#/Int64\"},\ntransforms.NewFilterFor(deviceNames).FilterByDeviceName,\nsample.LogEventDetails,\nsample.ConvertEventToXML,\nsample.OutputXML)\nif err != nil {\n...\nreturn -1\n}\n</code></pre>"},{"location":"microservices/application/AdvancedTopics/#built-in-application-service-metrics","title":"Built-in Application Service Metrics","text":"<p>EdgeX 2.2</p> <p>Built-in Application Service Metrics are new for EdgeX 2.2</p> <p>Note</p> <p>Service metrics are Beta released for EdgeX 2.2. Breaking changes, while not likely, may occur as more use of service metrics are added.</p> <p>All application services now have a limited set of built in metrics. More may be added in future releases.</p> <p>The current built-in metrics are:</p> <ul> <li> <p><code>MessagesReceived</code> - This is a counter metric that counts the number of messages received by the application service.</p> </li> <li> <p><code>PipelineMessagesProcessed</code> - This is a counter metric that counts the number of messages processed by the individual function pipelines defined by the application service. The metric data is tagged with the specific function pipeline ID the count is for.</p> </li> <li> <p><code>PipelineMessageProcessingTime</code> - This is a timer metric that tracks the amount of time taken to process messages by the individual function pipelines defined by the application service. The metric data is tagged with the specific function pipeline ID the timer is for.</p> <p>Note</p> <p>The time tracked for this metric is only for the function pipeline processing time. The overhead of receiving the messages and handing them to the appropriate function pipelines is not included. Accounting for this overhead may be added as another timer metric in a future release.</p> </li> </ul> <p>Reporting of these built-in metrics is disabled by default in the <code>Writable.Telemetry</code> configuration section. See <code>Writable.Telemetry</code> configuration details in the Application Service Configuration section for complete detail on this section. If the configuration for these built-in metrics are missing, then the reporting of the metrics will be disabled.</p> <p>Example - Service Telemetry Configuration with built-in metrics enabled for reporting</p> <pre><code>  [Writable.Telemetry]\nInterval = \"30s\"\nPublishTopicPrefix  = \"edgex/telemetry\" # /&lt;service-name&gt;/&lt;metric-name&gt; will be added to this Publish Topic prefix\n[Writable.Telemetry.Metrics] # All service's metric names must be present in this list.\nMessagesReceived = true\nPipelineMessagesProcessed = true\nPipelineMessageProcessingTime = true\n[Writable.Telemetry.Tags] # Contains the service level tags to be attached to all the service's metrics\n#    Gateway=\"my-iot-gateway\" # Tag must be added here or via Consul Env Override can only change existing value, not added new ones.\n</code></pre>"},{"location":"microservices/application/AdvancedTopics/#custom-application-service-metrics","title":"Custom Application Service Metrics","text":"<p>EdgeX 2.2</p> <p>Custom Application Service Metrics are new for EdgeX 2.2</p> <p>Note</p> <p>Service metrics are Beta released for EdgeX 2.2. Breaking changes, while not likely, may occur as more use of service metrics are added.</p> <p>The Custom Application Service Metrics capability allows for custom application services to define, collect and report their own custom service metrics.</p> <p>The following are the steps to collect and report custom service metrics:</p> <ol> <li> <p>Determine the metric type that needs to be collected</p> <ul> <li><code>counter</code> - Track the integer count of something</li> <li><code>gauge</code> - Track the integer value of something  </li> <li><code>gaugeFloat64</code> - Track the float64 value of something </li> <li><code>timer</code> - Track the time it takes to accomplish a task</li> </ul> </li> <li> <p>Create instance of the metric type from <code>github.com/rcrowley/go-metrics</code></p> <ul> <li><code>myCounter = gometrics.NewCounter()</code></li> <li><code>myGauge = gometrics.NewGauge()</code></li> <li><code>myGaugeFloat64 = gometrics.NewGaugeFloat64()</code></li> <li><code>myTimer = gometrics.NewTime()</code></li> </ul> </li> <li> <p>Determine if there are any tags to report along with your metric. Not common so <code>nil</code> is typically passed for the <code>tags map[strings]string</code> parameter in the next step.</p> </li> <li> <p>Register your metric(s) with the MetricsManager from the <code>service</code> or <code>pipeline function context</code> reference. See Application Service API and App Function Context API for more details:</p> <ul> <li><code>service.MetricsManager().Register(\"MyCounterName\", myCounter, nil)</code></li> <li><code>ctx.MetricsManager().Register(\"MyCounterName\", myCounter, nil)</code></li> </ul> </li> <li> <p>Collect the metric</p> <ul> <li><code>myCounter.Inc(someIntvalue)</code></li> <li><code>myCounter.Dec(someIntvalue)</code></li> <li><code>myGauge.Update(someIntvalue)</code></li> <li><code>myGaugeFloat64.Update(someFloatvalue)</code></li> <li><code>myTimer.Update(someDuration)</code></li> <li><code>myTimer.Time(func { do sometime})</code></li> <li><code>myTimer.UpdateSince(someTimeValue</code>)</li> </ul> </li> <li> <p>Configure reporting of the service's metrics. See <code>Writable.Telemetry</code> configuration details in the Application Service Configuration section for more detail.</p> <p>Example - Service Telemetry Configuration</p> <pre><code>  [Writable.Telemetry]\nInterval = \"30s\"\nPublishTopicPrefix  = \"edgex/telemetry\" # /&lt;service-name&gt;/&lt;metric-name&gt; will be added to this Publish Topic prefix\n[Writable.Telemetry.Metrics] # All service's metric names must be present in this list.\nMyCounterName = true\nMyGaugeName = true\nMyGaugeFloat64Name = true\nMyTimerName = true\n[Writable.Telemetry.Tags] # Contains the service level tags to be attached to all the service's metrics\n#    Gateway=\"my-iot-gateway\" # Tag must be added here or via Consul Env Override can only change existing value, not added new ones.\n</code></pre> <p>Note</p> <p>The metric names used in the above configuration (to enable or disable reporting of a metric) must match the metric name used when the metric is registered. A partial match of starts with is acceptable, i.e. the metric name registered starts with the above configured name.</p> </li> </ol>"},{"location":"microservices/application/AppFunctionContextAPI/","title":"App Function Context API","text":"<p>The context parameter passed to each function/transform provides operations and data associated with each execution of the pipeline. </p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>AppFunctionContext</code> API replaces the direct access to the <code>appcontext.Context</code> struct. </p> <p>Let's take a look at its API:</p> <pre><code>type AppFunctionContext interface {\nCorrelationID() string\nInputContentType() string\nSetResponseData(data []byte)\nResponseData() []byte\nSetResponseContentType(string)\nResponseContentType() string\nSetRetryData(data []byte)\nGetSecret(path string, keys ...string) (map[string]string, error)\nSecretsLastUpdated() time.Time\nLoggingClient() logger.LoggingClient\nEventClient() interfaces.EventClient\nCommandClient() interfaces.CommandClient\nNotificationClient() interfaces.NotificationClient\nSubscriptionClient() interfaces.SubscriptionClient\nDeviceServiceClient() interfaces.DeviceServiceClient\nDeviceProfileClient() interfaces.DeviceProfileClient\nDeviceClient() interfaces.DeviceClient\nMetricsManager() bootstrapInterfaces.MetricsManager\nPushToCore(event dtos.Event) (common.BaseWithIdResponse, error)\nGetDeviceResource(profileName string, resourceName string) (dtos.DeviceResource, error)\nAddValue(key string, value string)\nRemoveValue(key string)\nGetValue(key string) (string, bool)\nGetAllValues() map[string]string\nApplyValues(format string) (string, error)\nPipelineId() string\nClone() AppFunctionContext\n}\n</code></pre>"},{"location":"microservices/application/AppFunctionContextAPI/#response-data","title":"Response Data","text":""},{"location":"microservices/application/AppFunctionContextAPI/#setresponsedata","title":"SetResponseData","text":"<p><code>SetResponseData(data []byte)</code> </p> <p>This API sets the response data that will be returned to the trigger when pipeline execution is complete.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#responsedata","title":"ResponseData","text":"<p><code>ResponseData()</code> </p> <p>This API returns the data that will be returned to the trigger when pipeline execution is complete.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#setresponsecontenttype","title":"SetResponseContentType","text":"<p><code>SetResponseContentType(string)</code> </p> <p>This API sets the content type that will be returned to the trigger when pipeline execution is complete.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#responsecontenttype","title":"ResponseContentType","text":"<p><code>ResponseContentType()</code> </p> <p>This API returns the content type that will be returned to the trigger when pipeline execution is complete.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#clients","title":"Clients","text":""},{"location":"microservices/application/AppFunctionContextAPI/#loggingclient","title":"LoggingClient","text":"<p><code>LoggingClient() logger.LoggingClient</code></p> <p>Returns a <code>LoggingClient</code> to leverage logging libraries/service utilized throughout the EdgeX framework. The SDK has initialized everything so it can be used to log <code>Trace</code>, <code>Debug</code>, <code>Warn</code>, <code>Info</code>, and <code>Error</code> messages as appropriate. </p> <p>Example - LoggingClient</p> <pre><code>ctx.LoggingClient().Info(\"Hello World\")\nc.LoggingClient().Errorf(\"Some error occurred: %w\", err)\n</code></pre>"},{"location":"microservices/application/AppFunctionContextAPI/#eventclient","title":"EventClient","text":"<p><code>EventClient() interfaces.EventClient</code></p> <p>Returns an <code>EventClient</code> to leverage Core Data's <code>Event</code> API. See interface definition for more details. This client is useful for querying events and is used by the PushToCore convenience API described below. Note if Core Data is not specified in the Clients configuration, this will return nil.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#commandclient","title":"CommandClient","text":"<p><code>CommandClient() interfaces.CommandClient</code></p> <p>Returns a <code>CommandClient</code>  to leverage Core Command's <code>Command</code> API. See interface definition for more details. Useful for sending commands to devices. Note if Core Command is not specified in the Clients configuration, this will return nil.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#notificationclient","title":"NotificationClient","text":"<p><code>NotificationClient() interfaces.NotificationClient</code></p> <p>Returns a <code>NotificationClient</code> to leverage Support Notifications' <code>Notifications</code> API. See interface definition for more details. Useful for sending notifications. Note if Support Notifications is not specified in the Clients configuration, this will return nil.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#subscriptionclient","title":"SubscriptionClient","text":"<p><code>SubscriptionClient() interfaces.SubscriptionClient</code></p> <p>Returns a <code>SubscriptionClient</code> to leverage Support Notifications' <code>Subscription</code> API. See interface definition for more details. Useful for creating notification subscriptions. Note if Support Notifications is not specified in the Clients configuration, this will return nil.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#deviceserviceclient","title":"DeviceServiceClient","text":"<p><code>DeviceServiceClient() interfaces.DeviceServiceClient</code></p> <p>Returns a <code>DeviceServiceClient</code> to leverage Core Metadata's <code>DeviceService</code> API. See interface definition for more details. Useful for querying information about Device Services. Note if Core Metadata is not specified in the Clients configuration, this will return nil. </p>"},{"location":"microservices/application/AppFunctionContextAPI/#deviceprofileclient","title":"DeviceProfileClient","text":"<p><code>DeviceProfileClient() interfaces.DeviceProfileClient</code></p> <p>Returns a <code>DeviceProfileClient</code> to leverage Core Metadata's <code>DeviceProfile</code> API. See interface definition for more details. Useful for querying information about Device Profiles and is used by the <code>GetDeviceResource</code> helper function below. Note if Core Metadata is not specified in the Clients configuration, this will return nil. </p>"},{"location":"microservices/application/AppFunctionContextAPI/#deviceclient","title":"DeviceClient","text":"<p><code>DeviceClient() interfaces.DeviceClient</code></p> <p>Returns a <code>DeviceClient</code> to leverage Core Metadata's <code>Device</code> API. See interface definition for more details. Useful for querying information about Devices. Note if Core Metadata is not specified in the Clients configuration, this will return nil. </p>"},{"location":"microservices/application/AppFunctionContextAPI/#note-about-clients","title":"Note about Clients","text":"<p>Each of the clients above is only initialized if the Clients section of the configuration contains an entry for the service associated with the Client API. If it isn't in the configuration the client will be <code>nil</code>. Your code must check for <code>nil</code> to avoid panic in case it is missing from the configuration. Only add the clients to your configuration that your Application Service will actually be using. All application services need <code>Core-Data</code> for version compatibility check done on start-up. The following is an example <code>Clients</code> section of a configuration.toml with all supported clients specified:</p> <p>Example - Client Configuration Section</p> <pre><code>[Clients]\n  [Clients.core-data]\n  Protocol = 'http'\n  Host = 'localhost'\n  Port = 59880\n\n  [Clients.core-metadata]\n  Protocol = 'http'\n  Host = 'localhost'\n  Port = 59881\n\n  [Clients.core-command]\n  Protocol = 'http'\n  Host = 'localhost'\n  Port = 59882\n\n  [Clients.support-notifications]\n  Protocol = 'http'\n  Host = 'localhost'\n  Port = 59860\n</code></pre>"},{"location":"microservices/application/AppFunctionContextAPI/#context-storage","title":"Context Storage","text":"<p>The context API exposes a map-like interface that can be used to store custom data specific to a given pipeline execution.  This data is persisted for retry if needed.  Currently only strings are supported, and keys are treated as case-insensitive.  </p> <p>There following values are seeded into the Context Storage when an Event is received:</p> <ul> <li>Profile Name (key to retrieve value is <code>interfaces.PROFILENAME</code>)</li> <li>Device Name  (key to retrieve value is <code>interfaces.DEVICENAME</code>)</li> <li>Source Name  (key to retrieve value is <code>interfaces.SOURCENAME</code>)</li> <li>Received Topic  (key to retrieve value is <code>interfaces.RECEIVEDTOPIC</code>)</li> </ul> <p>Note</p> <p>Received Topic only available when the message was received from the Edgex MessageBus or External MQTT triggers.</p> <p>Storage can be accessed using the following methods:</p>"},{"location":"microservices/application/AppFunctionContextAPI/#addvalue","title":"AddValue","text":"<p><code>AddValue(key string, value string)</code> </p> <p>This API stores a value for access within a pipeline execution</p>"},{"location":"microservices/application/AppFunctionContextAPI/#removevalue","title":"RemoveValue","text":"<p><code>RemoveValue(key string)</code></p> <p>This API  deletes a value stored in the context at the given key</p>"},{"location":"microservices/application/AppFunctionContextAPI/#getvalue","title":"GetValue","text":"<p><code>GetValue(key string) (string, bool)</code></p> <p>This API attempts to retrieve a value stored in the context at the given key</p>"},{"location":"microservices/application/AppFunctionContextAPI/#getallvalues","title":"GetAllValues","text":"<p><code>GetAllValues() map[string]string</code></p> <p>This API returns a read-only copy of all data stored in the context</p>"},{"location":"microservices/application/AppFunctionContextAPI/#applyvalues","title":"ApplyValues","text":"<p><code>ApplyValues(format string) (string, error)</code> </p> <p>This API will replace placeholders of the form <code>{context-key-name}</code> with the value found in the context at <code>context-key-name</code>.  Note that key matching is case insensitive.  An error will be returned if any placeholders in the provided string do NOT have a corresponding entry in the context storage map.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#secrets","title":"Secrets","text":""},{"location":"microservices/application/AppFunctionContextAPI/#getsecret","title":"GetSecret","text":"<p><code>GetSecret(path string, keys ...string)</code></p> <p>This API is used to retrieve secrets from the secret store. <code>path</code> specifies the type or location of the secrets to retrieve. If specified, it is appended to the base path from the exclusive secret store configuration. <code>keys</code> specifies the list of secrets to be retrieved. If no keys are provided then all the keys associated with the specified path will be returned.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#secretslastupdated","title":"SecretsLastUpdated","text":"<p><code>SecretsLastUpdated()</code></p> <p>This API returns that timestamp for when the secrets in the SecretStore where last updated.  Useful when a connection to external source needs to be redone when the credentials have been updated.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#miscellaneous","title":"Miscellaneous","text":""},{"location":"microservices/application/AppFunctionContextAPI/#clone","title":"Clone()","text":"<p><code>Clone() AppFunctionContext</code></p> <p>This method returns a copy of the context that can be mutated independently where appropriate.  This can be useful when running operations that take AppFunctionContext in parallel.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#correlationid","title":"CorrelationID()","text":"<p><code>CorrelationID() string</code></p> <p>This API returns the ID used to track the EdgeX event through entire EdgeX framework.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#pipelineid","title":"PipelineId","text":"<p><code>PipelineId() string</code></p> <p>This API returns the ID of the pipeline currently executing. Useful when logging messages from pipeline functions so the message contain the ID of the pipeline that executed the pipeline function.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#inputcontenttype","title":"InputContentType()","text":"<p><code>InputContentType() string</code></p> <p>This API returns the content type of the data that initiated the pipeline execution. Only useful when the TargetType for the pipeline is []byte, otherwise the data will be the type specified by TargetType.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#getdeviceresource","title":"GetDeviceResource()","text":"<p><code>GetDeviceResource(profileName string, resourceName string) (dtos.DeviceResource, error)</code></p> <p>This API retrieves the DeviceResource for the given profile / resource name. Results are cached to minimize HTTP traffic to core-metadata.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#pushtocore","title":"PushToCore()","text":"<p><code>PushToCore(event dtos.Event)</code></p> <p>This API is used to push data to EdgeX Core Data so that it can be shared with other applications that are subscribed to the message bus that core-data publishes to. This function will return the new EdgeX Event with the ID populated, along with any error encountered.  Note that CorrelationId will not be available.</p> <p>Note</p> <p>If validation is turned on in CoreServices then your deviceName and readingName must exist in the CoreMetadata and be properly registered in EdgeX.</p> <p>Warning</p> <p>Be aware that without a filter in your pipeline, it is possible to create an infinite loop when the Message Bus trigger is used. Choose your device-name and reading name appropriately.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#setretrydata","title":"SetRetryData()","text":"<p><code>SetRetryData(data []byte)</code></p> <p>This method can be used to store data for later retry. This is useful when creating a custom export function that needs to retry on failure. The payload data will be stored for later retry based on <code>Store and Forward</code> configuration. When the retry is triggered, the function pipeline will be re-executed starting with the function that called this API. That function will be passed the stored data, so it is important that all transformations occur in functions prior to the export function. The <code>Context</code> will also be restored to the state when the function called this API. See Store and Forward for more details.</p> <p>Note</p> <p><code>Store and Forward</code> be must enabled when calling this API, otherwise the data is ignored.</p>"},{"location":"microservices/application/AppFunctionContextAPI/#metricsmanager","title":"MetricsManager","text":"<p><code>MetricsManager() bootstrapInterfaces.MetricsManager</code></p> <p>This API returns the Metrics Manager used to register counter, gauge, gaugeFloat64 or timer metric types from github.com/rcrowley/go-metrics</p> <pre><code>myCounterMetricName := \"MyCounter\"\nmyCounter := gometrics.NewCounter()\nmyTags := map[string]string{\"Tag1\":\"Value1\"}\nctx.MetricsManager().Register(myCounterMetricName, myCounter, myTags)   </code></pre>"},{"location":"microservices/application/AppServiceConfigurable/","title":"App Service Configurable","text":""},{"location":"microservices/application/AppServiceConfigurable/#getting-started","title":"Getting Started","text":"<p>App-Service-Configurable is provided as an easy way to get started with processing data flowing through EdgeX. This service leverages the App Functions SDK and provides a way for developers to use configuration instead of having to compile standalone services to utilize built in functions in the SDK. Please refer to Available Configurable Pipeline Functions  section below for full list of built-in functions that can be used in the configurable pipeline. </p> <p>To get started with App Service Configurable, you'll want to start by determining which functions are required in your pipeline. Using a simple example, let's assume you wish to use the following functions from the SDK:</p> <ol> <li>FilterByDeviceName -  to filter events for a specific device.</li> <li>Transform - to transform the data to XML</li> <li>HTTPExport - to send the data to an HTTP endpoint that takes our XML data   </li> </ol> <p>Once the functions have been identified, we'll go ahead and build out the configuration in the <code>configuration.toml</code> file under the <code>[Writable.Pipeline]</code> section.</p> <p>Example - Writable.Pipeline</p> <pre><code>[Writable]\nLogLevel = \"DEBUG\"\n[Writable.Pipeline]\nExecutionOrder = \"FilterByDeviceName, Transform, HTTPExport\"\n[Writable.Pipeline.Functions]\n[Writable.Pipeline.Functions.FilterByDeviceName]\n[Writable.Pipeline.Functions.FilterByDeviceName.Parameters]\nFilterValues = \"Random-Float-Device, Random-Integer-Device\"\n[Writable.Pipeline.Functions.Transform]\n[Writable.Pipeline.Functions.Transform.Parameters]\nType = \"xml\"\n[Writable.Pipeline.Functions.HTTPExport]\n[Writable.Pipeline.Functions.HTTPExport.Parameters]\nMethod = \"post\" MimeType = \"application/xml\" Url = \"http://my.api.net/edgexdata\"\n</code></pre> <p>The first line of note is <code>ExecutionOrder = \"FilterByDeviceName, Transform, HTTPExport\"</code>. This specifies the order in which to execute your functions. Each function specified here must also be placed in the <code>[Writeable.Pipeline.Functions]</code> section. </p> <p>Next, each function and its required information is listed. Each function typically has associated Parameters that must be configured to properly execute the function as designated by <code>[Writable.Pipeline.Functions.{FunctionName}.Parameters]</code>. Knowing which parameters are required for each function, can be referenced by taking a look at  the Available Configurable Pipeline Functions section below.</p> <p>Note</p> <p>By default, the configuration provided is set to use <code>EdgexMessageBus</code> as a trigger. This means you must have EdgeX Running with devices sending data in order to trigger the pipeline. You can also change the trigger to be HTTP. For more details on triggers, view the <code>Triggers</code>documentation located in the Triggers section.</p> <p>That's it! Now we can run/deploy this service and the functions pipeline will process the data with functions we've defined.</p>"},{"location":"microservices/application/AppServiceConfigurable/#pipeline-per-topics","title":"Pipeline Per Topics","text":"<p>EdgeX 2.1</p> <p>Pipeline Per Topics is new for EdgeX 2.1</p> <p>The above pipeline configuration in Getting Started section is the preferred way if your use case only requires a single functions pipeline. For use cases that require multiple functions pipelines in order to process the data differently based on the <code>profile</code>, <code>device</code> or <code>source</code> for the Event, there is the Pipeline Per Topics feature. This feature allows multiple pipelines to be configured in the <code>[Writable.Pipeline.PerTopicPipelines]</code>section. This section is a map of pipelines. The map key must be unique , but isn't used so can be any value. Each pipleline is defined by the following configuration settings:</p> <ul> <li>Id - This is the unique ID given to each pipeline</li> <li>Topics - Comma separated list of topics that control when the pipeline is executed. See Pipeline Per Topics  for details on using wildcards in the topic.</li> <li>ExecutionOrder - This is the list of functions, in order, that the pipeline will execute. Same as <code>ExecutionOrder</code> in the above example in the  Getting Started section</li> </ul> <p>Example - Writable.Pipeline.PerTopicPipelines</p> <p>In this example Events from the device  <code>Random-Float-Device</code> are transformed to JSON and then HTTP exported. At the same time, Events for the source <code>Int8</code>  are transformed to XML and then HTTP exported to same endpoint. Note the custom naming for <code>TransformJson</code> and <code>TransformXml</code>. This is taking advantage of the Multiple Instances of a Function described below.</p> <pre><code>[Writable]\nLogLevel = \"DEBUG\"\n[Writable.Pipeline]\n[Writable.Pipeline.PerTopicPipelines]\n[Writable.Pipeline.PerTopicPipelines.float]\nId = \"float-pipeline\"\nTopics = \"edgex/events/device/#/Random-Float-Device/#, edgex/events/device/#/Random-Integer-Device/#\"\nExecutionOrder = \"TransformJson, HTTPExport\"\n[Writable.Pipeline.PerTopicPipelines.int8]\nId = \"int8-pipeline\"\nTopic = \"edgex/events/device/#/#/Int8\"\nExecutionOrder = \"TransformXml, HTTPExport\"  [Writable.Pipeline.Functions]\n[Writable.Pipeline.Functions.FilterByDeviceName]\n[Writable.Pipeline.Functions.FilterByDeviceName.Parameters]\nFilterValues = \"Random-Float-Device, Random-Integer-Device\"\n[Writable.Pipeline.Functions.TransformJson]\n[Writable.Pipeline.Functions.TransformJson.Parameters]\nType = \"json\"\n[Writable.Pipeline.Functions.TransformXml]\n[Writable.Pipeline.Functions.TransformXml.Parameters]\nType = \"xml\"        [Writable.Pipeline.Functions.HTTPExport]\n[Writable.Pipeline.Functions.HTTPExport.Parameters]\nMethod = \"post\" MimeType = \"application/xml\" Url = \"http://my.api.net/edgexdata\"\n</code></pre> <p>Note</p> <p>The <code>Pipeline Per Topics</code> feature is targeted for EdgeX MessageBus and External MQTT triggers, but can be used with Custom or HTTP triggers. When used with the HTTP trigger the incoming topic will always be <code>blank</code>, so the pipeline's topics must contain a single topic set to the <code>#</code> wildcard so that all messages received are processed by the pipeline.</p>"},{"location":"microservices/application/AppServiceConfigurable/#environment-variable-overrides-for-docker","title":"Environment Variable Overrides For Docker","text":"<p>EdgeX services no longer have docker specific profiles. They now rely on environment variable overrides in the docker compose files for the docker specific differences.</p> <p>Example - Environment settings required in the compose files for App Service Configurable </p> <pre><code>      EDGEX_PROFILE : [target profile]\nSERVICE_HOST : [services network host name]\nEDGEX_SECURITY_SECRET_STORE: \"false\" # only need to disable as default is true\nCLIENTS_CORE_COMMAND_HOST: edgex-core-command\nCLIENTS_CORE_DATA_HOST: edgex-core-data\nCLIENTS_CORE_METADATA_HOST: edgex-core-metadata\nCLIENTS_SUPPORT_NOTIFICATIONS_HOST: edgex-support-notifications\nCLIENTS_SUPPORT_SCHEDULER_HOST: edgex-support-scheduler\nDATABASES_PRIMARY_HOST: edgex-redis\nMESSAGEQUEUE_HOST: edgex-redis\nREGISTRY_HOST: edgex-core-consul\nTRIGGER_EDGEXMESSAGEBUS_PUBLISHHOST_HOST: edgex-redis\nTRIGGER_EDGEXMESSAGEBUS_SUBSCRIBEHOST_HOST: edgex-redis\n</code></pre> <p>Example - Docker compose entry for App Service Configurable in no-secure compose file</p> <pre><code>  app-service-rules:\ncontainer_name: edgex-app-rules-engine\ndepends_on:\n- consul\n- data\nenvironment:\nCLIENTS_CORE_COMMAND_HOST: edgex-core-command\nCLIENTS_CORE_DATA_HOST: edgex-core-data\nCLIENTS_CORE_METADATA_HOST: edgex-core-metadata\nCLIENTS_SUPPORT_NOTIFICATIONS_HOST: edgex-support-notifications\nCLIENTS_SUPPORT_SCHEDULER_HOST: edgex-support-scheduler\nDATABASES_PRIMARY_HOST: edgex-redis\nEDGEX_PROFILE: rules-engine\nEDGEX_SECURITY_SECRET_STORE: \"false\"\nMESSAGEQUEUE_HOST: edgex-redis\nREGISTRY_HOST: edgex-core-consul\nSERVICE_HOST: edgex-app-rules-engine\nTRIGGER_EDGEXMESSAGEBUS_PUBLISHHOST_HOST: edgex-redis\nTRIGGER_EDGEXMESSAGEBUS_SUBSCRIBEHOST_HOST: edgex-redis\nhostname: edgex-app-rules-engine\nimage: edgexfoundry/app-service-configurable:2.0.0\nnetworks:\nedgex-network: {}\nports:\n- 127.0.0.1:59701:59701/tcp\nread_only: true\nsecurity_opt:\n- no-new-privileges:true\nuser: 2002:2001\n</code></pre> <p>Note</p> <p>App Service Configurable is designed to be run multiple times each with different profiles. This is why in the above example the name <code>edgex-app-rules-engine</code> is used for the instance running the <code>rules-engine</code> profile.</p>"},{"location":"microservices/application/AppServiceConfigurable/#deploying-multiple-instances-using-profiles","title":"Deploying Multiple Instances using profiles","text":"<p>App Service Configurable was designed to be deployed as multiple instances for different purposes. Since the function pipeline is specified in the <code>configuration.toml</code> file, we can use this as a way to run each instance with a different function pipeline. App Service Configurable does not have the standard default configuration at <code>/res/configuration.toml</code>. This default configuration has been moved to the <code>sample</code> profile. This forces you to specify the profile for the configuration you would like to run. The profile is specified using the <code>-p/--profile=[profilename]</code> command line option or the <code>EDGEX_PROFILE=[profilename]</code> environment variable override. The profile name selected is used in the service key (<code>app-[profile name]</code>) to make each instance unique, e.g. <code>AppService-sample</code> when specifying <code>sample</code> as the profile.</p> <p>Edgex 2.0</p> <p>Default service key for App Service Configurable instances has changed in Edgex 2.0 from <code>AppService-[profile name]</code> to <code>app-[profile name]</code></p> <p>Note</p> <p>If you need to run multiple instances with the same profile, e.g. <code>http-export</code>, but configured differently, you will need to override the service key with a custom name for one or more of the services. This is done with the <code>-sk/-serviceKey</code> command-line option or the <code>EDGEX_SERVICE_KEY</code> environment variable. See the Command-line Options and Environment Overrides sections for more detail.</p> <p>Note</p> <p>Functions can be declared in a profile but not used in the pipeline <code>ExecutionOrder</code>  allowing them to be added to the pipeline <code>ExecutionOrder</code> later at runtime if needed.</p> <p>The following profiles and their purposes are provided with App Service Configurable. </p>"},{"location":"microservices/application/AppServiceConfigurable/#rules-engine","title":"rules-engine","text":"<p>Profile used to push Event messages to the Rules Engine via the Redis Pub/Sub Message Bus. This is used in the default docker compose files for the <code>app-rules-engine</code> service</p> <p>One can optionally add Filter function via environment overrides</p> <ul> <li><code>WRITABLE_PIPELINE_EXECUTIONORDER: \"FilterByDeviceName, HTTPExport\"</code></li> <li><code>WRITABLE_PIPELINE_FUNCTIONS_FILTERBYDEVICENAME_PARAMETERS_DEVICENAMES: \"[comma separated list]\"</code></li> </ul> <p>There are many optional functions and parameters provided in this profile. See the complete profile for more details</p>"},{"location":"microservices/application/AppServiceConfigurable/#http-export","title":"http-export","text":"<p>Starter profile used for exporting data via HTTP.  Requires further configuration which can easily be accomplished using environment variable overrides</p> <p>Required:</p> <ul> <li> <p><code>WRITABLE_PIPELINE_FUNCTIONS_HTTPEXPORT_PARAMETERS_URL: [Your URL]</code></p> <p>There are many more optional functions and parameters provided in this profile. See the complete profile for more details.</p> </li> </ul>"},{"location":"microservices/application/AppServiceConfigurable/#metrics-influxdb","title":"metrics-influxdb","text":"<p>Edgex 2.2</p> <p>The <code>metrics-influxdb</code> profile is new for Edgex 2.2</p> <p>Note</p> <p>Service metrics are Beta released for EdgeX 2.2. Breaking changes, while not likely, may occur as more use of service metrics are added.</p> <p>Starter profile used for exporting telemetry data from other EdgeX services to InfluxDB via HTTP export. This profile configures the service to receive telemetry data from other services, transform it to Line Protocol syntax, batch the data and then export it to an InfluxDB service via HTTP. Requires further configuration which can easily be accomplished using environment variable overrides.</p> <p>Required:</p> <ul> <li> <p><code>WRITABLE_PIPELINE_FUNCTIONS_HTTPEXPORT_PARAMETERS_URL: [Your InfluxDB URL]</code></p> <ul> <li>Example value: `\"http://localhost:8086/api/v2/write?org=metrics&amp;bucket=edgex&amp;precision=ns\"``</li> </ul> </li> <li> <p><code>`WRITABLE_INSECURESECRETS_INFLUXDB_SECRETS_TOKEN</code>: [Your InfluxDB Token]</p> <ul> <li> <p>Example value: <code>\"Token 29ER8iMgQ5DPD_icTnSwH_77aUhSvD0AATkvMM59kZdIJOTNoJqcP-RHFCppblG3wSOb7LOqjp1xubA80uaWhQ==\"</code></p> </li> <li> <p>If using secure mode, store the token in the service's secret store via POST to the service's <code>/secret</code> endpoint </p> </li> </ul> <p>Example JSON to post to /secret endpoint</p> <pre><code>{\n\"apiVersion\":\"v2\",\n\"path\":\"influxdb\",\n\"secretData\":[\n{\n\"key\":\"Token\",\n\"value\":\"Token 29ER8iMgQ5DPD_icTnSwH_77aUhSvD0AATkvMM59kZdIJOTNoJqcP-RHFCppblG3wSOb7LOqjp1xubA80uaWhQ==\"\n}]\n}\n</code></pre> </li> </ul> <p>Optional Additional Tags:</p> <ul> <li><code>WRITABLE_PIPELINE_FUNCTIONS_TOLINEPROTOCOL_PARAMETERS_TAGS: &lt;your additional tags&gt;</code><ul> <li>Currently set to empty string</li> <li>Example value: `\"tag1:value1, tag2:value2\"</li> </ul> </li> </ul> <p>Optional Batching parameters (see Batch function for more details):</p> <ul> <li><code>WRITABLE_PIPELINE_FUNCTIONS_BATCH_PARAMETERS_MODE: &lt;your batch mode&gt;</code><ul> <li>Currently set to <code>\"bytimecount\"</code><ul> <li>Valid values are <code>\"bycount\"</code>, <code>\"bytime\"</code> or `\"bytimecount\"``</li> </ul> </li> </ul> </li> <li><code>`WRITABLE_PIPELINE_FUNCTIONS_BATCH_PARAMETERS_BATCHTHRESHOLD: &lt;your batch threshold count&gt;</code><ul> <li>Currently set to <code>100</code></li> </ul> </li> <li><code>WRITABLE_PIPELINE_FUNCTIONS_BATCH_PARAMETERS_TIMEINTERVAL: &lt;your batch time interval&gt;</code><ul> <li>Currently set to <code>\"60s\"</code></li> </ul> </li> </ul>"},{"location":"microservices/application/AppServiceConfigurable/#mqtt-export","title":"mqtt-export","text":"<p>Starter profile used for exporting data via MQTT. Requires further configuration which can easily be accomplished using environment variable overrides</p> <p>Required:</p> <ul> <li> <p><code>WRITABLE_PIPELINE_FUNCTIONS_MQTTEXPORT_PARAMETERS_BROKERADDRESS: [Your Broker Address]</code></p> <p>There are many optional functions and parameters provided in this profile. See the complete profile for more details</p> </li> </ul>"},{"location":"microservices/application/AppServiceConfigurable/#push-to-core","title":"push-to-core","text":"<p>Example profile demonstrating how to use the PushToCore function. Provided as an exmaple that can be copied and modified to create new custom profile. See the complete profile for more details</p> <p>Requires further configuration which can easily be accomplished using environment variable overrides</p> <p>Required:</p> <ul> <li><code>WRITABLE_PIPELINE_FUNCTIONS_PUSHTOCORE_PROFILENAME: [Your Event's profile name]</code></li> <li><code>WRITABLE_PIPELINE_FUNCTIONS_PUSHTOCORE_DEVICENAME: [Your Event's device name]</code></li> <li><code>WRITABLE_PIPELINE_FUNCTIONS_PUSHTOCORE_SOURCENAME: [Your Event's source name]</code></li> <li><code>WRITABLE_PIPELINE_FUNCTIONS_PUSHTOCORE_RESOURCENAME: [Your Event reading's resource name]</code></li> <li><code>WRITABLE_PIPELINE_FUNCTIONS_PUSHTOCORE_VALUETYPE: [Your Event reading's value type]</code></li> <li><code>WRITABLE_PIPELINE_FUNCTIONS_PUSHTOCORE_MEDIATYPE: [Your Event binary reading's media type]</code> </li> <li>Required only when <code>ValueType</code> is <code>Binary</code></li> </ul>"},{"location":"microservices/application/AppServiceConfigurable/#sample","title":"sample","text":"<p>Sample profile with all available functions declared and a sample pipeline. Provided as a sample that can be copied and modified to create new custom profiles. See the complete profile for more details</p>"},{"location":"microservices/application/AppServiceConfigurable/#functional-tests","title":"functional-tests","text":"<p>Profile used for the TAF functional testing  </p>"},{"location":"microservices/application/AppServiceConfigurable/#external-mqtt-trigger","title":"external-mqtt-trigger","text":"<p>Profile used for the TAF functional testing  of external MQTT Trigger</p>"},{"location":"microservices/application/AppServiceConfigurable/#what-if-my-input-data-isnt-an-edgex-event","title":"What if my input data isn't an EdgeX Event ?","text":"<p>The default <code>TargetType</code> for data flowing into the functions pipeline is an EdgeX Event DTO. There are cases when this incoming data might not be an EdgeX Event DTO. There are two setting that configure the TargetType to non-Event data.</p>"},{"location":"microservices/application/AppServiceConfigurable/#usetargettypeofbytearray","title":"UseTargetTypeOfByteArray","text":"<p>In these cases the <code>Pipeline</code> can be configured using <code>UseTargetTypeOfByteArray=true</code> to set the <code>TargetType</code> to be a byte array/slice, i.e. <code>[]byte</code>. The first function in the pipeline must then be one that can handle the <code>[]byte</code> data. The compression,  encryption and export functions are examples of pipeline functions that will take input data that is <code>[]byte</code>. </p> <p>Example - Configure the functions pipeline to compress, encrypt and then export the <code>[]byte</code> data via HTTP </p> <pre><code>[Writable]\nLogLevel = \"DEBUG\"\n[Writable.Pipeline]\nUseTargetTypeOfByteArray = true\nExecutionOrder = \"Compress, Encrypt, HTTPExport\"\n[Writable.Pipeline.Functions.Compress]\n[Writable.Pipeline.Functions.Compress.Parameters]\nAlogrithm = \"gzip\"\n[Writable.Pipeline.Functions.Encrypt]\n[Writable.Pipeline.Functions.Encrypt.Parameters]\nAlgorithm = \"aes\"\nKey = \"aquqweoruqwpeoruqwpoeruqwpoierupqoweiurpoqwiuerpqowieurqpowieurpoqiweuroipwqure\"\nInitVector = \"123456789012345678901234567890\"\n[Writable.Pipeline.Functions.HTTPExport]\n[Writable.Pipeline.Functions.HTTPExport.Parameters]\nMethod = \"post\"\nUrl = \"http://my.api.net/edgexdata\"\nMimeType = \"application/text\"\n</code></pre> <p>If along with this pipeline configuration, you also configured the <code>Trigger</code> to be <code>http</code> trigger,  you could then send any data to the app-service-configurable' s <code>/api/v2/trigger</code> endpoint and have it compressed, encrypted and sent to your configured URL above.</p> <p>Example - HTTP Trigger configuration</p> <pre><code>[Trigger]\nType=\"http\"\n</code></pre>"},{"location":"microservices/application/AppServiceConfigurable/#usetargettypeofmetric","title":"UseTargetTypeOfMetric","text":"<p>Edgex 2.2</p> <p>New for EdgeX 2.2 is the <code>UseTargetTypeOfMetric</code> setting</p> <p>This setting when set to true will cause the <code>TargeType</code> to be <code>&amp;dtos.Metric{}</code> and is meant to be used in conjunction with the new <code>ToLineProtocol</code> function. See ToLineProtocol section below for more details. In addition the <code>Trigger</code> <code>SubscribeTopics</code>must be set to <code>\"edgex/telemetry/#\"</code> so that the function receives the metric data from the other services.</p> <p>Example -  UseTargetTypeOfMetric </p> <pre><code>  [Writable.Pipeline]\n  UseTargetTypeOfMetric  = true\n  ExecutionOrder = \"ToLineProtocol, ...\"\n  ...\n      [Writable.Pipeline.Functions.ToLineProtocol]\n      [Writable.Pipeline.Functions.ToLineProtocol.Parameters]\n      Tags = \"\" # optional comma separated list of additional tags to add to the metric in to form \"tag:value,...\"\n  ...\n  [Trigger]\n  Type=\"edgex-messagebus\"\n  [Trigger.EdgexMessageBus]\n  ...\n    [Trigger.EdgexMessageBus.SubscribeHost]\n    ...\n    SubscribeTopics=\"edgex/telemetry/#\"\n</code></pre>"},{"location":"microservices/application/AppServiceConfigurable/#multiple-instances-of-a-function","title":"Multiple Instances of a Function","text":"<p>Edgex 2.0</p> <p>New for EdgeX 2.0</p> <p>Now multiple instances of the same configurable pipeline function can be specified,  configured differently and used together in the functions pipeline. Previously the function names specified in the <code>[Writable.Pipeline.Functions]</code> section had to match a built-in configurable pipeline function name exactly. Now the names specified only need to start with a built-in configurable pipeline function name. See the HttpExport section below for an example.</p>"},{"location":"microservices/application/AppServiceConfigurable/#available-configurable-pipeline-functions","title":"Available Configurable Pipeline Functions","text":"<p>Below are the functions that are available to use in the configurable pipeline function pipeline (<code>[Writable.Pipeline]</code>) section of the configuration. The function names below can be added to the <code>Writable.Pipeline.ExecutionOrder</code> setting (comma separated list) and must also be present or added to the <code>[Writable.Pipeline.Functions]</code> section as <code>[Writable.Pipeline.Functions.{FunctionName}]</code>. The functions will also have the <code>[Writable.Pipeline.Functions.{FunctionName}.Parameters]</code> section where the function's parameters are configured. Please refer to the Getting Started section above for an example.</p> <p>Note</p> <p>The <code>Parameters</code> section for each function is a key/value map of <code>string</code> values. So even tough the parameter is referred to as an Integer or Boolean, it has to be specified as a valid string representation, e.g. \"20\" or \"true\".</p> <p>Please refer to the function's detailed documentation by clicking the function name below.</p>"},{"location":"microservices/application/AppServiceConfigurable/#addtags","title":"AddTags","text":"<p>Parameters</p> <ul> <li><code>tags</code> - String containing comma separated list of tag key/value pairs. The tag key/value pairs are colon seperated</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.AddTags]\n[Writable.Pipeline.Functions.AddTags.Parameters]\ntags = \"GatewayId:HoustonStore000123,Latitude:29.630771,Longitude:-95.377603\"\n</code></pre>"},{"location":"microservices/application/AppServiceConfigurable/#batch","title":"Batch","text":"<p>Parameters</p> <ul> <li><code>Mode</code>- The batch mode to use. can be 'bycount', 'bytime' or 'bytimecount'</li> <li><code>BatchThreshold</code> - Number of items to batch before sending batched items to the next function in the pipeline. Used with  'bycount' and 'bytimecount' modes</li> <li><code>TimeInterval</code> - Amount of time to batch before sending batched items to the next function in the pipeline. Used with  'bytime' and 'bytimecount' modes</li> <li><code>IsEventData</code> - If true, specifies that the data being batched is <code>Events</code> and to un-marshal the batched data to <code>[]Event</code> prior to returning the batched data. By default the batched data returned is <code>[][]byte</code></li> <li><code>MergeOnSend</code> - If true, specifies that the data being batched is to be merged to a single <code>[]byte</code> prior to returning the batched data. By default the batched data returned is <code>[][]byte</code></li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.Batch]\n[Writable.Pipeline.Functions.Batch.Parameters]\nMode = \"bytimecount\" # can be \"bycount\", \"bytime\" or \"bytimecount\"\nBatchThreshold = \"30\"\nTimeInterval = \"60s\"\nIsEventData = \"false\"\nMergeOnSend = \"false\"     or\n[Writable.Pipeline.Functions.Batch]\n[Writable.Pipeline.Functions.Batch.Parameters]\nMode = \"bytimecount\" # can be \"bycount\", \"bytime\" or \"bytimecount\"\nBatchThreshold = \"30\"\nTimeInterval = \"60s\"\nIsEventData = \"true\"\nMergeOnSend = \"false\"    or\n[Writable.Pipeline.Functions.Batch]\n[Writable.Pipeline.Functions.Batch.Parameters]\nMode = \"bytimecount\" # can be \"bycount\", \"bytime\" or \"bytimecount\"\nBatchThreshold = \"30\"\nTimeInterval = \"60s\"\nIsEventData = \"false\"\nMergeOnSend = \"true\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>BatchByCount</code>, <code>BatchByTime</code>, and <code>BatchByTimeCount</code> configurable pipeline functions have been replaced by single <code>Batch</code> configurable pipeline function with additional <code>Mode</code> parameter.</p> <p>EdgeX 2.1</p> <p>The <code>IsEventData</code> setting is new for EdgeX 2.1</p> <p>EdgeX 2.1</p> <p>The <code>MergeOnSend</code> setting is new for EdgeX 2.2</p>"},{"location":"microservices/application/AppServiceConfigurable/#compress","title":"Compress","text":"<p>Parameters</p> <ul> <li><code>Algorithm</code> - Compression algorithm to use.  Can be 'gzip' or 'zlib'</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.Compress]\n[Writable.Pipeline.Functions.Compress.Parameters]\nAlgorithm = \"gzip\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>CompressWithGZIP</code> and <code>CompressWithZLIB</code> configurable pipeline functions have been replaced by the single <code>Compress</code> configurable pipeline function with additional <code>Algorithm</code> parameter.</p>"},{"location":"microservices/application/AppServiceConfigurable/#encrypt","title":"Encrypt","text":"<p>Parameters</p> <ul> <li><code>Algorithm</code> - AES (deprecated) or AES256</li> <li><code>Key</code> -  (optional, deprecated) Encryption key used for the encryption. Required if not using Secret Store for the encryption key data</li> <li><code>InitVector</code> - (deprecated) Initialization vector used for the encryption.</li> <li><code>SecretPath</code> - (required for AES256) Path in the <code>Secret Store</code> where the encryption key is located. Required if <code>Key</code> not specified.</li> <li><code>SecretName</code> - (required for AES256) Name of the secret for the encryption key in the <code>Secret Store</code>.  Required if <code>Key</code> not specified.</li> </ul> <p>Example</p> <p><pre><code>    # Encrypt with key specified in configuration\n[Writable.Pipeline.Functions.Encrypt]\n[Writable.Pipeline.Functions.Encrypt.Parameters]\nAlgorithm = \"aes\" Key = \"aquqweoruqwpeoruqwpoeruqwpoierupqoweiurpoqwiuerpqowieurqpowieurpoqiweuroipwqure\"\nInitVector = \"123456789012345678901234567890\"\n</code></pre> <pre><code>    # Encrypt with key pulled from Secret Store\n[Writable.Pipeline.Functions.Encrypt]\n[Writable.Pipeline.Functions.Encrypt.Parameters]\nAlgorithm = \"aes\"\nInitVector = \"123456789012345678901234567890\"\nSecretPath = \"aes\"\nSecretName = \"key\"\n</code></pre></p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>EncryptWithAES</code> configurable pipeline function have been replaced by the <code>Encrypt</code> configurable pipeline function with additional <code>Algorithm</code> parameter. In addition the ability to pull the encryption key from the <code>Secret Store</code> has been added.</p>"},{"location":"microservices/application/AppServiceConfigurable/#filterbydevicename","title":"FilterByDeviceName","text":"<p>Parameters</p> <ul> <li><code>DeviceNames</code> - Comma separated list of device names for filtering</li> <li><code>FilterOut</code>- Boolean indicating if the data matching the device names should be filtered out or filtered for.</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.FilterByDeviceName]\n[Writable.Pipeline.Functions.FilterByDeviceName.Parameters]\nDeviceNames = \"Random-Float-Device,Random-Integer-Device\"\nFilterOut = \"false\"\n</code></pre>"},{"location":"microservices/application/AppServiceConfigurable/#filterbyprofilename","title":"FilterByProfileName","text":"<p>Parameters</p> <ul> <li><code>ProfileNames</code> - Comma separated list of profile names for filtering</li> <li><code>FilterOut</code>- Boolean indicating if the data matching the profile names should be filtered out or filtered for.</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.FilterByProfileName]\n[Writable.Pipeline.Functions.FilterByProfileName.Parameters]\nProfileNames = \"Random-Float-Device, Random-Integer-Device\"\nFilterOut = \"false\"\n</code></pre> <p>EdgeX 2.0</p> <p>The <code>FilterByProfileName</code> configurable pipeline function is new for EdgeX 2.0 </p>"},{"location":"microservices/application/AppServiceConfigurable/#filterbyresourcename","title":"FilterByResourceName","text":"<p>Parameters</p> <ul> <li><code>ResourceName</code> - Comma separated list of reading resource names for filtering</li> <li><code>FilterOut</code>- Boolean indicating if the readings matching the resource names should be filtered out or filtered for.</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.FilterByResourceName]\n[Writable.Pipeline.Functions.FilterByResourceName.Parameters]\nResourceNames = \"Int8, Int64\"\nFilterOut = \"true\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>FilterByValueDescriptor</code> configurable pipeline function has been renamed to <code>FilterByResourceName</code> and parameter names adjusted. </p>"},{"location":"microservices/application/AppServiceConfigurable/#filterbysourcename","title":"FilterBySourceName","text":"<p>Parameters</p> <ul> <li><code>SourceNames</code> - Comma separated list of source names for filtering. Source name is either the device command name or the resource name that created the Event</li> <li><code>FilterOut</code>- Boolean indicating if the data matching the device names should be filtered out or filtered for.</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.FilterBySourceName]\n[Writable.Pipeline.Functions.FilterBySource.Parameters]\nSourceNames = \"Bool, BoolArray\"\nFilterOut = \"false\"\n</code></pre> <p>EdgeX 2.0</p> <p>The <code>FilterBySourceName</code> configurable pipeline function is new for EdgeX 2.0 </p>"},{"location":"microservices/application/AppServiceConfigurable/#httpexport","title":"HTTPExport","text":"<p>Parameters</p> <ul> <li><code>Method</code> - HTTP Method to use. Can be <code>post</code> or <code>put</code></li> <li><code>Url</code> - HTTP endpoint to POST/PUT the data.</li> <li><code>MimeType</code> - Optional mime type for the data. Defaults to <code>application/json</code> if not set.</li> <li><code>PersistOnError</code> - Indicates to persist the data if the POST fails. Store and Forward must also be enabled if this is set to \"true\".</li> <li><code>ContinueOnSendError</code> - For chained multi destination exports, if true continues after send error so next export function executes.</li> <li><code>ReturnInputData</code> - For chained multi destination exports if true, passes the input data to next export function.</li> <li><code>HeaderName</code> - (Optional) Name of the header key to add to the HTTP header</li> <li><code>SecretPath</code> - (Optional) Path of the secret in the <code>Secret Store</code> where the header value is stored.</li> <li><code>SecretName</code> - (Optional) Name of the secret for the header value in the <code>Secret Store</code>.</li> </ul> <p>Example</p> <p><pre><code>    # Simple HTTP Export\n[Writable.Pipeline.Functions.HTTPExport]\n[Writable.Pipeline.Functions.HTTPExport.Parameters]\nMethod = \"post\" MimeType = \"application/xml\" Url = \"http://my.api.net/edgexdata\" </code></pre> <pre><code>    # HTTP Export with secret header data pull from Secret Store\n[Writable.Pipeline.Functions.HTTPExport]\n[Writable.Pipeline.Functions.HTTPExport.Parameters]\nMethod = \"post\" MimeType = \"application/xml\" Url = \"http://my.api.net/edgexdata\"\nHeaderName = \"MyApiKey\" SecretPath = \"http\" SecretName = \"apikey\"\n</code></pre> <pre><code>    # Http Export to multiple destinations\n[Writable.Pipeline]\nExecutionOrder =\"HTTPExport1, HTTPExport2\"\n\n[Writable.Pipeline.Functions.HTTPExport1]\n[Writable.Pipeline.Functions.HTTPExport1.Parameters]\nMethod = \"post\" MimeType = \"application/xml\" Url = \"http://my.api1.net/edgexdata2\" ContinueOnSendError = \"true\"\nReturnInputData = \"true\"\n[Writable.Pipeline.Functions.HTTPExport2]\n[Writable.Pipeline.Functions.HTTPExport2.Parameters]\nMethod = \"put\" MimeType = \"application/xml\" Url = \"http://my.api2.net/edgexdata2\"\n</code></pre></p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>HTTPPost</code>, <code>HTTPPostJSON</code>, <code>HTTPPostXML</code>, <code>HTTPPut</code>, <code>HTTPPutJSON</code>,  and <code>HTTPPutXML</code>  configurable pipeline functions have been replaced by the single <code>HTTPExport</code> function with additional <code>Method</code> parameter. <code>ContinueOnSendError</code> and <code>ReturnInputData</code> parameter have been added to support multi destination exports. In addition the <code>HeaderName</code> and <code>SecretName</code> parameters have replaced the <code>SecretHeaderName</code> parameter.</p> <p>EdgeX 2.0</p> <p>The capability to chain Http Export functions to export to multiple destinations is new for Edgex 2.0. </p> <p>EdgeX 2.0</p> <p>Multiple instances (configured differently) of the same configurable pipeline function is new for EdgeX 2.0. The function names in the <code>Writable.Pipeline.Functions</code> section now only need to start with a built-in configurable pipeline function name, rather than be an exact match.</p>"},{"location":"microservices/application/AppServiceConfigurable/#jsonlogic","title":"JSONLogic","text":"<p>Parameters</p> <ul> <li><code>Rule</code> - The JSON formatted rule that with be executed on the data by JSONLogic </li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.JSONLogic]\n[Writable.Pipeline.Functions.JSONLogic.Parameters]\nRule = \"{ \\\"and\\\" : [{\\\"&lt;\\\" : [{ \\\"var\\\" : \\\"temp\\\" }, 110 ]}, {\\\"==\\\" : [{ \\\"var\\\" : \\\"sensor.type\\\" }, \\\"temperature\\\" ]} ] }\"\n</code></pre>"},{"location":"microservices/application/AppServiceConfigurable/#mqttexport","title":"MQTTExport","text":"<p>Parameters</p> <ul> <li><code>BrokerAddress</code> - URL specify the address of the MQTT Broker</li> <li><code>Topic</code> - Topic to publish the data</li> <li><code>ClientId</code> - Id to use when connecting to the MQTT Broker</li> <li><code>Qos</code> - MQTT Quality of Service (QOS) setting to use (0, 1 or 2). Please refer here for more details on QOS values</li> <li><code>AutoReconnect</code> - Boolean specifying if reconnect should be automatic if connection to MQTT broker is lost</li> <li><code>Retain</code> - Boolean  specifying if the MQTT Broker should save the last message published as the \u201cLast Good Message\u201d on that topic.</li> <li><code>SkipVerify</code> - Boolean indicating if the certificate verification should be skipped. </li> <li><code>PersistOnError</code> - Indicates to persist the data if the POST fails. Store and Forward must also be enabled if this is set to \"true\".</li> <li><code>AuthMode</code> - Mode of authentication to use when connecting to the MQTT Broker<ul> <li><code>none</code> - No authentication required</li> <li><code>usernamepassword</code> - Use username and password authentication. The Secret Store (Vault or InsecureSecrets) must contain the <code>username</code> and <code>password</code> secrets.</li> <li><code>clientcert</code> - Use Client Certificate authentication. The Secret Store (Vault or InsecureSecrets) must contain the <code>clientkey</code> and <code>clientcert</code> secrets.</li> <li><code>cacert</code> - Use CA Certificate authentication. The Secret Store (Vault or InsecureSecrets) must contain the <code>cacert</code> secret.</li> </ul> </li> <li><code>SecretPath</code> - Path in the secret store where authentication secrets are stored.</li> </ul> <p>Note<p><code>Authmode=cacert</code> is only needed when client authentication (e.g. <code>usernamepassword</code>) is not required, but a CA Cert is needed to validate the broker's SSL/TLS cert.</p> </p> <p>Example</p> <p><pre><code>    # Simple MQTT Export\n[Writable.Pipeline.Functions.MQTTExport]\n[Writable.Pipeline.Functions.MQTTExport.Parameters]\nBrokerAddress = \"tcps://localhost:8883\"\nTopic = \"mytopic\"\nClientId = \"myclientid\"\n</code></pre> <pre><code>    # MQTT Export with auth credentials pull from the Secret Store\n[Writable.Pipeline.Functions.MQTTExport]\n[Writable.Pipeline.Functions.MQTTExport.Parameters]\nBrokerAddress = \"tcps://my-broker-host.com:8883\"\nTopic = \"mytopic\"\nClientId = \"myclientid\"\nQos=\"2\"\nAutoReconnect=\"true\"\nRetain=\"true\"\nSkipVerify = \"false\"\nPersistOnError = \"true\"\nAuthMode = \"usernamepassword\"\nSecretPath = \"mqtt\"\n</code></pre></p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>MQTTSecretSend</code> configurable pipeline function has been renamed to <code>MQTTExport</code> and the deprecated  <code>MQTTSend</code> configurable pipeline function has been removed</p>"},{"location":"microservices/application/AppServiceConfigurable/#pushtocore","title":"PushToCore","text":"<p>Parameters</p> <ul> <li><code>ProfileName</code> - Profile name to use for the new Event</li> <li><code>DeviceName</code> - Device name to use for  the new Event</li> <li><code>ResourceName</code> -  Resource name name to use for  the new Event's<code>SourceName</code> and Reading's <code>ResourceName</code></li> <li><code>ValueType</code> - Value type to use  the new Event Reading's value type</li> <li><code>MediaType</code> - Media type to use the new Event Reading's value type. Required when the value type is <code>Binary</code></li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.PushToCore]\n[Writable.Pipeline.Functions.PushToCore.Parameters]\nProfileName = \"MyProfile\"\nDeviceName = \"MyDevice\"\nResourceName = \"SomeResource\"\nValueType = \"String\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>ProfileName</code>, <code>ValueType</code> and <code>MediaType</code> parameters are new and the <code>ReadingName</code> parameter has been renamed to <code>ResourceName</code>. </p>"},{"location":"microservices/application/AppServiceConfigurable/#setresponsedata","title":"SetResponseData","text":"<p>Parameters</p> <ul> <li><code>ResponseContentType</code> - Used to specify content-type header for response - optional</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.SetResponseData]\n[Writable.Pipeline.Functions.SetResponseData.Parameters]\nResponseContentType = \"application/json\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>SetOutputData</code> configurable pipeline function has been renamed to <code>SetResponseData</code> . </p>"},{"location":"microservices/application/AppServiceConfigurable/#transform","title":"Transform","text":"<p>Parameters</p> <ul> <li><code>Type</code> - Type of transformation to perform. Can be 'xml' or 'json'</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.Transform]\n[Writable.Pipeline.Functions.Transform.Parameters]\nType = \"xml\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>TransformToJSON</code> and <code>TransformToXML</code> configurable pipeline functions have been replaced by the single <code>Transform</code> configurable pipeline function with additional <code>Type</code> parameter.</p>"},{"location":"microservices/application/AppServiceConfigurable/#tolineprotocol","title":"ToLineProtocol","text":"<p>EdgeX 2.2</p> <p><code>ToLineProtocol</code> is new for Edgex 2.2</p> <p>Parameters</p> <ul> <li><code>Tags</code> - optional comma separated list of additional tags to add to the metric in to form \"tag:value,...\"</li> </ul> <p>Example</p> <pre><code>    [Writable.Pipeline.Functions.ToLineProtocol]\n[Writable.Pipeline.Functions.ToLineProtocol.Parameters]\nTags = \"\" # optional comma separated list of additional tags to add to the metric in to form \"tag:value,...\"\n</code></pre> <p>Note</p> <p>The new <code>UseTargetTypeOfMetric</code> setting must be set to true when using this function. See the UseTargetTypeOfMetric section above for more details.</p>"},{"location":"microservices/application/ApplicationFunctionsSDK/","title":"App Functions SDK Introduction","text":"<p>Welcome the App Functions SDK for EdgeX. This SDK is meant to provide all the plumbing necessary for developers to get started in processing/transforming/exporting data out of EdgeX. </p> <p>If you're new to the SDK - checkout the Getting Started guide.</p> <p>If you're already familiar - checkout the various sections about the SDK:</p> Section Description Application Service API Provides a list of all available APIs on the interface use to build Application Services App Function Context API Provides a list of all available APIs on the context interface that is available inside of a pipeline function Pipeline Function Error Handling Describes how to properly handle pipeline execution failures Built-In Pipeline Functions Provides a list of the available pipeline functions/transforms in the SDK Advanced Topics Learn about other ways to leverage the SDK beyond basic use cases <p>The App Functions SDK implements a small REST API which can be seen Here. </p>"},{"location":"microservices/application/ApplicationServiceAPI/","title":"Application Service API","text":"<p>The <code>ApplicationService</code> API is the central API for creating an EdgeX Application Service.</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>ApplicationService</code> API and factory functions replace direct access to the <code>AppFunctionsSDK</code> struct. </p> <p>The new <code>ApplicationService</code> API is as follows:</p> <pre><code>type AppFunction = func(appCxt AppFunctionContext, data interface{}) (bool, interface{})\n\ntype FunctionPipeline struct {\nId         string\nTransforms []AppFunction\nTopic      string\nHash       string\n}\n\ntype ApplicationService interface {\nApplicationSettings() map[string]string\nGetAppSetting(setting string) (string, error)\nGetAppSettingStrings(setting string) ([]string, error)\nLoadCustomConfig(config UpdatableConfig, sectionName string) error\nListenForCustomConfigChanges(configToWatch interface{}, sectionName string, changedCallback func(interface{})) error\nSetFunctionsPipeline(transforms ...AppFunction) error *** DEPRECATED ***\nSetDefaultFunctionsPipeline(transforms ...AppFunction) error\nAddFunctionsPipelineByTopics(id string, topics []string, transforms ...AppFunction) error\nLoadConfigurablePipeline() ([]AppFunction, error) *** DEPRECATED by LoadConfigurableFunctionPipelines ***\nLoadConfigurableFunctionPipelines() (map[string]FunctionPipeline, error)\nMakeItRun() error\nMakeItStop()\nGetSecret(path string, keys ...string) (map[string]string, error)\nStoreSecret(path string, secretData map[string]string) error LoggingClient() logger.LoggingClient\nEventClient() interfaces.EventClient\nCommandClient() interfaces.CommandClient\nNotificationClient() interfaces.NotificationClient\nSubscriptionClient() interfaces.SubscriptionClient\nDeviceServiceClient() interfaces.DeviceServiceClient\nDeviceProfileClient() interfaces.DeviceProfileClient\nDeviceClient() interfaces.DeviceClient\nRegistryClient() registry.Client\nMetricsManager() bootstrapInterfaces.MetricsManager\nAddBackgroundPublisher(capacity int) (BackgroundPublisher, error)\nAddBackgroundPublisherWithTopic(capacity int, topic string) (BackgroundPublisher, error)\nBuildContext(correlationId string, contentType string) AppFunctionContext\nAddRoute(route string, handler func(http.ResponseWriter, *http.Request), methods ...string) error\nRequestTimeout() time.Duration\nRegisterCustomTriggerFactory(name string, factory func(TriggerConfig) (Trigger, error)) error\nRegisterCustomStoreFactory(name string, factory func(cfg DatabaseInfo, cred config.Credentials) (StoreClient, error)) error\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#factory-functions","title":"Factory Functions","text":"<p>The App Functions SDK provides two factory functions for creating an <code>ApplicationService</code></p>"},{"location":"microservices/application/ApplicationServiceAPI/#newappservice","title":"NewAppService","text":"<p><code>NewAppService(serviceKey string) (interfaces.ApplicationService, bool)</code></p> <p>This factory function returns an <code>interfaces.ApplicationService</code> using the default Target Type of <code>dtos.Event</code>  and initializes the service. The second <code>bool</code> return parameter will be <code>true</code> if successfully initialized, otherwise it will be <code>false</code> when error(s) occurred during initialization. All error(s) are logged so the caller just needs to call <code>os.Exit(-1)</code> if <code>false</code> is returned.</p> <p>Example - NewAppService</p> <pre><code>const serviceKey = \"app-myservice\"\n...\n\nservice, ok := pkg.NewAppService(serviceKey)\nif !ok {\nos.Exit(-1)\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#newappservicewithtargettype","title":"NewAppServiceWithTargetType","text":"<p><code>NewAppServiceWithTargetType(serviceKey string, targetType interface{}) (interfaces.ApplicationService, bool)</code></p> <p>This factory function returns an <code>interfaces.ApplicationService</code> using the passed in Target Type and initializes the service. The second <code>bool</code> return parameter will be <code>true</code> if successfully initialized, otherwise it will be <code>false</code> when error(s) occurred during initialization. All error(s) are logged so the caller just needs to call <code>os.Exit(-1)</code> if <code>false</code> is returned.</p> <p>See the Target Type advanced topic for more details.</p> <p>Example - NewAppServiceWithTargetType</p> <pre><code>const serviceKey = \"app-myservice\"\n...\n\nservice, ok := pkg.NewAppServiceWithTargetType(serviceKey, &amp;[]byte{})\nif !ok {\nos.Exit(-1)\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#custom-configuration-apis","title":"Custom Configuration APIs","text":"<p>The following <code>ApplicationService</code> APIs allow your service to access their custom configuration from the TOML file and/or Configuration Provider. See the Custom Configuration advanced topic for more details.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#applicationsettings","title":"ApplicationSettings","text":"<p><code>ApplicationSettings() map[string]string</code></p> <p>This API returns the complete key/value map of custom settings</p> <p>Example - ApplicationSettings</p> <pre><code>[ApplicationSettings]\nGreeting = \"Hello World\"\n</code></pre> <pre><code>appSettings := service.ApplicationSettings()\ngreeting := appSettings[\"Greeting\"]\nservice.LoggingClient.Info(greeting)\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#getappsetting","title":"GetAppSetting","text":"<p><code>GetAppSetting(setting string) (string, error)</code></p> <p>This API is a convenience API that returns a single setting from the <code>[ApplicationSetting]</code>  section of the service configuration. An error is returned if the specified setting is not found.</p> <p>Example - GetAppSetting</p> <pre><code>[ApplicationSettings]\nGreeting = \"Hello World\"\n</code></pre> <pre><code>greeting, err := service.GetAppSetting[\"Greeting\"]\nif err != nil {\n...\n}\nservice.LoggingClient.Info(greeting)\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#getappsettingstrings","title":"GetAppSettingStrings","text":"<p><code>GetAppSettingStrings(setting string) ([]string, error)</code></p> <p>This API is a convenience API that parses the string value for the specified custom application setting as a comma separated list. It returns the list of strings. An error is returned if the specified setting is not found.</p> <p>Example - GetAppSettingStrings</p> <pre><code>[ApplicationSettings]\nGreetings = \"Hello World, Welcome World, Hi World\"\n</code></pre> <pre><code>greetings, err := service.GetAppSettingStrings[\"Greetings\"]\nif err != nil {\n...\n}\nfor _, greeting := range greetings {\nservice.LoggingClient.Info(greeting)\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#loadcustomconfig","title":"LoadCustomConfig","text":"<p><code>LoadCustomConfig(config UpdatableConfig, sectionName string) error</code></p> <p>This API loads the service's Structured Custom Configuration from local file or the Configuration Provider (if enabled). The Configuration Provider will also be seeded with the custom configuration if service is using the Configuration Provider. The <code>UpdateFromRaw</code> API (<code>UpdatableConfig</code> interface) will be called on the custom configuration when the configuration is loaded from the Configuration Provider. The custom config must implement the <code>UpdatableConfig</code> interface.</p> <p>Example - LoadCustomConfig</p> <pre><code>[AppCustom] # Can be any name you choose\nResourceNames = \"Boolean, Int32, Uint32, Float32, Binary\"\nSomeValue = 123\n[AppCustom.SomeService]\nHost = \"localhost\"\nPort = 9080\nProtocol = \"http\"\n</code></pre> <pre><code>type ServiceConfig struct {\nAppCustom AppCustomConfig\n}\n\ntype AppCustomConfig struct {\nResourceNames string\nSomeValue     int\nSomeService   HostInfo\n}\n\nfunc (c *ServiceConfig) UpdateFromRaw(rawConfig interface{}) bool {\nconfiguration, ok := rawConfig.(*ServiceConfig)\nif !ok {\nreturn false //errors.New(\"unable to cast raw config to type 'ServiceConfig'\")\n}\n\n*c = *configuration\n\nreturn true\n}\n\n...\n\nserviceConfig := &amp;ServiceConfig{}\nerr := service.LoadCustomConfig(serviceConfig, \"AppCustom\")\nif err != nil {\n...\n}\n</code></pre> <p>See the App Service Template for a complete example of using Structured Custom Configuration </p>"},{"location":"microservices/application/ApplicationServiceAPI/#listenforcustomconfigchanges","title":"ListenForCustomConfigChanges","text":"<p><code>ListenForCustomConfigChanges(configToWatch interface{}, sectionName string, changedCallback func(interface{})) error</code></p> <p>This API starts a listener on the Configuration Provider for changes to the specified section of the custom configuration. When changes are received from the Configuration Provider the provided <code>changedCallback</code> function is called with the updated section of configuration. The service must then implement the code to copy the updates into it's copy of the configuration and respond to the updates if needed.</p> <p>Example - ListenForCustomConfigChanges</p> <pre><code>[AppCustom] # Can be any name you choose\nResourceNames = \"Boolean, Int32, Uint32, Float32, Binary\"\nSomeValue = 123\n[AppCustom.SomeService]\nHost = \"localhost\"\nPort = 9080\nProtocol = \"http\"\n</code></pre> <pre><code>...\n\nerr := service.ListenForCustomConfigChanges(&amp;serviceConfig.AppCustom, \"AppCustom\", ProcessConfigUpdates)\nif err != nil {\nlogger.Errorf(\"unable to watch custom writable configuration: %s\", err.Error())\n}\n\n...\n\nfunc (app *myApp) ProcessConfigUpdates(rawWritableConfig interface{}) {\nupdated, ok := rawWritableConfig.(*config.AppCustomConfig)\nif !ok {\n...\nreturn\n}\n\nprevious := app.serviceConfig.AppCustom\napp.serviceConfig.AppCustom = *updated\n\nif reflect.DeepEqual(previous, updated) {\nlogger.Info(\"No changes detected\")\nreturn\n}\n\nif previous.SomeValue != updated.SomeValue {\nlogger.Infof(\"AppCustom.SomeValue changed to: %d\", updated.SomeValue)\n}\nif previous.ResourceNames != updated.ResourceNames {\nlogger.Infof(\"AppCustom.ResourceNames changed to: %s\", updated.ResourceNames)\n}\nif !reflect.DeepEqual(previous.SomeService, updated.SomeService) {\nlogger.Infof(\"AppCustom.SomeService changed to: %v\", updated.SomeService)\n}\n}\n</code></pre> <p>See the App Service Template for a complete example of using Structured Custom Configuration </p>"},{"location":"microservices/application/ApplicationServiceAPI/#function-pipeline-apis","title":"Function Pipeline APIs","text":"<p>The following <code>ApplicationService</code> APIs allow your service to set the Functions Pipeline and start and stop the Functions Pipeline.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#appfunction","title":"AppFunction","text":"<p><code>type AppFunction = func(appCxt AppFunctionContext, data interface{}) (bool, interface{})</code></p> <p>This type defines the signature that all pipeline functions must implement.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#functionpipeline","title":"FunctionPipeline","text":"<p>This type defines the struct that contains the metadata for a functions pipeline instance.</p> <pre><code>type FunctionPipeline struct {\nId         string\nTransforms []AppFunction\nTopic      string\nHash       string\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#setfunctionspipeline","title":"SetFunctionsPipeline","text":"<p><code>SetFunctionsPipeline(transforms ...AppFunction) error</code></p> <p>This API has been deprecated (Replaced by SetDefaultFunctionsPipeline) and will be removed in a future release. Functions the same as SetDefaultFunctionsPipeline.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#setdefaultfunctionspipeline","title":"SetDefaultFunctionsPipeline","text":"<p><code>SetDefaultFunctionsPipeline(transforms ...AppFunction) error</code></p> <p>This API sets the default functions pipeline with the specified list of Application Functions.  This pipeline is executed for all messages received from the configured trigger. Note that the functions are executed in the order provided in the list.  An error is returned if the list is empty.</p> <p>Example - SetDefaultFunctionsPipeline</p> <pre><code>sample := functions.NewSample()\nerr = service.SetDefaultFunctionsPipeline(\ntransforms.NewFilterFor(deviceNames).FilterByDeviceName,\nsample.LogEventDetails,\nsample.ConvertEventToXML,\nsample.OutputXML)\nif err != nil {\napp.lc.Errorf(\"SetDefaultFunctionsPipeline returned error: %s\", err.Error())\nreturn -1\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#addfunctionspipelinefortopics","title":"AddFunctionsPipelineForTopics","text":"<p><code>AddFunctionsPipelineForTopics(id string, topics []string, transforms ...AppFunction) error</code></p> <p>This API adds a functions pipeline with the specified unique ID and list of functions (transforms) to be executed when the received topic matches one of the specified pipeline topics. See the Pipeline Per Topic section for more details.</p> <p>Example - AddFunctionsPipelineForTopics</p> <pre><code>sample := functions.NewSample()\nerr = service.AddFunctionsPipelineForTopic(\"Floats-Pipeline\", []string{\"edgex/events/#/#/Random-Float-Device/#\"},\ntransforms.NewFilterFor(deviceNames).FilterByDeviceName,\nsample.LogEventDetails,\nsample.ConvertEventToXML,\nsample.OutputXML)\nif err != nil {\n...\nreturn -1\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#loadconfigurablepipeline","title":"LoadConfigurablePipeline","text":"<p><code>LoadConfigurablePipeline() ([]AppFunction, error)</code></p> <p>This API loads the default function pipeline from configuration.  An error is returned if the configuration is not valid, i.e. missing required function parameters, invalid function name, etc.  </p> <p>Warning</p> <p>This API is <code>Deprecated</code>, has been replaced by <code>LoadConfigurableFunctionPipelines</code> below and will be removed in a future release.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#loadconfigurablefunctionpipelines","title":"LoadConfigurableFunctionPipelines","text":"<p><code>LoadConfigurableFunctionPipelines() (map[string]FunctionPipeline, error)</code></p> <p>This API loads the function pipelines (default and per topic) from configuration.  An error is returned if the configuration is not valid, i.e. missing required function parameters, invalid function name, etc.</p> <p>Note</p> <p>This API is only useful if pipeline is always defined in configuration as is with App Service Configurable.</p> <p>Example - LoadConfigurableFunctionPipelines</p> <pre><code>configuredPipelines, err := service.LoadConfigurableFunctionPipelines()\nif err != nil {\n...\nos.Exit(-1)\n}\n\n...\n\nfor _, pipeline := range configuredPipelines {\nswitch pipeline.Id {\ncase interfaces.DefaultPipelineId:\nif err = service.SetFunctionsPipeline(pipeline.Transforms...); err != nil {\n...\nos.Exit(-1)\n}\ndefault:\nif err = service.AddFunctionsPipelineForTopic(pipeline.Id, pipeline.Topic, pipeline.Transforms...); err != nil {\n...\nos.Exit(-1)\n}\n}\n}\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#makeitrun","title":"MakeItRun","text":"<p><code>MakeItRun() error</code></p> <p>This API starts the configured trigger to allow the Functions Pipeline to execute when the trigger receives data. The internal webserver is also started. This is a long running API which does not return until the service is stopped or MakeItStop() is called. An error is returned if the trigger can not be create or initialized or if the internal webserver encounters an error.</p> <p>Example - MakeItRun</p> <pre><code>if err := service.MakeItRun(); err != nil {\nlogger.Errorf(\"MakeItRun returned error: %s\", err.Error())\nos.exit(-1)\n}\n\n// Do any required cleanup here, if needed\n\nos.exit(0)\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#makeitstop","title":"MakeItStop","text":"<p><code>MakeItStop()</code></p> <p>This API  stops the configured trigger so that the functions pipeline no longer executes. The internal webserver continues to accept requests. See Stopping the Service advanced topic for more details</p> <p>Example - MakeItStop</p> <pre><code>service.MakeItStop()\n...\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#secrets-apis","title":"Secrets APIs","text":"<p>The following <code>ApplicationService</code> APIs allow your service retrieve and store secrets from/to the service's SecretStore. See the Secrets advanced topic for more details about using secrets.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#getsecret","title":"GetSecret","text":"<p><code>GetSecret(path string, keys ...string) (map[string]string, error)</code></p> <p>This API returns the secret data from the secret store (secure or insecure) for the specified path. An error is returned if the path is not found or any of the keys (if specified) are not found. Omit keys if all secret data for the specified path is required.</p> <p>Example - GetSecret</p> <pre><code>secretData, err := service.GetSecret(\"mqtt\")\nif err != nil {\n...\n}\nusername := secretData[\"user\"]\npassword := secretData[\"password\"]\n...\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#storesecret","title":"StoreSecret","text":"<p><code>StoreSecret(path string, secretData map[string]string) error</code></p> <p>This API stores the specified secret data into the secret store (secure mode only) for the specified path An error is returned if:</p> <ul> <li>Specified secret data is empty</li> <li>Not using the secure secret store, i.e. not valid with InsecureSecrets configuration</li> <li>Secure secret provider is not properly initialized</li> <li>Connection issues with Secret Store service.</li> </ul> <p>Note</p> <p>Typically Application Services only needs to retrieve secrets via the code. The <code>/secret</code> REST API is used to seed secrets into the service's SecretStore.</p> <p>Example - StoreSecret</p> <pre><code>secretData := generateMqttCredentials()\nerr := service.StoreSecret(\"mqtt\", secretData)\nif err != nil {\n...\n}\n...\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#client-apis","title":"Client APIs","text":"<p>The following <code>ApplicationService</code> APIs allow your service access the various EdgeX clients and their APIs.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#loggingclient","title":"LoggingClient","text":"<p><code>LoggingClient() logger.LoggingClient</code></p> <p>This API returns the LoggingClient instance which the service uses to log messages. See the LoggingClient interface for more details. </p> <p>Example - LoggingClient</p> <pre><code>service.LoggingClient().Info(\"Hello World\")\nservice.LoggingClient().Errorf(\"Some error occurred: %w\", err)\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#registryclient","title":"RegistryClient","text":"<p><code>RegistryClient() registry.Client</code></p> <p>This API returns the Registry Client. Note the registry must been enabled, otherwise this will return nil. See the Registry Client interface for more details. Useful if service needs to add additional health checks or needs to get endpoint of another registered service. </p>"},{"location":"microservices/application/ApplicationServiceAPI/#eventclient","title":"EventClient","text":"<p><code>EventClient() interfaces.EventClient</code></p> <p>This API returns the Event Client. Note if Core Data is not specified in the Clients configuration, this will return nil. See the Event Client interface for more details. Useful for adding, deleting  or querying Events.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#commandclient","title":"CommandClient","text":"<p><code>CommandClient() interfaces.CommandClient</code></p> <p>This API returns the Command Client. Note if Support Command is not specified in the Clients configuration, this will return nil. See the Command Client interface for more details. Useful for issuing commands to devices.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#notificationclient","title":"NotificationClient","text":"<p><code>NotificationClient() interfaces.NotificationClient</code></p> <p>This API returns the Notification Client. Note if Support Notifications is not specified in the Clients configuration, this will return nil. See the Notification Client interface for more details. Useful for sending notifications.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#subscriptionclient","title":"SubscriptionClient","text":"<p><code>SubscriptionClient() interfaces.SubscriptionClient</code></p> <p>This API returns the Subscription client. Note if Support Notifications is not specified in the Clients configuration, this will return nil. See the Subscription Client interface for more details. Useful for creating notification subscriptions.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#deviceserviceclient","title":"DeviceServiceClient","text":"<p><code>DeviceServiceClient() interfaces.DeviceServiceClient</code></p> <p>This API returns the Device Service Client. Note if Core Metadata is not specified in the Clients configuration, this will return nil. See the Device Service Client interface for more details. Useful for querying information about a Device Service.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#deviceprofileclient","title":"DeviceProfileClient","text":"<p><code>DeviceProfileClient() interfaces.DeviceProfileClient</code></p> <p>This API returns the Device Profile Client. Note if Core Metadata is not specified in the Clients configuration, this will return nil. See the Device Profile Client interface for more details. Useful for querying information about a Device Profile such as Device Resource details.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#deviceclient","title":"DeviceClient","text":"<p><code>DeviceClient() interfaces.DeviceClient</code></p> <p>This API returns the Device Client. Note if Core Metadata is not specified in the Clients configuration, this will return nil. See the Device Client interface for more details. Useful for querying list of devices for a specific Device Service or Device Profile.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#background-publisher-apis","title":"Background Publisher APIs","text":"<p>The following <code>ApplicationService</code> APIs allow Application Services to have background publishers. See the Background Publishing advanced topic for more details and example.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#addbackgroundpublisher","title":"AddBackgroundPublisher","text":"<p><code>AddBackgroundPublisher(capacity int) (BackgroundPublisher, error)</code></p> <p>This API adds and returns a BackgroundPublisher which is used to publish asynchronously to the Edgex MessageBus. Not valid for use with the HTTP or External MQTT triggers</p>"},{"location":"microservices/application/ApplicationServiceAPI/#addbackgroundpublisherwithtopic","title":"AddBackgroundPublisherWithTopic","text":"<p><code>AddBackgroundPublisherWithTopic(capacity int, topic string) (BackgroundPublisher, error)</code></p> <p>This API adds and returns a BackgroundPublisher which is used to publish asynchronously to the Edgex MessageBus on the specified topic. Not valid for use with the HTTP or External MQTT triggers. </p>"},{"location":"microservices/application/ApplicationServiceAPI/#buildcontext","title":"BuildContext","text":"<p><code>BuildContext(correlationId string, contentType string) AppFunctionContext</code></p> <p>This API allows external callers that may need a context (eg background publishers) to easily create one.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#other-apis","title":"Other APIs","text":""},{"location":"microservices/application/ApplicationServiceAPI/#addroute","title":"AddRoute","text":"<p><code>AddRoute(route string, handler func(http.ResponseWriter, *http.Request), methods ...string) error</code></p> <p>This API adds a custom REST route to the application service's internal webserver.  A reference to the ApplicationService is add the the context that is passed to the handler, which can be retrieved using the <code>AppService</code> key. See Custom REST Endpoints advanced topic for more details and example.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#requesttimeout","title":"RequestTimeout","text":"<p><code>RequestTimeout() time.Duration</code></p> <p>This API returns the parsed value for the <code>Service.RequestTimeout</code> configuration setting. The setting is parsed on start-up so that any error is caught then.</p> <p>Example - RequestTimeout</p> <pre><code>[Service]\n:\nRequestTimeout = \"60s\"\n:\n</code></pre> <pre><code>timeout := service.RequestTimeout()\n</code></pre>"},{"location":"microservices/application/ApplicationServiceAPI/#registercustomtriggerfactory","title":"RegisterCustomTriggerFactory","text":"<p><code>RegisterCustomTriggerFactory(name string, factory func(TriggerConfig) (Trigger, error)) error</code></p> <p>This API registers a trigger factory for a custom trigger to be used. See the Custom Triggers section for more details and example.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#registercustomstorefactory","title":"RegisterCustomStoreFactory","text":"<p><code>RegisterCustomStoreFactory(name string, factory func(cfg DatabaseInfo, cred config.Credentials) (StoreClient, error)) error</code></p> <p>This API registers a factory to construct a custom store client for the store &amp; forward loop.</p>"},{"location":"microservices/application/ApplicationServiceAPI/#metricsmanager","title":"MetricsManager","text":"<p><code>MetricsManager() bootstrapInterfaces.MetricsManager</code></p> <p>This API returns the Metrics Manager used to register counter, gauge, gaugeFloat64 or timer metric types from github.com/rcrowley/go-metrics</p> <pre><code>myCounterMetricName := \"MyCounter\"\nmyCounter := gometrics.NewCounter()\nmyTags := map[string]string{\"Tag1\":\"Value1\"}\napp.service.MetricsManager().Register(myCounterMetricName, myCounter, myTags)   </code></pre>"},{"location":"microservices/application/ApplicationServices/","title":"Application Services","text":"<p>Application Services are a means to get data from EdgeX Foundry to be processed at the edge and/or sent to external systems (be it analytics package, enterprise or on-prem application, cloud systems like Azure IoT, AWS IoT, or Google IoT Core, etc.). Application Services provide the means for data to be prepared (transformed, enriched, filtered, etc.) and groomed (formatted, compressed, encrypted, etc.) before being sent to an endpoint of choice or published back to other Application Service to consume. The export endpoints supported out of the box today include HTTP and MQTT endpoints, but custom endpoints can be implemented along side the existing functionality.</p> <p>Application Services are based on the idea of a \"Functions Pipeline\". A functions pipeline is a collection of functions that process messages (in this case EdgeX event/reading messages) in the order that you've specified. Triggers seed the first function in the pipeline with the data received by the Application Service. A trigger is something like a message landing in a watched message queue. The most commonly used Trigger is the MessageBus Trigger. See the Triggers section for more details</p> <p></p> <p>An Applications Functions Software Development Kit (or <code>App Functions SDK</code>) is available to help create Application Services. Currently the only SDK supported language is Golang, with the intention that community developed and supported SDKs may come in the future for other languages. The SDK is available as a Golang module to remain operating system (OS) agnostic and to comply with the latest EdgeX guidelines on dependency management.</p> <p>Any application built on top of the Application Functions SDK is considered an App Service. This SDK is provided to help build Application Services by assembling triggers, pre-existing functions and custom functions of your making into a pipeline.</p>"},{"location":"microservices/application/ApplicationServices/#standard-functions","title":"Standard Functions","text":"<p>As mentioned, an Application Service is a function pipeline. The SDK provides some standard functions that can be used in a functions pipeline. In the future, additional functions will be provided \"standard\" or in other words provided with the SDK. Additionally, developers can implement their own custom functions and add those to their Application Service functions pipeline.</p> <p></p> <p>One of the most common use cases for working with data that comes from the MessageBus is to filter data down to what is relevant for a given application and to format it. To help facilitate this, six primary functions  are included in the SDK. </p> <ul> <li>The first is the <code>FilterByProfileName</code> function which will remove events that do or do not match the configured <code>ProfileNames</code> and execution of the pipeline will cease if no event remains after filtering. </li> <li>The second is the <code>FilterByDeviceName</code> function which will remove events that do or do not match the configured <code>DeviceNames</code> and execution of the pipeline will cease if no event remains after filtering.  </li> <li>The third is the <code>FilterBySourceName</code> function which will remove events that do or do not match the configured <code>SourceNames</code> and execution of the pipeline will cease if no event remains after filtering. A <code>SourceName</code> is the name of the source (command or resource) that the Event was created from. </li> <li>The fourth is the <code>FilterByResourceName</code> which exhibits the same behavior as <code>DeviceNameFilter</code> except filtering the event's <code>Readings</code> on <code>ResourceName</code> instead of <code>DeviceName</code>. Execution of the pipeline will cease if no readings remain after filtering. </li> <li>The fifth and sixth provided functions in the SDK transform the data received to either XML or JSON by calling <code>XMLTransform</code> or <code>JSONTransform</code>.</li> </ul> <p>EdgeX 2.0</p> <p>The <code>FilterByProfileName</code> and <code>FilterBySourceName</code> pipeline functions are new in EdgeX 2.0 with the addition of the <code>ProfileName</code> and <code>SourceName</code> on the V2 <code>Event</code> DTO.   <code>FilterByResourceName</code> replaces the <code>FileterByValueDescriptor</code> pipeline function in EdgeX 2.0 with the change of <code>Name</code> to <code>ResourceName</code> on the V2 <code>Reading</code> DTO. This function serves the same purpose of filtering Event Readings.</p> <p>Typically, after filtering and transforming the data as needed, exporting is the last step in a pipeline to ship the data where it needs to go. There are three primary functions included in the SDK to help facilitate this. The first are the<code>HTTPPost/HTTPPut</code> functions that will POST/PUT the provided data to a specified endpoint, and the third is an <code>MQTTSecretSend()</code> function that will publish the provided data to an MQTT Broker as specified in the configuration.</p> <p>See Built-in Functions section for full list of SDK supplied functions </p> <p>Note</p> <p>The App SDK provides much more functionality than just filtering, formatting and exporting. The above simple example is provided to demonstrate how the functions pipeline works. With the ability to write your custom pipeline functions, your custom application services can do what ever your use case demands.</p> <p>There are three primary triggers that have been included in the SDK that initiate the start of the function pipeline. First is the HTTP Trigger via a POST to the endpoint <code>/api/v2/trigger</code> with the EdgeX Event data as the body. Second is the EdgeX MessageBus Trigger with connection details as specified in the configuration and the third it the External MQTT Trigger with connection details as specified in the configuration. See the Triggers section for full list of available <code>Triggers</code></p> <p>Finally, data may be sent back to the Trigger response by calling <code>.SetResponseData()</code> on the context. If the trigger is HTTP, then it will be an HTTP Response. If the trigger is EdgeX MessageBus, then it will be published to the configured host and publish topic. If the trigger is External MQTT, then it will be published to the configured publish topic.</p>"},{"location":"microservices/application/BuiltIn/","title":"Built-In Pipeline Functions","text":"<p>All pipeline functions define a type and a factory function which is used to initialize an instance of the type with the  required options. The instances returned by these factory functions give access to their appropriate pipeline function pointers when setting up the function pipeline.</p> <p>Example</p> <pre><code>NewFilterFor([] {\"Device1\", \"Device2\"}).FilterByDeviceName\n</code></pre>"},{"location":"microservices/application/BuiltIn/#batching","title":"Batching","text":"<p>Included in the SDK is an in-memory batch function that will hold on to your data before continuing the pipeline. There are three functions provided for batching each with their own strategy.</p> Factory Method Description NewBatchByTime(timeInterval string) This function returns a <code>BatchConfig</code> instance with time being the strategy that is used for determining when to release the batched data and continue the pipeline. <code>timeInterval</code> is the duration to wait (i.e. <code>10s</code>). The time begins after the first piece of data is received. If no data has been received no data will be sent forward. NewBatchByCount(batchThreshold int) This function returns a <code>BatchConfig</code> instance with count being the strategy that is used for determining when to release the batched data and continue the pipeline. <code>batchThreshold</code> is how many events to hold on to (i.e. <code>25</code>). The count begins after the first piece of data is received and once the threshold is met, the batched data will continue forward and the counter will be reset. NewBatchByTimeAndCount(timeInterval string, batchThreshold int) This function returns a <code>BatchConfig</code> instance with a combination of both time and count being the strategy that is used for determining when to release the batched data and continue the pipeline. Whichever occurs first will trigger the data to continue and be reset. <p>Examples</p> <pre><code>NewBatchByTime(\"10s\").Batch\nNewBatchByCount(10).Batch\nNewBatchByTimeAndCount(\"30s\", 10).Batch\n</code></pre> Property Description IsEventData The <code>IsEventData</code> flag, when true, lets this function know that the data being batched is <code>Events</code> and to un-marshal the data a <code>[]Event</code> prior to returning the batched data. MergeOnSend The <code>MergeOnSend</code> flag, when true, will merge the <code>[][]byte</code> data to a single<code>[]byte</code> prior to sending the data to the next function in the pipeline. <p>Edgex 2.1</p> <p>New for EdgeX 2.1 is the <code>IsEventData</code> flag on the <code>BatchConfig</code> instance. </p> <p>Batch with <code>IsEventData</code> flag set to true.</p> <pre><code>batch := NewBatchByTimeAndCount(\"30s\", 10)\nbatch.IsEventData = true\n...\nbatch.Batch\n</code></pre> <p>Edgex 2.2</p> <p>New for EdgeX 2.2 is the <code>MergeOnSend</code> flag on the <code>BatchConfig</code> instance. </p> <p>Batch with <code>MergeOnSend</code> flag set to true.</p> <pre><code>batch := NewBatchByTimeAndCount(\"30s\", 10)\nbatch.MergeOnSend = true\n...\nbatch.Batch\n</code></pre>"},{"location":"microservices/application/BuiltIn/#batch","title":"Batch","text":"<p><code>Batch</code> - This pipeline function will apply the selected strategy in your pipeline. By default the batched data returned by this function is <code>[][]byte</code>. This is because this function doesn't need to know the type of the individual items batched. It simply marshals the items to JSON if the data isn't already a <code>[]byte</code>.</p> <p>Warning</p> <p>Keep memory usage in mind as you determine the thresholds for both time and count. The larger they are the more memory is required and could lead to performance issue. </p>"},{"location":"microservices/application/BuiltIn/#compression","title":"Compression","text":"<p>There are two compression types included in the SDK that can be added to your pipeline. These transforms return a <code>[]byte</code>.</p> Factory Method Description NewCompression() This factory function returns a <code>Compression</code> instance that is used to access the compression functions."},{"location":"microservices/application/BuiltIn/#gzip","title":"GZIP","text":"<p><code>CompressWithGZIP</code>  - This pipeline function receives either a <code>string</code>,<code>[]byte</code>, or <code>json.Marshaler</code> type, GZIP compresses the data, converts result to base64 encoded string, which is returned as a <code>[]byte</code> to the pipeline.</p> <p>Example</p> <pre><code>NewCompression().CompressWithGZIP\n</code></pre>"},{"location":"microservices/application/BuiltIn/#zlib","title":"ZLIB","text":"<p><code>CompressWithZLIB</code> - This pipeline function receives either a <code>string</code>,<code>[]byte</code>, or <code>json.Marshaler</code> type, ZLIB compresses the data, converts result to base64 encoded string, which is returned as a <code>[]byte</code> to the pipeline.</p> <p>Example</p> <pre><code>NewCompression().CompressWithZLIB\n</code></pre>"},{"location":"microservices/application/BuiltIn/#conversion","title":"Conversion","text":"<p>There are two conversions included in the SDK that can be added to your pipeline. These transforms return a <code>string</code>.</p> Factory Method Description NewConversion() This factory function returns a <code>Conversion</code> instance that is used to access the conversion functions."},{"location":"microservices/application/BuiltIn/#json","title":"JSON","text":"<p><code>TransformToJSON</code> - This pipeline function receives an <code>dtos.Event</code> type and converts it to JSON format and returns the JSON string to the pipeline.</p> <p>Example</p> <pre><code>NewConversion().TransformToJSON\n</code></pre>"},{"location":"microservices/application/BuiltIn/#xml","title":"XML","text":"<p><code>TransformToXML</code>  - This pipeline function receives an <code>dtos.Event</code> type, converts it to XML format and returns the XML string to the pipeline. </p> <p>Example</p> <pre><code>NewConversion().TransformToXML\n</code></pre>"},{"location":"microservices/application/BuiltIn/#core-data","title":"Core Data","text":"<p>There is one Core Data function that enables interactions with the Core Data REST API</p> Factory Method Description NewCoreDataSimpleReading(profileName string, deviceName string, resourceName string, valueType string) This factory function returns a <code>CoreData</code> instance configured to push a <code>Simple</code> reading. The<code>CoreData</code> instance returned  is used to access core data functions. NewCoreDataBinaryReading(profileName string, deviceName string, resourceName string, mediaType string) This factory function returns a <code>CoreData</code> instance configured to push a <code>Binary</code> reading. The <code>CoreData</code> instance returned  is used to access core data functions. NewCoreDataObejctReading(profileName string, deviceName string, resourceName string) This factory function returns a <code>CoreData</code> instance configured to push an <code>Object</code> reading. The <code>CoreData</code> instance returned is used to access core data functions. <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>NewCoreData</code> factory function has been replaced with the <code>NewCoreDataSimpleReading</code> and <code>NewCoreDataBinaryReading</code> functions </p> <p>EdgeX 2.1</p> <p>The <code>NewCoreDataObejctReading</code>factory method is new for EdgeX 2.1</p>"},{"location":"microservices/application/BuiltIn/#push-to-core-data","title":"Push to Core Data","text":"<p><code>PushToCoreData</code> - This pipeline function provides the capability to push a new Event/Reading to Core Data. The data passed into this function from the pipeline is wrapped in an EdgeX Event with the Event and Reading metadata specified from the factory function options. The function returns the new EdgeX Event with ID populated.</p> <p>Example</p> <pre><code>NewCoreDataSimpleReading(\"my-profile\", \"my-device\", \"my-resource\", \"string\").PushToCoreData\n</code></pre>"},{"location":"microservices/application/BuiltIn/#data-protection","title":"Data Protection","text":"<p>There are two transforms included in the SDK that can be added to your pipeline for data protection. </p>"},{"location":"microservices/application/BuiltIn/#encryption-deprecated","title":"Encryption (Deprecated)","text":"<p>EdgeX 2.1</p> <p>This is deprecated in EdgeX 2.1 - it is recommended to use the new <code>AESProtection</code> transform.  Please see this security advisory for more detail.</p> Factory Method Description NewEncryption(key string, initializationVector string) This function returns a <code>Encryption</code> instance initialized with the passed in <code>key</code> and <code>initialization vector</code>. This <code>Encryption</code> instance is used to access the following encryption function that will use the specified <code>key</code> and <code>initialization vector</code>. NewEncryptionWithSecrets(secretPath string, secretName string, initializationVector string) This function returns a <code>Encryption</code> instance initialized with the passed in <code>secret path</code>, <code>Secret name</code> and <code>initialization vector</code>. This <code>Encryption</code> instance is used to access the following encryption function that will use the encryption key from the Secret Store and the passed in <code>initialization vector</code>. It uses the passed in<code>secret path</code> and <code>secret name</code> to pull the encryption key from the Secret Store <p>EdgeX 2.0</p> <p>New for EdgeX 2.0 is the ability to pull the encryption key from the Secret Store. The encryption key must be seeded into the Secret Store using the <code>/api/v2/secret</code> endpoint on the running instance of the Application Service prior to the Encryption function executing. See App Functions SDK swagger for more details on this endpoint.</p> <p><code>EncryptWithAES</code> - This pipeline function receives either a <code>string</code>, <code>[]byte</code>, or <code>json.Marshaller</code> type and encrypts it using AES encryption and returns a <code>[]byte</code> to the pipeline.</p> <p>Example</p> <pre><code>NewEncryption(\"key\", \"initializationVector\").EncryptWithAES\nor\nNewEncryptionWithSecrets(\"aes\", \"aes-key\", \"initializationVector\").EncryptWithAES)\n</code></pre> <p>Note</p> <p>The <code>algorithm</code> used used with app-service-configurable configuration to access this transform is <code>AES</code> </p>"},{"location":"microservices/application/BuiltIn/#aesprotection","title":"AESProtection","text":"<p>Edgex 2.1</p> <p>This transform provides AES 256 encryption with a random initialization vector and authentication using a SHA 512 hash.  It can only be configured using secrets.</p> Factory Method Description NewAESProtection(secretPath string, secretName string) This function returns a <code>Encryption</code> instance initialized with the passed in <code>secretPath</code> and <code>secretName</code> <p>It requires a 64-byte key from secrets which is split in half, the first half used for encryption, the second for generating the signature.</p> <p><code>Encrypt</code>: This pipeline function receives either a <code>string</code>, <code>[]byte</code>, or <code>json.Marshaller</code> type and encrypts it using AES256 encryption, signs it with a SHA512 hash and returns a <code>[]byte</code> to the pipeline of the following form:</p> initialization vector ciphertext signing hash 16 bytes variable bytes 32 bytes <p>Example</p> <pre><code>    transforms.NewAESProtection(secretPath, secretName).Encrypt(ctx, data)\n</code></pre> <p>Note</p> <p>The <code>Algorithm</code> used with app-service-configurable configuration to access this transform is <code>AES256</code></p>"},{"location":"microservices/application/BuiltIn/#export","title":"Export","text":"<p>There are two export functions included in the SDK that can be added to your pipeline. </p>"},{"location":"microservices/application/BuiltIn/#http-export","title":"HTTP Export","text":"<p>EdgeX 2.0</p> <p>For EdgeX 2.0 the signature of the <code>NewHTTPSenderWithSecretHeader</code> factory function has changed. See below for details.</p> Factory Method Description NewHTTPSender(url string, mimeType string, persistOnError bool) This factory function returns a <code>HTTPSender</code> instance initialized with the passed in url, mime type and persistOnError values. NewHTTPSenderWithSecretHeader(url string, mimeType string, persistOnError bool, headerName string, secretPath string, secretName string) This factory function returns a <code>HTTPSender</code> instance similar to the above function however will set up the <code>HTTPSender</code> to add a header  to the HTTP request using the <code>headerName</code> for the field name and the <code>secretPath</code> and <code>secretName</code> to pull the header field value from the Secret Store. NewHTTPSenderWithOptions(options HTTPSenderOptions) This factory function returns a <code>HTTPSender</code>using the passed in <code>options</code> to configure it. <p>EdgeX 2.0</p> <p>New in EdgeX 2.0 is the ability to chain multiple instances of the HTTP exports to accomplish exporting to multiple destinations. The new <code>NewHTTPSenderWithOptions</code> factory function was added to allow for configuring all the options, including the new <code>ContinueOnSendError</code> and <code>ReturnInputData</code> options that enable this chaining. </p> <pre><code>// HTTPSenderOptions contains all options available to the sender\ntype HTTPSenderOptions struct {\n// URL of destination\nURL string\n// MimeType to send to destination\nMimeType string\n// PersistOnError enables use of store &amp; forward loop if true\nPersistOnError bool\n// HTTPHeaderName to use for passing configured secret\nHTTPHeaderName string\n// SecretPath to search for configured secret\nSecretPath string\n// SecretName for configured secret\nSecretName string\n// URLFormatter specifies custom formatting behavior to be applied to configured URL.\n// If nothing specified, default behavior is to attempt to replace placeholders in the\n// form '{some-context-key}' with the values found in the context storage.\nURLFormatter StringValuesFormatter\n// ContinueOnSendError allows execution of subsequent chained senders after errors if true\nContinueOnSendError bool\n// ReturnInputData enables chaining multiple HTTP senders if true\nReturnInputData bool\n}\n</code></pre>"},{"location":"microservices/application/BuiltIn/#http-post","title":"HTTP POST","text":"<p><code>HTTPPost</code> - This pipeline function receives either a <code>string</code>, <code>[]byte</code>, or <code>json.Marshaler</code> type from the previous function in the pipeline and posts it to the configured endpoint and returns the HTTP response. If no previous function exists, then the event that triggered the pipeline, marshaled to json, will be used. If the post fails and <code>persistOnError=true</code> and <code>Store and Forward</code> is enabled, the data will be stored for later retry. See Store and Forward for more details. If <code>ReturnInputData=true</code>  the function will return the data that it received instead of the HTTP response. This allows the following function in the pipeline to be another HTTP Export which receives the same data but is configured to send to a different endpoint. When chaining for multiple HTTP Exports you need to decide how to handle errors. Do you want to stop execution of the pipeline or continue so that the next HTTP Export function can attempt to export to its endpoint. This is where <code>ContinueOnSendError</code> comes in. If set to <code>true</code> the error is logged and the function returns the received data for the next function to use. <code>ContinueOnSendError=true</code> can only be used when <code>ReturnInputData=true</code> and cannot be use when <code>PersistOnError=true</code>.</p> <p>Example</p> <p>POST  NewHTTPSender(\"https://myendpoint.com\",\"application/json\",false).HTTPPost </p> <p>PUT  NewHTTPSender(\"https://myendpoint.com\",\"application/json\",false).HTTPPut </p> <p>POST with secure header NewHTTPSenderWithSecretHeader(\"https://myendpoint.com\",\"application/json\",false,\"Authentication\",\"/jwt\",\"AuthToken\").HTTPPost </p> <p> PUT with secure header NewHTTPSenderWithSecretHeader(\"https://myendpoint.com\",\"application/json\",false,\"Authentication\",\"/jwt\",\"AuthToken\").HTTPPPut </p>"},{"location":"microservices/application/BuiltIn/#http-put","title":"HTTP PUT","text":"<p><code>HTTPPut</code> - This pipeline function operates the same as <code>HTTPPost</code> but uses the <code>PUT</code> method rather than <code>POST</code>. </p>"},{"location":"microservices/application/BuiltIn/#url-formatting","title":"URL Formatting","text":"<p>EdgeX 2.0</p> <p>URL Formatting is new in EdgeX 2.0</p> <p>The configured URL is dynamically formatted prior to the POST/PUT request. The default formatter (used if <code>URLFormatter</code> is nil) simply replaces any placeholder text, <code>{key-name}</code>, in the configured URL with matching values from the new <code>Context Storage</code>. An error will occur if a specified placeholder does not exist in the <code>Context Storage</code>. See the Context Storage documentation for more details on seeded values and storing your own values.</p> <p>The <code>URLFormatter</code> option allows you to override the default formatter with your own custom URL formatting scheme.</p> <p>Example</p> <p>Export the Events to  different endpoints base on their device name             <code>Url=\"http://myhost.com/edgex-events/{devicename}\"</code> </p>"},{"location":"microservices/application/BuiltIn/#mqtt-export","title":"MQTT Export","text":"<p>EdgeX 2.0</p> <p>New for EdgeX 2.0 is the the new <code>NewMQTTSecretSenderWithTopicFormatter</code> factory function. The deprecated <code>NewMQTTSender</code> factory function has been removed.</p> Factory Method Description NewMQTTSecretSender(mqttConfig MQTTSecretConfig, persistOnError bool) This factory function returns a <code>MQTTSecretSender</code> instance initialized with the options specified in the <code>MQTTSecretConfig</code> and <code>persistOnError</code>. NewMQTTSecretSenderWithTopicFormatter(mqttConfig MQTTSecretConfig, persistOnError bool, topicFormatter StringValuesFormatter) This factory function returns a <code>MQTTSecretSender</code> instance initialized with the options specified in the <code>MQTTSecretConfig</code>, <code>persistOnError</code> and <code>topicFormatter</code>. See Topic Formatting below for more details. <p>EdgeX 2.0</p> <p>New in EdgeX 2.0 the <code>KeepAlive</code> and <code>ConnectTimeout</code> MQTTSecretConfig settings have been added.</p> <pre><code>  type MQTTSecretConfig struct {\n// BrokerAddress should be set to the complete broker address i.e. mqtts://mosquitto:8883/mybroker\nBrokerAddress string\n// ClientId to connect with the broker with.\nClientId string\n// The name of the path in secret provider to retrieve your secrets\nSecretPath string\n// AutoReconnect indicated whether or not to retry connection if disconnected\nAutoReconnect bool\n// KeepAlive is the interval duration between client sending keepalive ping to broker\nKeepAlive string\n// ConnectTimeout is the duration for timing out on connecting to the broker\nConnectTimeout string\n// Topic that you wish to publish to\nTopic string\n// QoS for MQTT Connection\nQoS byte\n// Retain setting for MQTT Connection\nRetain bool\n// SkipCertVerify\nSkipCertVerify bool\n// AuthMode indicates what to use when connecting to the broker. \n// Options are \"none\", \"cacert\" , \"usernamepassword\", \"clientcert\".\n// If a CA Cert exists in the SecretPath then it will be used for \n// all modes except \"none\". \nAuthMode string\n}\n</code></pre> <p>Secrets in the Secret Store may be located at any path however they must have some or all the follow keys at the specified <code>SecretPath</code>. </p> <ul> <li><code>username</code> - username to connect to the broker</li> <li><code>password</code> - password used to connect to the broker</li> <li><code>clientkey</code>- client private key in PEM format</li> <li><code>clientcert</code> - client cert in PEM format</li> <li><code>cacert</code> - ca cert in PEM format</li> </ul> <p>The <code>AuthMode</code> setting you choose depends on what secret values above are used. For example, if \"none\" is specified as auth mode all keys will be ignored. Similarly, if <code>AuthMode</code> is set to \"clientcert\" username and password will be ignored.</p>"},{"location":"microservices/application/BuiltIn/#topic-formatting","title":"Topic Formatting","text":"<p>EdgeX 2.0</p> <p>Topic Formatting is new in EdgeX 2.0</p> <p>The configured Topic is dynamically formatted prior to publishing . The default formatter (used if <code>topicFormatter</code> is nil) simply replaces any placeholder text, <code>{key-name}</code>, in the configured <code>Topic</code> with matching values from the new <code>Context Storage</code>. An error will occur if a specified placeholder does not exist in the <code>Context Storage</code>. See the Context Storage documentation for more details on seeded values and storing your own values.</p> <p>The <code>topicFormatter</code> option allows you to override the default formatter with your own custom topic formatting scheme.</p>"},{"location":"microservices/application/BuiltIn/#filtering","title":"Filtering","text":"<p>There are four basic types of filtering included in the SDK to add to your pipeline. There is also an option to <code>Filter Out</code> specific items. These provided filter functions return a type of <code>dtos.Event</code>. If filtering results in no remaining data, the pipeline execution for that pass is terminated. If no values are provided for filtering, then data flows through unfiltered.</p> Factory Method Description NewFilterFor([]string filterValues) This factory function returns a <code>Filter</code> instance initialized with the passed in filter values with <code>FilterOut</code> set to <code>false</code>. This <code>Filter</code> instance is used to access the following filter functions that will operate using the specified filter values. NewFilterOut([]string filterValues) This factory function returns a <code>Filter</code> instance initialized with the passed in filter values with <code>FilterOut</code> set to <code>true</code>. This <code>Filter</code> instance is used to access the following filter functions that will operate using the specified filter values. <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>NewFilter</code> factory function has been renamed to <code>NewFilterFor</code> and the new <code>NewFilterOut</code> factory function has been added.</p> <pre><code>type Filter struct {\n// Holds the values to be filtered\nFilterValues []string\n// Determines if items in FilterValues should be filtered out. If set to true all items found in the filter will be removed. If set to false all items found in the filter will be returned. If FilterValues is empty then all items will be returned.\nFilterOut    bool\n}\n</code></pre> <p>EdgeX 2.0</p> <p>New for EdgeX 2.0 are the <code>FilterByProfileName</code> and <code>FilterBySourceName</code> pipeline functions. The <code>FilterByValueDescriptor</code> pipeline function has been renamed to <code>FilterByResourceName</code></p>"},{"location":"microservices/application/BuiltIn/#by-profile-name","title":"By Profile Name","text":"<p><code>FilterByProfileName</code> - This pipeline function will filter the event data down to Events that either have (For) or don't have (Out) the specified profiles names.  </p> <p>Example</p> <pre><code>NewFilterFor([] {\"Profile1\", \"Profile2\"}).FilterByProfileName\n</code></pre>"},{"location":"microservices/application/BuiltIn/#by-device-name","title":"By Device Name","text":"<p><code>FilterByDeviceName</code> - This pipeline function will filter the event data down to Events that either have (For) or don't have (Out) the specified device names.  </p> <p>Example</p> <pre><code>NewFilterFor([] {\"Device1\", \"Device2\"}).FilterByDeviceName\n</code></pre>"},{"location":"microservices/application/BuiltIn/#by-source-name","title":"By Source Name","text":"<p><code>FilterBySourceName</code> - This pipeline function will filter the event data down to Events that either have (For) or don't have (Out) the specified source names.  Source name is either the <code>resource name</code> or <code>command name</code> responsible for the Event creation.</p> <p>Example</p> <pre><code>NewFilterFor([] {\"Source1\", \"Source2\"}).FilterBySourceName\n</code></pre>"},{"location":"microservices/application/BuiltIn/#by-resource-name","title":"By Resource Name","text":"<p><code>FilterByResourceName</code> - This pipeline function will filter the Event's reading data down to Readings that either have (For) or don't have (Out) the specified resource names.  If the result of filtering is zero Readings remaining, the function terminates pipeline execution.</p> <p>Example</p> <pre><code>NewFilterFor([] {\"Resource1\", \"Resource2\"}).FilterByResourceName\n</code></pre>"},{"location":"microservices/application/BuiltIn/#json-logic","title":"JSON Logic","text":"Factory Method Description NewJSONLogic(rule string) This factory function returns a <code>JSONLogic</code> instance initialized with the passed in JSON rule. The rule passed in should be a JSON string conforming to the specification here: http://jsonlogic.com/operations.html."},{"location":"microservices/application/BuiltIn/#evaluate","title":"Evaluate","text":"<p><code>Evaluate</code> - This is the pipeline function that will be used in the pipeline to apply the JSON rule to data coming in on the pipeline. If the condition of your rule is met, then the pipeline will continue and the data will continue to flow to the next function in the pipeline. If the condition of your rule is NOT met, then pipeline execution stops. </p> <p>Example</p> <pre><code>NewJSONLogic(\"{ \\\"in\\\" : [{ \\\"var\\\" : \\\"device\\\" }, \n              [\\\"Random-Integer-Device\\\",\\\"Random-Float-Device\\\"] ] }\").Evaluate\n</code></pre> <p>Note</p> <p>Only  operations that return true or false are supported. See http://jsonlogic.com/operations.html# for the complete list of operations paying attention to return values. Any operator that returns manipulated data is currently not supported. For more advanced scenarios checkout LF Edge eKuiper.</p> <p>Tip</p> <p>Leverage http://jsonlogic.com/play.html to get your rule right before implementing in code. JSON can be a bit tricky to get right in code with all the escaped double quotes.</p>"},{"location":"microservices/application/BuiltIn/#response-data","title":"Response Data","text":"<p>There is one response data function included in the SDK that can be added to your pipeline. </p> Factory Method Description NewResponseData() This factory function returns a <code>ResponseData</code> instance that is used to access the following pipeline function below."},{"location":"microservices/application/BuiltIn/#content-type","title":"Content Type","text":"<p><code>ResponseContentType</code> - This property is used to set the content-type of the response.</p> <p>Example</p> <pre><code>responseData := NewResponseData()\nresponseData.ResponseContentType = \"application/json\"\n</code></pre>"},{"location":"microservices/application/BuiltIn/#set-response-data","title":"Set Response Data","text":"<p><code>SetResponseData</code> - This pipeline function receives either a <code>string</code>,<code>[]byte</code>, or <code>json.Marshaler</code> type from the previous function in the pipeline and sets it as the response data that the pipeline returns to the configured trigger. If configured to use the<code>EdgeXMessageBus</code>trigger, the data will be published back to the EdgeX MessageBus as determined by the configuration. Similar, if  configured to use the<code>ExternalMQTT</code> trigger, the data will be published back to the external MQTT Broker as determined by the configuration. If configured to use <code>HTTP</code> trigger the data is returned as the HTTP response. </p> <p>Note</p> <p>Calling <code>SetResponseData()</code> and <code>SetResponseContentType()</code> from the Context API in a custom function can be used in place of adding this function to your pipeline.</p>"},{"location":"microservices/application/BuiltIn/#tags","title":"Tags","text":"<p>There is one Tags transform included in the SDK that can be added to your pipeline. </p> Factory Method Description NewGenericTags(tags <code>map[string]interface{}</code>) Tags This factory function returns a <code>Tags</code> instance initialized with the passed in collection of generic tag key/value pairs. This <code>Tags</code> instance is used to access the following Tags function that will use the specified collection of tag key/value pairs. This allows for generic complex types for the Tag values. NewTags(tags <code>map[string]string</code>) Tags This factory function returns a <code>Tags</code> instance initialized with the passed in collection of tag key/value pairs. This <code>Tags</code> instance is used to access the following Tags function that will use the specified collection of tag key/value pairs. This factor function has been Deprecated. Use <code>NewGenericTags</code> instead. <p>EdgeX 2.1</p> <p>The Tags property on Events in Edgex 2.1 has changed from <code>map[string]string</code> to <code>map[string]interface{}</code>. The new NewGenericTags() factory function takes this new definition and replaces the deprecated NewTags() factory function. </p>"},{"location":"microservices/application/BuiltIn/#add-tags","title":"Add Tags","text":"<p><code>AddTags</code> - This pipeline function receives an Edgex <code>Event</code> type and adds the collection of specified tags to the Event's <code>Tags</code> collection.</p> <p>Example</p> <pre><code>var myTags = map[string]interface{}{\n\"MyValue\" : 123,\n\"GatewayId\": \"HoustonStore000123\",\n\"Coordinates\": map[string]float32 {\n\"Latitude\": 29.630771,\n\"Longitude\": \"-95.377603\",\n},\n}\n\nNewGenericTags(myTags).AddTags\n</code></pre>"},{"location":"microservices/application/BuiltIn/#metricsprocessor","title":"MetricsProcessor","text":"<p>EdgeX 2.2</p> <p>The <code>MetricsProcessor</code> is new in EdgeX 2.2</p> <p>Note</p> <p>Service metrics are Beta released for EdgeX 2.2. Breaking changes, while not likely, may occur as more use of service metrics are added.</p> <p><code>MetricsProcessor</code> contains configuration and functions for processing the new <code>dtos.Metrics</code> type. </p> Factory Method Description NewMetricsProcessor(additionalTags map[string]interface{}) (*MetricsProcessor, error) This factory function returns a <code>`MetricsProcessor</code> instance initialized with the passed in collection of <code>additionalTags</code> (name/value pairs). This <code>MetricsProcessor</code> instance is used to access the following functions that will process a dtos.Metric instance. The <code>additionalTags</code> are added as metric tags to the processed data. An error will be returned if any of the <code>additionalTags</code> have an invalid name. Currently must be non-blank."},{"location":"microservices/application/BuiltIn/#tolineprotocol","title":"ToLineProtocol","text":"<p><code>ToLineProtocol</code> - This pipeline function will transform the received <code>dtos.Metric</code> to a <code>Line Protocol</code> formatted string. See https://docs.influxdata.com/influxdb/v2.0/reference/syntax/line-protocol/ for details on the <code>Line Protocol</code> syntax.</p> <p>Note</p> <p>When <code>ToLineProtocol</code> is the first function in the functions pipeline, the <code>TargetType</code> for the service must be set to <code>&amp;dtos.Metric{}</code>. See Target Type section for details on setting the service's <code>TargetType</code>. The Trigger configuration must also be set so  <code>SubscribeTopics=\"edgex/telemetry/#\"</code> in order to receive the <code>dtos.Metric</code> data from other services. See the new App Service Configurable <code>metrics-influxdb</code> profile for an example.    </p> <p>Example</p> <pre><code>mp, err := NewMetricsProcessor(map[string]string{\"MyTag\":\"MyTagValue\"})\nif err != nil {\n... handle error\n}\n...\nmp.ToLineProtocol\n</code></pre> <p>Warning</p> <p>Any service using the <code>MetricsProcessor</code> needs to disable its own Telemetry reporting to avoid circular data generation from processing. To do this set the services<code>Writeable.Telemetry</code> configuration to: <pre><code>[Writable.Telemetry]\nInterval = \"0s\" # Don't report any metrics as that would be cyclic processing.\n</code></pre></p>"},{"location":"microservices/application/ErrorHandling/","title":"Pipeline Function Error Handling","text":"<p>Each transform returns a <code>true</code> or <code>false</code> as part of the return signature. This is called the <code>continuePipeline</code> flag and indicates whether the SDK should continue calling successive transforms in the pipeline.</p> <ul> <li><code>return false, nil</code> will stop the pipeline and stop processing the event. This is useful, for example, when filtering on values and nothing matches the criteria you've filtered on. </li> <li><code>return false, error</code>, will stop the pipeline as well and the SDK will log the error you have returned.</li> <li><code>return true, nil</code> tells the SDK to continue, and will call the next function in the pipeline with your result.</li> </ul> <p>The SDK will return control back to main when receiving a SIGTERM/SIGINT event to allow for custom clean up.</p>"},{"location":"microservices/application/GeneralAppServiceConfig/","title":"Application Service Configuration","text":"<p>Similar to other EdgeX services, configuration is first determined by the <code>configuration.toml</code> file in the <code>/res</code> folder. Once loaded any environment overrides are applied. If <code>-cp</code> is passed to the application on startup, the SDK will leverage the specific configuration provider (i.e Consul) to push the configuration into the provider and monitor <code>Writeable</code> configuration from there. You will find the configuration under the <code>edgex/appservices/2.0/</code> key in the provider (i.e Consul). On re-restart the service will pull the configuration from the provider and apply any environment overrides.</p> <p>This section describes the configuration elements that are unique to Application Services</p> <p>Please first refer to the general Configuration documentation for configuration properties common across all EdgeX services.</p> <p>Note</p> <p><code>*</code>indicates the configuration value can be changed on the fly if using a configuration provider (like Consul). <code>**</code>indicates the configuration value can be changed but the service must be restarted.</p>"},{"location":"microservices/application/GeneralAppServiceConfig/#writable","title":"Writable","text":"<p>The tabs below provide additional entries in the Writable section which are applicable to Application Services.</p> Writable.StoreAndForwardWritable.PipelineWritable.InsecureSecretsWritable.Telemetry <p>The section configures the Store and Forward capability. Please refer to Store and Forward documentation for more details.</p> Configuration Default Value Enabled false* Indicates whether the Store and Forward capability enabled or disabled RetryInterval \"5m\"* Indicates the duration of time to wait before retries, aka Forward MaxRetryCount 10* Indicates whether maximum number of retries of failed data. The failed data is removed after the maximum retries has been exceeded. A value of <code>0</code> indicates endless retries. <p>The section configures the Configurable Function Pipeline which is used only by App Service Configurable. Please refer to App Service Configurable - Getting Started section for more details</p> <p>This section defines Insecure Secrets that are used when running in non-secure mode, i.e. when Vault isn't available. This is a dynamic map of configuration, so can empty if no secrets are used or can have as many or few user define secrets. It simulates a Secret Store in non-secure mode. Below are a few examples that are need if using the indicated capabilities.</p> Configuration Default Value Description DB --- This section defines a block of insecure secrets for database credentials when Redis is used for the MessageBus and/or when Store and Forward is enabled and running is non-secure mode. This section is not required if Store and Forward is not enabled and not using Redis for the MessageBus . path redisdb* Indicates the location in the simulated Secret Store where the DB secret resides. DB Secrets --- This section is the collection of DB secret data username blank* Indicates the value for the <code>username</code> when connecting to the database. When running in non-secure mode it is <code>blank</code>. password blank* Indicates the value for the <code>password</code> when connecting to the database. When running in non-secure mode it is <code>blank</code>. http --- This section defines a block of insecure secrets for HTTP Export, i.e <code>HTTPPost</code> function path http* Indicates the location in the simulated Secret Store where the HTTP secret resides. http Secrets --- This section is the collection of HTTP secret data.  See Http Export documentation for more details on use of secret data. headervalue undefined* This indicates the name of the secret value to use as the value in the HTTP header. mqtt --- This section defines a block of insecure secrets for MQTT export, i.e. <code>MQTTSecretSend</code> function. path mqtt* Indicates the location in the simulated Secret Store where the MQTT secret reside. mqtt Secrets --- This section is the collection of MQTT secret data. See Mqtt Export documentation for more details on use of secret data. username blank* Indicates the value for the <code>username</code> when connecting to the MQTT broker using <code>usernamepassword</code> authentication mode. Must be configured to the value the MQTT broker is expecting. password blank* Indicates the value for the <code>password</code> when connecting to the MQTT broker using <code>usernamepassword</code> authentication mode. Must be configured to the value the MQTT broker is expecting. cacert blank* Indicates the value (contents) for the <code>CA Certificate</code> when connecting to the MQTT broker using <code>cacert</code> authentication mode. Must be configured to the value the MQTT broker is expecting. clientcert blank* Indicates the value (contents) for the <code>Client Certificate</code> when connecting to the MQTT broker using <code>clientcert</code> authentication mode. Must be configured to the value the MQTT broker is expecting. clientkey blank* Indicates the value (contents) for the <code>Client Key</code> when connecting to the MQTT broker using <code>clientcert</code> authentication mode. Must be configured to the value the MQTT broker is expecting. Property Default Value Description See <code>Writable.Telemetry</code> at Common Configuration for the Telemetry configuration common to all services Metrics Service metrics that the application service collects. Boolean value indicates if reporting of the metric is enabled. Custom metrics are also included here for custom application services that define custom metrics <code>MessagesReceived</code> = false Enable/disable reporting of the built-in MessagesReceived metric <code>PipelineMessagesProcessed</code> = false Enable/disable reporting of the built-in PipelineMessagesProcessed metrics <code>PipelineMessageProcessingTime</code> = false Enable/disable reporting of the built-in PipelineMessageProcessingTime metrics <code>&lt;CustomMetric&gt;</code> = false Enable/disable reporting of custome application service's custom metric Tags <code>&lt;empty&gt;</code> List of arbitrary service level tags to included with every metric that is reported. i.e. <code>Gateway=\"my-iot-gateway\"</code> <p>Edgex 2.2</p> <p>New for EdgeX 2.2 All application services have a limited set of built-in service metrics and custom application services can define, collect and report their own custome service metrics. See Built-in Application Service Metrics and Custom Application Service section for more detials</p>"},{"location":"microservices/application/GeneralAppServiceConfig/#not-writable","title":"Not Writable","text":"<p>The tabs below provide additional configuration which are applicable to Application Services that require the service to be restarted after value(s) are changed.</p> HttpServerDatabaseClientsTriggerTrigger EdgeXMessageBusTrigger ExternalMqtt <p>EdgeX 2.0</p> <p>New for EdgeX 2.0. These setting previously were in the <code>Service</code> configuration section specific to Application Services. Now the <code>Service</code> configuration is the same for all EdgeX services. See the general Configuration documentation for more details on the common <code>Service</code> configuration.</p> <p>This section contains the configuration for the internal Webserver. Only need if configuring the Webserver for <code>HTTPS</code></p> Configuration Default Value Description Protocol http** Indicates the protocol for the webserver to use SecretName blank** Indicates the name of the secret in the Secret Store where the HTTPS secret data resides HTTPSCertName blank** Indicates the key name in the HTTPS secret data that contains the <code>certificate data</code> to use for HTTPS HTTPSKeyName blank** Indicates the key name in the HTTPS secret data that contains the <code>key data</code> to use for HTTPS <p>This section contains the connection information. It is required when using <code>redis</code> for the MessageBus (which is the default) and/or when the Store and Forward capability is enabled. Note that it has a slightly different format than the database section used in the core services configuration.</p> Configuration Default Value Description Type redisdb** Indicates the type of database used. <code>redisdb</code> is the only valid type. Host localhost** Indicates the hostname for the database Port 6379** Indicates the port number for the database Timeout \"30s\"** Indicates the connection timeout for the database <p>This section defines the connect information for the EdgeX Clients and is the same as that used by all EdgeX services, just which clients are needed differs. Please refer to the Note about Clients section for more details.</p> <p>This section defines the <code>Trigger</code> for incoming data. See the Triggers documentation for more details on the inner working of triggers. </p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>Binding</code> section has been renamed to <code>Trigger</code> .  </p> Configuration Default Value Description Type edgex-messagebus** Indicates the <code>Trigger</code> binding type. valid values are <code>edgex-messagebus</code>, <code>external-mqtt</code>, <code>http</code>, or <code>&lt;custom&gt;</code> <p>This section defines the message bus connect information. Only used for <code>edgex-messagebus</code> binding type</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>MessageBus</code> section has been renamed to <code>EdgexMessageBus</code> and moved under the <code>Trigger</code> section. The <code>SubscribeTopic</code> setting has changed to <code>SubscribeTopics</code> and moved under the <code>SubscribeHost</code> section of <code>EdgexMessageBus</code> . The <code>PublishTopic</code> has been moved under the <code>PublishHost</code> section of <code>EdgexMessageBus</code>.</p> Configuration Default Value Description Type redis** Indicates the type of MessageBus being used. Valid type are <code>redis</code>, <code>mqtt</code>,  or<code>zero</code> SubscribeHost ... This section defines the connection information for subscribing/publishing to the MessageBus Host localhost** Indicates the hostname for subscribing to the MessageBus Port 6379** Indicates the port number for subscribing to the MessageBus Protocol redis** Indicates the protocol number for subscribing to the MessageBus SubscribeTopics edgex/events/#** MessageBus topic(s) to subscribe to. This is a comma separated list of topics. Supports filtering by subscribe topics. See EdgeXMessageBus Trigger for more details. PublishHost ... This section defines the connection information for publishing to the MessageBus Host localhost** Indicates the hostname for publishing to the Message Bus Port 6379** Indicates the port number for publishing to the Message Bus Protocol redis** Indicates the protocol number for publishing to the Message Bus PublishTopic blank** Indicates the topic in which to publish the function pipeline response data, if any. Supports dynamic topic places holders. See EdgeXMessageBus Trigger for more details. Optional ... This section is used for optional configuration specific to the MessageBus type used. Please refer to go-mod-messaging for more details <p>This section defines the external MQTT Broker connect information. Only used for <code>external-mqtt</code> trigger binding type</p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the <code>MqttBroker</code> section has been renamed to <code>ExternalMqtt</code> and moved under the <code>Trigger</code> section. The <code>ExternalMqtt</code> section now has it's own <code>SubscribeTopics</code> and  <code>PublishTopic</code> settings. </p> <p>Note</p> <p><code>external-mqtt</code> is not the default Trigger type, so there are no default values for <code>ExternalMqtt</code> settings beyond those that the Go compiler gives to the empty struct. Some of those default values are not valid and must be specified, i.e. <code>Authmode</code></p> Configuration Default Value Description Url blank** Fully qualified URL to connect to the MQTT broker, i.e. <code>tcp://localhost:1883</code> SubscribeTopics blank** MQTT topic(s) to subscribe to. This is a comma separated list of topics PublishTopic blank** MQTT topic to publish the function pipeline response data, if any. Supports dynamic topic places holders. See ExternalMqtt Trigger for more details. ClientId blank** ClientId to connect to the broker with ConnectTimeout blank** Time duration indicating how long to wait before timing out                                                        broker connection, i.e \"30s\" AutoReconnect false** Indicates whether or not to retry connection if disconnected KeepAlive 0** Seconds between client ping when no active data flowing to avoid client being disconnected. Must be greater then 2 QOS 0** Quality of Service 0 (At most once), 1 (At least once) or 2 (Exactly once) Retain false** Retain setting for MQTT Connection SkipCertVerify false** Indicates if the certificate verification should be skipped SecretPath blank** Name of the path in secret provider to retrieve your secrets. Must be non-blank. AuthMode blank** Indicates what to use when connecting to the broker. Must be one of \"none\", \"cacert\" , \"usernamepassword\", \"clientcert\". If a CA Cert exists in the SecretPath then it will be used for all modes except \"none\". RetryDuration 600 Indicates how long (in seconds) to wait timing out on the MQTT client creation RetryInterval 5 Indicates the time (in seconds) that will be waited between attempts to create MQTT client <p>Note<p><code>Authmode=cacert</code> is only needed when client authentication (e.g. <code>usernamepassword</code>) is not required, but a CA Cert is needed to validate the broker's SSL/TLS cert.</p> </p> Application SettingsCustom Structured Configuration <p><code>[ApplicationSettings]</code> - Is used for custom application settings and is accessed via the ApplicationSettings() API. The ApplicationSettings API returns a <code>map[string] string</code> containing the contents on the ApplicationSetting section of the <code>configuration.toml</code> file.</p> <pre><code>[ApplicationSettings]\nApplicationName = \"My Application Service\"\n</code></pre> <p>EdgeX 2.0</p> <p>New for EdgeX 2.0</p> <p>Custom Application Services can now define their own custom structured configuration section in the <code>configuration.toml</code> file. Any additional sections in the TOML are ignore by the SDK when it parses the file for the SDK defined sections. See the Custom Configuration section of the SDK documentation for more details.</p>"},{"location":"microservices/application/GettingStarted/","title":"Getting Started with Application Services","text":""},{"location":"microservices/application/GettingStarted/#types-of-application-services","title":"Types of Application Services","text":"<p>There are two flavors of Applications Service which are <code>configurable</code> and <code>custom</code>. This section will describe how and when each flavor should be used.</p>"},{"location":"microservices/application/GettingStarted/#configurable","title":"Configurable","text":"<p>The <code>App Functions SDK</code> has a full suite of built-in features that are accessible via configuration when using the <code>App Service Configurable</code> service. This service is built using the <code>App Functions SDK</code> and uses  configuration profiles to define separate distinct instances of the service. The service comes with a few built in profiles for common use cases, but custom profiles can also be used. If your use case needs can be meet with the built-in functionality then the <code>App Service Configurable</code> service is right for you. See the App Service Configurable section for more details.</p>"},{"location":"microservices/application/GettingStarted/#custom","title":"Custom","text":"<p>Custom Application Services are needed when use case needs can not be meet with just the built-in functionality. This is when you must develop you own custom Application Service use the <code>App Functions SDK</code>. Typically this is triggered by the use case needing an custom <code>Pipeline Function</code> . See the App Functions SDK section for all the details on the features you custom Application Service can take advantage of.</p>"},{"location":"microservices/application/GettingStarted/#template","title":"Template","text":"<p>To help accelerate the creation of your custom Application Service the <code>App Functions SDK</code> contains a template for new custom Application Services. This template has TODO's in the code and a README that walk you through the creation of your new custom Application Service. See the template README for more details.</p>"},{"location":"microservices/application/GettingStarted/#triggers","title":"Triggers","text":"<p><code>Triggers</code> are common to both <code>Configurable</code> and <code>Custom</code> Application Services. The are the next logical area to get familiar with. See the Triggers section for more details.</p>"},{"location":"microservices/application/GettingStarted/#configuration","title":"Configuration","text":"<p>Finally service configuration is very important to understand for both <code>Configurable</code> and <code>Custom</code> Application Services. The service configuration documentation is broken into two parts. First is the configuration that is common to all EdgeX services and the second is the configuration that is specific to Application Services. See the Common Configuration and Application Service Configuration sections for more details.</p>"},{"location":"microservices/application/Triggers/","title":"Application Service Triggers","text":""},{"location":"microservices/application/Triggers/#introduction","title":"Introduction","text":"<p>Triggers determine how the App Functions Pipeline begins execution. The trigger is determined by the <code>[Trigger]</code> configuration section in the  <code>configuration.toml</code> file.   </p> <p>Edgex 2.0</p> <p>For Edgex 2.0 the <code>[Binding]</code> configuration section has been renamed to <code>[Trigger]</code>. The  <code>[MessageBus]</code> section has been renamed to <code>EdgexMessageBus</code> and moved under the <code>[Trigger]</code> section. The <code>[MqttBroker]</code> section has been renamed to <code>ExternalMqtt</code> and moved under the <code>[Trigger]</code> section.</p> <p>There are 4 types of <code>Triggers</code> supported in the App Functions SDK which are discussed in this document</p> <ol> <li>EdgeX Message Bus - Default Trigger for most use cases as this is how the App Services receive Events from EdgeX Core Data and/or Devices Services</li> <li>External MQTT - Useful when receiving commands from an external/Cloud MQTT broker.</li> <li>HTTP - Useful during development and testing of custom functions. </li> <li>Custom - Allows custom Application Services to implement their own Custom Trigger</li> </ol>"},{"location":"microservices/application/Triggers/#edgex-messagebus-trigger","title":"EdgeX MessageBus Trigger","text":"<p>An EdgeX MessageBus trigger will execute the pipeline every time data is received from the configured Edgex MessageBus <code>SubscribeTopics</code>.  The EdgeX MessageBus is the central message bus internal to EdgeX and has a specific message envelope that wraps all data published to this message bus.</p> <p>There currently are three implementations of the EdgeX MessageBus available to be used. These are <code>Redis Pub/Sub</code>(default), <code>MQTT</code> and <code>ZeroMQ</code>(ZMQ). The implementation type is selected via the <code>[Trigger.EdgexMessageBus]</code> configuration described below.</p>"},{"location":"microservices/application/Triggers/#type-configuration","title":"Type Configuration","text":"<p>Edgex 2.0</p> <p>For EdgeX 2.0 the <code>SubscribeTopic</code> has been renamed to <code>SubscribeTopics</code> and moved under the EdgexMessageBus <code>SubscribeHost</code> section. The <code>PublishTopic</code> has also been moved under the EdgexMessageBus <code>PublishHost</code> section. Also the legacy <code>type</code> of <code>messagebus</code> has been removed.</p> <p>Here's an example:</p> <p><pre><code>[Trigger]\nType=\"edgex-messagebus\"\n</code></pre> The <code>Type=</code> is set to <code>edgex-messagebus</code> trigger type. The Context function <code>ctx.SetResponseData([]byte outputData)</code> stores the data to send back to the EdgeX MessageBus on the topic specified by the PublishHost <code>PublishTopic=</code> setting.</p>"},{"location":"microservices/application/Triggers/#messagebus-connection-configuration","title":"MessageBus Connection Configuration","text":"<p>The other piece of configuration required are the connection settings: <pre><code>[Trigger.EdgexMessageBus]\nType = \"redis\" # message bus type (i.e \"redis`, `mqtt` or `zero` for ZeroMQ)\n[Trigger.EdgexMessageBus.SubscribeHost]\nHost = \"localhost\"\nPort = 6379\nProtocol = \"redis\"\nSubscribeTopics=\"edgex/events/#\"\n[Trigger.EdgexMessageBus.PublishHost]\nHost = \"localhost\"\nPort = 6379\nProtocol = \"redis\"\nPublishTopic=\"\" # optional if publishing response back to the MessageBus\n</code></pre></p> <p>Edgex 2.0</p> <p>For Edgex 2.0 the <code>PublishTopic</code> can now have placeholders. See Publish Topic Placeholders section below for more details</p> <p>As stated above there are three EdgeX MessageBus implementations you can choose from. These type values are as follows:</p> <pre><code>redis - for Redis Pub/Sub (Requires Redis running and Core Data and/or Device Services configure to use Redis Pub/Sub)\nmqtt  - for MQTT (Requires a MQTT Broker running and Core Data and/or Device Services configure to use MQTT)\nzero  - for ZeroMQ (No Broker/Service required. Core Data must be configured to use Zero and Device service configure to use REST to Core Data)\n</code></pre> <p>Edgex 2.0</p> <p>For Edgex 2.0 Redis is now the default EdgeX MessageBus implementation used. Also, the Redis implementation changed from <code>Redis streams</code> to <code>Redis Pub/Sub</code>, thus the type value changed from <code>redisstreams</code> to <code>redis</code></p> <p>Important</p> <p>When using ZMQ for the message bus, the Publish Host MUST be different for each publisher to since the they will bind to the specific port. 5563 for example cannot be used to publish since <code>EdgeX Core Data</code> has bound to that port. Similarly, you cannot have two separate instances of the app functions SDK running and publishing to the same port. This is why once Device services started publishing the the EdgeX MessageBus the default was changed to <code>Redis Pub/Sub</code></p> <p>Note</p> <p>When using MQTT for the message bus, there is additional configuration required for specifying the MQTT specific options. </p>"},{"location":"microservices/application/Triggers/#example-using-mqtt","title":"Example Using MQTT","text":"<p>Here is example <code>EdgexMessageBus</code> configuration when using MQTT as the message bus:</p> <pre><code>[Trigger.EdgexMessageBus]\nType = \"mqtt\"\n[Trigger.EdgexMessageBus.SubscribeHost]\nHost = \"localhost\"\nPort = 1883\nProtocol = \"tcp\"\nSubscribeTopics=\"edgex/events/#\"\n[Trigger.EdgexMessageBus.PublishHost]\nHost = \"localhost\"\nPort = 1883\nProtocol = \"tcp\"        PublishTopic=\"\" # optional if publishing response back to the MessageBus\n[Trigger.EdgexMessageBus.Optional]\n# MQTT Specific options\nClientId =\"new-app-service\"\nQos            = \"0\" # Quality of Service values are 0 (At most once), 1 (At least once) or 2 (Exactly once)\nKeepAlive      = \"10\" # Seconds (must be 2 or greater)\nRetained       = \"false\"\nAutoReconnect  = \"true\"\nConnectTimeout = \"30\" # Seconds\nSkipCertVerify = \"false\"\nauthmode = \"none\"  # change to \"usernamepassword\", \"clientcert\", or \"cacert\" for secure MQTT messagebus.\nsecretname = \"mqtt-bus\"\n</code></pre> <p>EdgeX 2.0</p> <p>New for EdgeX 2.0 is the Secure MessageBus when use the <code>Redis Pub/Sub</code> implementation. See the Secure MessageBus documentation for more details.</p> <p>EdgeX 2.0</p> <p>Also new for EdgeX 2.0 is the MQTT MessageBus implementation now supports retrieving secrets from the <code>Secret Store</code> for secure MQTT connection, but there is not any facility yet to generate the credentials on first startup and distribute them to all services, as is done with <code>Redis Pub/sub</code>. This MQTT credentials generation and distribution is a future enhancement for EdgeX security services. </p>"},{"location":"microservices/application/Triggers/#filter-by-topics","title":"Filter By Topics","text":"<p>EdgeX 2.0</p> <p>New for EdgeX 2.0</p> <p>App services now have the capability to filter by EdgeX MessageBus topics rather then using Filter functions in the functions pipeline. Filtering by topic is more efficient since the App Service never receives the data off the MessageBus. Core Data and/or Device Services now publish to multi-level topics that include the <code>profilename</code>, <code>devicename</code> and <code>sourcename</code> . Sources are the <code>commandname</code> or <code>resourcename</code> that generated the Event. The publish topics now look like this:</p> <pre><code># From Core Data\nedgex/events/core/&lt;profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt;\n\n# From Device Services\nedgex/events/device/&lt;profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt;\n</code></pre> <p>This with App Services capability to have multiple subscriptions allows for multiple filters by subscriptions. The <code>SubscribeTopics</code> setting takes a comma separated list of subscribe topics.</p> <p>Here are a few examples of how to configure the <code>SubscribeTopics</code> setting under the <code>Trigger.EdgexMessageBus.SubscribeHost</code> section to filter by subscriptions using the <code>profile</code>, <code>device</code> and <code>source</code> names from the SNMP Device Service file here:</p> <ul> <li>Filter for all Events </li> </ul> <pre><code>SubscribeTopics=\"edgex/events/#\"\n</code></pre> <ul> <li>Filter for Events only from a single class of devices (device profile defines a class of device)</li> </ul> <pre><code>SubscribeTopics=\"edgex/events/#/trendnet/#\"\n</code></pre> <ul> <li>Filter for Events only from a single actual device</li> </ul> <pre><code>SubscribeTopics=\"edgex/events/#/#/trendnet01/#\"\n</code></pre> <ul> <li>Filter for Events from two specific actual devices</li> </ul> <pre><code>SubscribeTopics=\"edgex/events/#/#/trendnet01/#, edgex/events/#/#/trendnet02/#\"\n</code></pre> <ul> <li>Filter for Events from two specific sources. </li> </ul> <pre><code>SubscribeTopics=\"edgex/events/#/#/#/Uptime, edgex/events/#/#/#/MacAddress\"\n</code></pre> <p>Note</p> <p>The above examples are for when Redis is used as the EdgeX MessageBus implementation, which is now the default. The Redis implementation uses the <code>#</code> wildcard character for multi-level and single level. The implementation actually converts all <code>#</code>'s to the <code>*</code>'s. The <code>*</code>is the actual wildcard character used by Redis Pub/Sub. In the first example (multi-level) the <code>#</code> is used at the end in the location for where Core Data's and Device Service's publish topics differ. This location will be <code>core</code> when coming from Core Data or <code>device</code> when coming from a Device Service. The additional use of <code>#</code> within the topic, not at the end, (single-level) allows for any <code>Profile</code>, <code>Device</code> or <code>Source</code> when specifying one of the others.</p> <p>Note</p> <p>For the MQTT implementation of the EdgeX MessageBus, the <code>#</code> is also used for the multi-level wildcard, but the single-level wildcard is the <code>+</code> character. So the first and last examples above would be as follows for when using the MQTT implementation</p> <pre><code>SubscribeTopics=\"edgex/events/#\"\nSubscribeTopics=\"edgex/events/+/trendnet/#\"\nSubscribeTopics=\"edgex/events/+/+/trendnet01/#\"\nSubscribeTopics=\"edgex/events/+/+/trendnet01/#, edgex/events/+/+/trendnet02/#\"\nSubscribeTopics=\"edgex/events/+/+/+/Uptime, edgex/events/+/+/+/MacAddress\"\n</code></pre>"},{"location":"microservices/application/Triggers/#external-mqtt-trigger","title":"External MQTT Trigger","text":"<p>An External MQTT trigger will execute the pipeline every time data is received from an external MQTT broker on the configured <code>SubscribeTopics</code>.  </p> <p>Note</p> <p>The data received from the external MQTT broker is not wrapped with any metadata known to EdgeX. The data is handled as JSON or CBOR. The data is assumed to be JSON unless the first byte in the data is not a <code>{</code>  or a <code>[</code>, in which case it is then assumed to be CBOR.</p> <p>Note</p> <p>The data received, encoded as JSON or CBOR, must match the <code>TargetType</code> defined by your application service. The default  <code>TargetType</code> is an <code>Edgex Event</code>. See TargetType for more details.</p>"},{"location":"microservices/application/Triggers/#type-configuration_1","title":"Type Configuration","text":"<p>Here's an example: <pre><code>[Trigger]\nType=\"external-mqtt\"\n[Trigger.externalmqtt]\nUrl = \"tls://test.mosquitto.org:8884\"\nSubscribeTopics=\"edgex/#\"\nClientId =\"app-external-mqtt-trigger\"\nQos            = 0\nKeepAlive      = 10\nRetained       = false\nAutoReconnect  = true\nConnectTimeout = \"30s\"\nSkipCertVerify = true\nAuthMode = \"clientcert\"\nSecretPath = \"external-mqtt\"\nRetryDuration = 600\nRetryInterval = 5\n</code></pre></p> <p>Edgex 2.0</p> <p>For EdgeX 2.0 the <code>SubscribeTopic</code> has been renamed to <code>SubscribeTopics</code> and moved under the <code>ExternalMqtt</code> section. The <code>PublishTopic</code> has also been moved under the <code>ExternalMqtt</code> section.</p> <p>The <code>Type=</code> is set to <code>external-mqtt</code>. To receive data from the external MQTT Broker you must set your <code>SubscribeTopics=</code> to the appropriate topic(s) that the external publisher is using. You may also designate a <code>PublishTopic=</code> if you wish to publish data back to the external MQTT Broker. The Context function <code>ctx.SetResponseData([]byte outputData)</code> stores the data to send back to the external MQTT Broker on the topic specified by the <code>PublishTopic=</code> setting.</p> <p>Edgex 2.2</p> <p>Prior to EdgeX 2.2 if <code>AuthMode</code> is set to <code>usernamepassword</code>, <code>clientcert</code>, or <code>cacert</code> and App Service will be run in secure mode, the required credentials must be stored to Secret Store via Vault CLI, REST API, or WEB UI before starting App Service. Otherwise App Service will fail to initialize the External MQTT Trigger and then shutdown because the required credentials do not exist in the Secret Store at the time service starts. Today, you can start App Service and store the required credentials using the App Service API afterwards. If the credentials found in Secret Store cannot satisfy App Service, it will retry for a certain duration and interval. See Application Service Configuration for more information on the configuration of this retry duration and interval. </p>"},{"location":"microservices/application/Triggers/#external-mqtt-broker-configuration","title":"External MQTT Broker Configuration","text":"<p>The other piece of configuration required are the MQTT Broker connection settings: <pre><code>[Trigger.ExternalMqtt]\nUrl = \"tcp://localhost:1883\" #  fully qualified URL to connect to the MQTT broker\nSubscribeTopics=\"SomeTopics\"\nPublishTopic=\"\" # optional if publishing response back to the the External MQTT Broker\nClientId = \"AppService\" ConnectTimeout = \"5s\" # 5 seconds\nAutoReconnect = true\nKeepAlive = 10 # Seconds (must be 2 or greater)\nQoS = 0 # Quality of Service 0 (At most once), 1 (At least once) or 2 (Exactly once)\nRetain = true\nSkipCertVerify = false\nSecretPath = \"mqtt-trigger\" AuthMode = \"none\" # Options are \"none\", \"cacert\" , \"usernamepassword\", \"clientcert\".\n</code></pre></p> <p>Edgex 2.0</p> <p>For Edgex 2.0 the <code>PublishTopic</code> can have placeholders. See Publish Topic Placeholders section below for more details</p>"},{"location":"microservices/application/Triggers/#http-trigger","title":"HTTP Trigger","text":"<p>Designating an HTTP trigger will allow the pipeline to be triggered by a RESTful <code>POST</code> call to <code>http://[host]:[port]/api/v2/trigger/</code>. </p>"},{"location":"microservices/application/Triggers/#type-configuration_2","title":"Type Configuration","text":"<p>Here's an example:</p> <pre><code>[Trigger]\nType=\"http\" </code></pre> <p>The <code>Type=</code> is set to <code>http</code>. This will will enable listening to the <code>api/v2/trigger/</code> endpoint. No other configuration is required. The Context function <code>ctx.SetResponseData([]byte outputData)</code> stores the data to send back as the response to the requestor that originally triggered the HTTP Request. </p> <p>Note</p> <p>The HTTP trigger uses the <code>content-type</code> from the HTTP Header to determine if the data is JSON or CBOR encoded and the optional <code>X-Correlation-ID</code> to set the correlation ID for the request.</p> <p>Note</p> <p>The data received, encoded as JSON or CBOR, must match the <code>TargetType</code> defined by your application service. The default  <code>TargetType</code> is an <code>Edgex Event</code>. See TargetType for more details.</p>"},{"location":"microservices/application/Triggers/#custom-triggers","title":"Custom Triggers","text":"<p>Edgex 2.0</p> <p>New for EdgeX 2.0 </p> <p>It is also possible to define your own trigger and register a factory function for it with the SDK.  You can then configure the trigger by registering a factory function to build it along with a name to use in the config file.  These triggers can be registered with:</p> <pre><code>service.RegisterCustomTriggerFactory(\"my-trigger-name\", myFactoryFunc) </code></pre> <p>Note</p> <p>You can NOT override trigger names built into the SDK ( \"edgex-messagebus\", \"external-mqtt\", or \"http\") for a custom trigger.</p> <p>The trigger factory function is bound to an instance of a trigger configuration struct that is provided by the SDK:</p> <pre><code>type TriggerConfig struct {\nLogger           logger.LoggingClient\nContextBuilder   TriggerContextBuilder\n// Deprecated: use MessageReceived\nMessageProcessor TriggerMessageProcessor\nMessageReceived  TriggerMessageHandler\nConfigLoader     TriggerConfigLoader\n}\n</code></pre> <p>This type carries a pointer to the internal edgex logger, along with three functions:</p> <ul> <li><code>ContextBuilder</code> builds an <code>interfaces.AppFunctionContext</code> from a message envelope you construct.</li> <li><code>MessageProcessor</code> (DEPRECATED) exposes a function that sends your message envelope and context built above into the default function pipeline.</li> <li><code>MessageReceived</code> exposes a function that sends your message envelope and context to any pipelines configured in the EdgeX service.  It also takes a function that will be run to process the response for each successful pipeline.</li> </ul> <p>Note</p> <p>The context passed in to <code>Received</code> will be cloned for each pipeline configured to run.  If a nil context is passed a new one will be initialized from the message.</p> <ul> <li><code>ConfigLoader</code> exposes a function that loads your custom config struct.  By default this is done from the primary EdgeX configuration pipeline, and only loads root-level elements.</li> </ul> <p>If you need to override these functions it can be done in the factory function registered with the service.</p> <p>The custom trigger constructed here will then need to implement the trigger interface so that the SDK can invoke it:</p> <pre><code>type Trigger interface {\nInitialize(wg *sync.WaitGroup, ctx context.Context, background &lt;-chan BackgroundMessage) (bootstrap.Deferred, error)\n}\n\ntype BackgroundMessage interface {\nMessage() types.MessageEnvelope\nTopic() string\n}\n</code></pre> <p>This leaves a lot of flexibility for how you want the trigger to behave (for example you could write a trigger to watch for file changes, or run on a timer).  Below is a sample implementation of a trigger that reads lines from os.Stdin and pass the captured string through the edgex function pipeline.  In this case the target type for the service is set to <code>&amp;[]byte{}</code>.</p> <pre><code>type stdinTrigger struct{\ntc appsdk.TriggerConfig\n}\n\nfunc (t *stdinTrigger) Initialize(wg *sync.WaitGroup, ctx context.Context, _ &lt;-chan interfaces.BackgroundMessage) (bootstrap.Deferred, error) {\nmsgs := make(chan []byte)\n\nreceiveMessage := true\n\nresponseHandler := func(ctx AppFunctionContext, pipeline *FunctionPipeline) {\n// do stuff\n}\n\ngo func() {\nfmt.Print(\"&gt; \")\nrdr := bufio.NewReader(os.Stdin)\nfor receiveMessage {\ns, err := rdr.ReadString('\\n')\ns = strings.TrimRight(s, \"\\n\")\n\nif err != nil {\nt.tc.Logger.Error(err.Error())\ncontinue\n}\n\nmsgs &lt;- []byte(s)\n}\n}()\n\ngo func() {\nfor receiveMessage {\nselect {\ncase &lt;-ctx.Done():\nreceiveMessage = false\n\ncase m := &lt;-msgs:\ngo func() {\nenv := types.MessageEnvelope{\nPayload: m,\n}\n\nctx := t.tc.ContextBuilder(env)\n\nerr := t.tc.MessageReceived(ctx, env, responseHandler)\n\nif err != nil {\nt.tc.Logger.Error(err.Error())\n}\n}()\n}\n}\n}()\n\nreturn cancel, nil\n}\n</code></pre> <p>This trigger can then be registered by calling:</p> <pre><code>appService.RegisterCustomTriggerFactory(\"custom-stdin\", func(config appsdk.TriggerConfig) (appsdk.Trigger, error) {\nreturn &amp;stdinTrigger{\ntc: config,\n}, nil\n})\n</code></pre>"},{"location":"microservices/application/Triggers/#type-configuration_3","title":"Type Configuration","text":"<p>Here's an example:</p> <pre><code>[Trigger]\nType=\"custom-stdin\" </code></pre> <p>Now the custom trigger is configured to be used rather than one of the built-in triggers.</p> <p>A complete working example can be found here</p>"},{"location":"microservices/application/Triggers/#publish-topic-placeholders","title":"Publish Topic Placeholders","text":"<p>Edgex 2.0</p> <p>New for EdgeX 2.0 </p> <p>Both the <code>EdgeX MessageBus</code>and the <code>External MQTT</code> triggers support the new Publish Topic Placeholders capability. The configured <code>PublishTopic</code> for either of these triggers can contain placeholders for runtime replacements. The placeholders are replaced with values from the new <code>Context Storage</code> whose key match the placeholder name. Function pipelines can add values to the <code>Context Storage</code> which can then be used as replacement values in the publish topic. If an EdgeX Event is received by the configured trigger the Event's <code>profilename</code>, <code>devicename</code> and <code>sourcename</code> as well as the will be seeded into the <code>Context Storage</code>. See the Context Storage documentation for more details.</p> <p>The Publish Topic Placeholders format is a simple <code>{&lt;key-name&gt;}</code> that can appear anywhere in the topic multiple times. An error will occur if a specified placeholder does not exist in the  <code>Context Storage</code>. </p>"},{"location":"microservices/application/Triggers/#example","title":"Example","text":"<pre><code>PublishTopic = \"data/{profilename}/{devicename}/{custom}\"\n</code></pre>"},{"location":"microservices/application/Triggers/#received-topic","title":"Received Topic","text":"<p>Edgex 2.0</p> <p>New for EdgeX 2.0 </p> <p>The topic the data was received on for <code>EdgeX MessageBus</code> and the <code>External MQTT</code> triggers is now stored in the new <code>Context Storage</code> with the key <code>receivedtopic</code>. This makes it available to pipeline functions via the <code>Context Storage</code> .</p>"},{"location":"microservices/application/V2Migration/","title":"V2 Migration Guide","text":"<p>EdgeX 2.0</p> <p>For the EdgeX 2.0 (Ireland) release there are many backward breaking changes. These changes require custom Application Services and custom profiles (app-service-configurable) to be migrated. This section outlines the necessary steps for this migration.</p>"},{"location":"microservices/application/V2Migration/#custom-application-services","title":"Custom Application Services","text":""},{"location":"microservices/application/V2Migration/#configuration","title":"Configuration","text":"<p>The migration of any Application Service's configuration starts with migrating configuration common to all EdgeX services. See the V2 Migration of Common Configuration section for details. The remainder of this section focuses on configuration specific to Application Services.</p>"},{"location":"microservices/application/V2Migration/#secretstoreexclusive","title":"SecretStoreExclusive","text":"<p>The <code>SecretStoreExclusive</code> section has been removed in EdgeX 2.0. With EdgeX 2.0 all SecretStores are exclusive, so the existing <code>SecretStore</code> section is all that is required. Services requiring <code>known secrets</code> such as <code>redisdb</code> must inform the <code>Security SecretStore Setup</code> service (via environment variables) that the application service requires the secret added to its SecretStore. See the Configuring Add-on Services section for more details.</p>"},{"location":"microservices/application/V2Migration/#clients","title":"Clients","text":"<p>The client used for the version validation check has changed to being from Core Metadata, rather than Core Data. This is because Core Data is now optional when persistence isn't required since all Device Services publish directly to the EdgeX MessageBus. The configuration for Core Metadata is the only <code>Clients</code> entry required, all other (see below) are optional based on use case needs. </p> <p>Note</p> <p>The port numbers for all EdgeX services have changed which must be reflected in the <code>Clients</code> configuration. Please see the Default Service Ports section for complete list of the new port assignments. </p> <p>Example - Core Metadata client configuration</p> <pre><code>  [Clients]\n[Clients.core-metadata]\nProtocol = \"http\"\nHost = \"localhost\"\nPort = 59881\n</code></pre> <p>Example - All available clients configured with new port numbers</p> <pre><code>  [Clients]\n# Used for version check on start-up\n# Also used for DeviceService, DeviceProfile and Device clients\n[Clients.core-metadata]\nProtocol = \"http\"\nHost = \"localhost\"\nPort = 59881\n\n# Used for Event client which is used by PushToCoreData function\n[Clients.core-data]\nProtocol = \"http\"\nHost = \"localhost\"\nPort = 59880\n\n# Used for Command client\n[Clients.core-command]\nProtocol = \"http\"\nHost = \"localhost\"\nPort = 59882\n\n# Used for Notification and Subscription clients\n[Clients.support-notifications]\nProtocol = \"http\"\nHost = \"localhost\"\nPort = 59860\n</code></pre>"},{"location":"microservices/application/V2Migration/#trigger","title":"Trigger","text":"<p>The <code>Trigger</code> section (previously named <code>Binding</code>) has been restructured with <code>EdgexMessageBus</code> (previously named <code>MessageBus</code>) and <code>ExternalMqtt</code> (previously named <code>MqttBroker</code> ) moved under it. The <code>SubscribeTopics</code> (previously named <code>SubscribeTopic</code>) has been moved under the <code>EdgexMessageBus.SubscribeHost</code> and <code>ExternalMqtt</code> sections. The <code>PublishTopic</code> has been moved under the <code>EdgexMessageBus.PublishHost</code> and <code>ExternalMqtt</code> sections.</p>"},{"location":"microservices/application/V2Migration/#edgex-messagebus","title":"EdgeX MessageBus","text":"<p>If your Application Service is using the EdgeX MessageBus trigger, you can then simply copy the complete <code>Trigger</code> configuration from the example below and tweak it as needed. </p> <p>Example - EdgeX MessageBus trigger configuration</p> <pre><code>[Trigger]\nType=\"edgex-messagebus\"\n[Trigger.EdgexMessageBus]\nType = \"redis\"\n[Trigger.EdgexMessageBus.SubscribeHost]\nHost = \"localhost\"\nPort = 6379\nProtocol = \"redis\"\nSubscribeTopics=\"edgex/events/#\"\n[Trigger.EdgexMessageBus.PublishHost]\nHost = \"localhost\"\nPort = 6379\nProtocol = \"redis\"\nPublishTopic=\"example\"\n[Trigger.EdgexMessageBus.Optional]\nAuthMode = \"usernamepassword\"  # required for redis messagebus (secure or insecure).\nSecretName = \"redisdb\"\n</code></pre> <p>From the above example you can see the improved structure and the following changes:</p> <ul> <li>Default <code>EdgexMessageBus</code> type has changed from <code>ZeroMQ</code> to <code>Redis</code>.</li> <li>Type value for <code>Redis</code> has changed from <code>redistreams</code> to <code>redis</code>. This is because the implementation no longer uses Redis Streams. It now uses Redis Pub/Sub.</li> <li><code>SubscribeTopics</code> is now plural since it now accepts a comma separated list of topics. The default value uses a multi-level topic with a wild card. This is because Core Data and Device Services now publish to a multi-level topics which have<code>edgex/events</code> as their base. This allows Application Services to filter by topic rather then receive the data and then filter it out via a pipeline filter function. See the Filter By Topics section for more details.</li> <li>The EdgeX MessageBus using Redis is a Secure MessageBus, thus the addition of the <code>AuthMode</code> and <code>SecretName</code> settings which allow the credentials to be pulled from the service's SecretStore. See the Secure MessageBus secure for more details.</li> </ul>"},{"location":"microservices/application/V2Migration/#external-mqtt","title":"External MQTT","text":"<p>If your Application service is using the External MQTT trigger do the following:</p> <ol> <li>Move your existing <code>MqttBroker</code> configuration under the <code>Trigger</code> section (renaming it to <code>ExternalMqtt</code>)</li> <li>Move your <code>SubscribeTopic</code> (renaming it to <code>SubscribeTopics</code>) under the <code>ExternalMqtt</code> section.</li> <li>Move your <code>PublishTopic</code> under the <code>ExternalMqtt</code> section.</li> </ol> <p>Example - External MQTT trigger configuration</p> <pre><code>[Trigger]\nType=\"external-mqtt\"\n[Trigger.ExternalMqtt]\nUrl = \"tcp://broker.hivemq.com:1883\"\nSubscribeTopics = \"edgex-trigger\"\nPublishTopic = \"edgex-trigger-response\"\nClientId = \"app-my-service\"\nConnectTimeout = \"30s\"\nAutoReconnect = false\nKeepAlive = 60\nQoS = 0\nRetain = false\nSkipCertVerify = false\nSecretPath = \"\"\nAuthMode = \"none\"\n</code></pre>"},{"location":"microservices/application/V2Migration/#http","title":"HTTP","text":"<p>The HTTP trigger configuration has not changed beyond the renaming of <code>Binding</code> to <code>Trigger</code>.</p> <p>Example - HTTP trigger configuration</p> <pre><code>[Trigger]\nType=\"http\"\n</code></pre>"},{"location":"microservices/application/V2Migration/#code","title":"Code","text":""},{"location":"microservices/application/V2Migration/#dependencies","title":"Dependencies","text":"<p>You first need to update the <code>go.mod</code> file to specify <code>go 1.16</code> and the V2 versions of the App Functions SDK and any EdgeX go-mods directly used by your service. Note the extra <code>/v2</code> for the modules.</p> <p>Example go.mod for V2</p> <pre><code>module &lt;your service&gt;\n\ngo 1.16\n\nrequire (\ngithub.com/edgexfoundry/app-functions-sdk-go/v2 v2.0.0\ngithub.com/edgexfoundry/go-mod-core-contracts/v2 v2.0.0\n)\n</code></pre> <p>Once that is complete then the import statements for these dependencies must be updated to include the <code>/v2</code> in the path. </p> <p>Example import statements for V2</p> <pre><code>import (\n...\n\n\"github.com/edgexfoundry/app-functions-sdk-go/v2/pkg/interfaces\"\n\"github.com/edgexfoundry/go-mod-core-contracts/v2/dtos\"\n)\n</code></pre>"},{"location":"microservices/application/V2Migration/#new-apis","title":"New APIs","text":"<p>Next changes you will encounter in your code are that the <code>AppFunctionsSDK</code> and <code>Context</code> structs have been abstracted into the new <code>ApplicationService</code> and <code>AppFunctionContext</code> APIs. See the Application Service API and App Function Context API sections for complete details on these new APIs. The following sections cover migrating your code for these new APIs.</p>"},{"location":"microservices/application/V2Migration/#main","title":"main()","text":"<p>The following changes to your <code>main()</code> function will be necessary.</p>"},{"location":"microservices/application/V2Migration/#create-and-initialize","title":"Create and Initialize","text":"<p>Your <code>main()</code> will change to use a factory function to create and initialize the Application Service instance, rather than create instance of <code>AppFunctionsSDK</code> and call <code>Initialize()</code> </p> <p>Example - Create Application Service instance</p> <pre><code>    const serviceKey = \"app-myservice\"\n...\n\nservice, ok := pkg.NewAppService(serviceKey)\nif !ok {\nos.Exit(-1)\n}\n</code></pre> <p>Example - Create Application Service instance with Target Type specified</p> <pre><code>    const serviceKey = \"app-myservice\"\n...\n\nservice, ok := pkg.NewAppServiceWithTargetType(serviceKey, &amp;[]byte{})\nif !ok {\nos.Exit(-1)\n}\n</code></pre> <p>Since the factory function logs all errors, all you need to do is exit if it returns <code>false</code>. </p>"},{"location":"microservices/application/V2Migration/#logging-client","title":"Logging Client","text":"<p>The <code>Logging</code> client is now accessible from the <code>service.LoggingClient()</code> API. </p> <p>New extended Logging Client API</p> <p>The Logging Client API now has <code>formatted</code> versions of all the logging APIs, which are <code>Infof</code>, <code>Debugf</code>, <code>Tracef</code>, <code>Warnf</code>and <code>Errorf</code>. If your code uses <code>fmt.Sprintf</code> to format your log messages then it can now be simplified by using these new APIs.</p>"},{"location":"microservices/application/V2Migration/#application-settings","title":"Application Settings","text":"<p>The access functions for retrieving the service's custom Application Settings (<code>ApplicationSettings</code>, <code>GetAppSettingStrings</code>,  and <code>GetAppSetting</code> ) have not changed. An improved capability to have structured custom configuration has been added. See the Structure Custom Configuration section for more details.</p>"},{"location":"microservices/application/V2Migration/#functions-pipeline","title":"Functions Pipeline","text":"<p>Setting the  Functions Pipeline has not changed, but the name of some built in functions have changed and new ones have been added. See the Built-In Pipeline Functions section for more details.</p> <p>Example - Setting Functions Pipeline</p> <pre><code>if err := service.SetFunctionsPipeline(\ntransforms.NewFilterFor(deviceNames).FilterByDeviceName,\ntransforms.NewConversion().TransformToXML,\ntransforms.NewHTTPSender(exportUrl, \"application/xml\", false).HTTPPost,\n); err != nil {\nlc.Errorf(\"SetFunctionsPipeline returned error: %s\", err.Error())\nos.Exit(-1)\n}\n</code></pre>"},{"location":"microservices/application/V2Migration/#makeitrun","title":"MakeItRun","text":"<p>The <code>MakeItRun</code> API has not changed.</p> <p>Example - Call to MakeItRun</p> <pre><code>err = service.MakeItRun()\nif err != nil {\nlc.Errorf(\"MakeItRun returned error: %s\", err.Error())\nos.Exit(-1)\n}\n</code></pre>"},{"location":"microservices/application/V2Migration/#custom-pipeline-functions","title":"Custom Pipeline Functions","text":""},{"location":"microservices/application/V2Migration/#pipeline-function-signature","title":"Pipeline Function signature","text":"<p>The major change to custom Pipeline Functions for EdgeX 2.0 is the new function signature which drives all the other changes.</p> <p>Example - New Pipeline Function signature</p> <pre><code>type AppFunction = func(ctx AppFunctionContext, data interface{}) (bool, interface{})\n</code></pre> <p>This function signature passes in an instance of the new AppFunctionContext API for the context and now has only a single <code>data</code> instance for the function to operate on.</p>"},{"location":"microservices/application/V2Migration/#return-values","title":"Return Values","text":"<p>The definitions for the Pipeline Function return values have not changed.</p>"},{"location":"microservices/application/V2Migration/#data","title":"Data","text":"<p>The <code>data</code> passed in either set to a single instance for the function to process or nil.  Now you no longer need to check the length of the incoming data.</p> <p>Example</p> <pre><code>    if data == nil {\nreturn false, errors.New(\"No Data Received\")\n}\n</code></pre>"},{"location":"microservices/application/V2Migration/#logging-client_1","title":"Logging Client","text":"<p>The <code>Logging</code> client is now accessible from the <code>ctx.LoggingClient()</code> API. </p>"},{"location":"microservices/application/V2Migration/#clients_1","title":"Clients","text":"<p>The available clients have changed with a few additions and <code>ValueDescriptorClient</code> has been removed. See the Context Clients section for complete list of available clients.</p>"},{"location":"microservices/application/V2Migration/#responsedata","title":"ResponseData","text":"<p>The <code>SetResponseData</code> and <code>ResponseData</code> APIs replace the previous <code>Complete</code> function and direct access to the <code>OutputData</code> field.</p>"},{"location":"microservices/application/V2Migration/#responsecontenttype","title":"ResponseContentType","text":"<p>The <code>SetResponseContentType</code> and <code>ResponseContentType</code> APIs replace the previous direct access to the <code>ResponseContentType</code> field.</p>"},{"location":"microservices/application/V2Migration/#retrydata","title":"RetryData","text":"<p>The <code>SetRetryData</code> API replaces the <code>SetRetryData</code> function and direct access to the <code>RetryData</code> field.</p>"},{"location":"microservices/application/V2Migration/#markaspushed","title":"MarkAsPushed","text":"<p>The <code>MarkAsPushed</code> capability has been removed</p>"},{"location":"microservices/application/V2Migration/#pushtocore","title":"PushToCore","text":"<p>The <code>PushToCore</code> API replaces the <code>PushToCoreData</code> function. The API signature has changed. See the PushToCore section for more details.</p>"},{"location":"microservices/application/V2Migration/#new-capabilities","title":"New Capabilities","text":"<p>Some new capabilities have been added to the new <code>AppFunctionContext</code> API. See the App Function Context API section for complete details.</p>"},{"location":"microservices/application/V2Migration/#app-service-configurable-profiles","title":"App Service Configurable Profiles","text":"<p>Custom profiles used with App Service Configurable are configuration files. These follow the same migration above for custom  Application Service configuration, except for the Configurable Functions Pipeline items.  The following are the changes for the Configurable Functions Pipeline:</p> <ol> <li><code>FilterByValueDescriptor</code> changed to <code>FilterByResourceName</code>. See the FilterByResourceName section for details.</li> <li><code>TransformToXML</code> and <code>TransformToJSON</code> have been collapsed into <code>Transform</code> with additional parameters. See the Transform section for more details.</li> <li><code>CompressWithGZIP</code> and <code>CompressWithZLIB</code> have been collapsed into <code>Compress</code> with additional parameters. See the Compress section for more details.</li> <li><code>EncryptWithAES</code> has been changed to <code>Encrypt</code> with additional parameters. See the Encrypt section for more details.</li> <li><code>BatchByCount</code>, <code>BatchByTime</code> and <code>BatchByTimeAndCount</code> have been collapsed into <code>Batch</code> with additional parameters. See the Batch section for more details.</li> <li><code>SetOutputData</code> has been renamed to <code>SetResponseData</code>. See the SetResponseData section for more details.</li> <li><code>PushToCore</code> parameters have changed. See the PushToCore section for more details.</li> <li><code>HTTPPost</code>, <code>HTTPPostJSON</code>, <code>HTTPPostXML</code>, <code>HTTPPut</code>, <code>HTTPPutJSON</code> and <code>HTTPPutXML</code> have been collapsed into <code>HTTPExport</code> with additional parameters. See the HTTPExport section for more details.</li> <li><code>MQTTSecretSend</code> has been renamed to <code>MQTTExport</code> with additional parameters. See the MQTTExport section for more details.</li> <li><code>MarkAsPushed</code> has been removed. The mark as push capability has been removed from Core Data, which this depended on.</li> <li><code>MQTTSend</code> has been removed. This has been replaced by <code>MQTTExport</code>. See the MQTTExport section for more details.</li> <li><code>FilterByProfileName</code> and <code>FilterBySourceName</code> have been added. See the FilterByProfileName and  FilterBySourceName sections for more details.</li> <li>Ability to define multiple instances of the same Configurable Pipeline Function has been added. See the Multiple Instances of Function section for more details.</li> </ol>"},{"location":"microservices/configuration/CommonCommandLineOptions/","title":"Common Command Line Options","text":"<p>This section describes the command line options that are common to all EdgeX services. Some services have addition command line options which are documented in the specific sections for those services.</p>"},{"location":"microservices/configuration/CommonCommandLineOptions/#confdir","title":"ConfDir","text":"<p><code>-c/--confdir</code></p> <p>Specify local configuration directory. Default is <code>./res</code></p> <p>Can be overridden with EDGEX_CONF_DIR environment variable.</p>"},{"location":"microservices/configuration/CommonCommandLineOptions/#file","title":"File","text":"<p><code>-f/--file &lt;name&gt;</code></p> <p>Indicates the name of the local configuration file. Default is <code>configuration.toml</code></p> <p>Can be overridden with EDGEX_CONFIG_FILE environment variable.</p>"},{"location":"microservices/configuration/CommonCommandLineOptions/#config-provider","title":"Config Provider","text":"<p><code>-cp/ --configProvider</code></p> <p>Indicates to use Configuration Provider service at specified URL. URL Format: <code>{type}.{protocol}://{host}:{port} ex: consul.http://localhost:8500</code></p> <p>Can be overridden with EDGEX_CONFIGURATION_PROVIDER environment variable.</p>"},{"location":"microservices/configuration/CommonCommandLineOptions/#profile","title":"Profile","text":"<p><code>-p/--profile &lt;name&gt;</code></p> <p>Indicates configuration profile other than default. Default is no profile name resulting in using <code>./res/configuration.toml</code> if <code>-f</code> and <code>-c</code> are not used.</p> <p>Can be overridden with EDGEX_PROFILE  environment variable.</p>"},{"location":"microservices/configuration/CommonCommandLineOptions/#registry","title":"Registry","text":"<p><code>-r/ --registry</code></p> <p>Indicates service should use the Registry. Connection information is pulled from the <code>[Registry]</code> configuration section.</p> <p>Can be overridden with EDGEX_USE_REGISTRY environment variable.</p>"},{"location":"microservices/configuration/CommonCommandLineOptions/#overwrite","title":"Overwrite","text":"<p><code>-o/--overwrite</code></p> <p>Overwrite configuration in provider with local configuration.</p> <p>Use with cation</p> <p>This will clobber existing settings in provider, problematic if those settings were edited by hand intentionally. Typically only used during development.</p>"},{"location":"microservices/configuration/CommonCommandLineOptions/#help","title":"Help","text":"<p><code>-h/--help</code></p> <p>Show the help message</p>"},{"location":"microservices/configuration/CommonConfiguration/","title":"Common Configuration","text":"<p>The tables in each of the tabs below document configuration properties that are common to all services in the EdgeX Foundry platform. Service-specific properties can be found on the respective documentation page for each service.</p>"},{"location":"microservices/configuration/CommonConfiguration/#configuration-properties","title":"Configuration Properties","text":"<p>Edgex 2.0</p> <p>For EdgeX 2.0 the <code>Logging</code> and <code>Startup</code> sections have been removed. <code>Startup</code> has been replaced with the <code>EDGEX_STARTUP_DURATION</code> (default is 60 secs) and <code>EDGEX_STARTUP_INTERVAL</code> (default is 1 sec) environment variables.</p> WritableWritable.TelemetryServiceService.CORSConfigurationDatabases.PrimaryRegistryClients.[service-key]SecretStore Property Default Value Description entries in the Writable section of the configuration can be changed on the fly while the service is running if the service is running with the <code>-cp/--configProvider</code> flag LogLevel INFO log entry severity level.  Log entries not of the default level or higher are ignored. InsecureSecrets --- This section a map of secrets which simulates the SecretStore for accessing secrets when running in non-secure mode. All services have a default entry for Redis DB credentials called <code>redisdb</code> <p>Edgex 2.0</p> <p>For EdgeX 2.0 the <code>Writable.InsecureSecrets</code> configuration section is new. </p> Property Default Value Description Interval 30s The interval in seconds at which to report the metrics currently being collected and enabled. Value of 0s disables reporting. PublishTopicPrefix \"edgex/telemetry\" The base topic in which to publish (report) metrics currently being collected and enabled. <code>/&lt;service-name&gt;/&lt;metric-name&gt;</code> will be added to this base topic prefix. Metrics <code>&lt;Service dependent&gt;</code> Boolean map of service metrics that are being collected. The boolean flag for each indicates if the metric is enabled for reporting. i.e. <code>EventsPersisted = true</code>. The metric name must match one defined by the service. Tags <code>&lt;Service dependent&gt;</code> String map of arbitrary tags to be added to every metric that is reported for the service. i.e. <code>Gateway=\"my-iot-gateway\"</code>. The tag names are arbitrary. <p>Edgex 2.2</p> <p>For EdgeX 2.2 Service Metrics have been added. Currently only Core Data and Application Services are collecting service metrics.</p> Property Default Value Description HealthCheckInterval 10s The interval in seconds at which the service registry(Consul) will conduct a health check of this service. Host localhost Micro service host name Port --- Micro service port number (specific for each service) ServerBindAddr '' (empty string) The interface on which the service's REST server should listen. By default the server is to listen on the interface to which the <code>Host</code> option resolves (leaving it blank). A value of <code>0.0.0.0</code> means listen on all available interfaces. App &amp; Device service do not implement this setting StartupMsg --- Message logged when service completes bootstrap start-up MaxResultCount 1024* Read data limit per invocation. *Default value is for core/support services. Application and Device services do not implement this setting. MaxRequestSize 0 Defines the maximum size of http request body in kilbytes. 0 represents default to system max. RequestTimeout 5s Specifies a timeout duration for handling requests <p>Edgex 2.0</p> <p>For EdgeX 2.0 <code>Protocol</code> and <code>BootTimeout</code>  have been removed. <code>CheckInterval</code> and  <code>Timeout</code> have been renamed to <code>HealthCheckInterval</code> and <code>RequestTimeout</code> respectively. <code>MaxRequestSize</code> was added for all services.</p> <p>Edgex 2.2</p> <p>For EdgeX 2.2 Service MaxRequestSize has been implemented to all services, and the unit is kilobyte.</p> Property Default Value Description The settings of controling CORS http headers EnableCORS false Enable or disable CORS support. CORSAllowCredentials false The value of <code>Access-Control-Allow-Credentials</code> http header. It appears only if the value is <code>true</code>. CORSAllowedOrigin \"https://localhost\" The value of <code>Access-Control-Allow-Origin</code> http header. CORSAllowedMethods \"GET, POST, PUT, PATCH, DELETE\" The value of <code>Access-Control-Allow-Methods</code> http header. CORSAllowedHeaders \"Authorization, Accept, Accept-Language, Content-Language, Content-Type, X-Correlation-ID\" The value of <code>Access-Control-Allow-Headers</code> http header. CORSExposeHeaders \"Cache-Control, Content-Language, Content-Length, Content-Type, Expires, Last-Modified, Pragma, X-Correlation-ID\" The value of <code>Access-Control-Expose-Headers</code> http header. CORSMaxAge 3600 The value of <code>Access-Control-Max-Age</code> http header. <p>Edgex 2.1</p> <p>New for EdgeX 2.1 is the ability to enable CORS access to EdgeX microservices through configuration. </p> <p>To understand more details about these HTTP headers, please refer to MDN Web Docs, and refer to CORS enabling to learn more.</p> Property Default Value Description configuration that govern database connectivity and the type of database to use. While not all services require DB connectivity, most do and so this has been included in the common configuration docs. Host localhost DB host name Port 6379 DB port number Name ---- Database or document store name (Specific to the service) Timeout 5000 DB connection timeout Type redisdb DB type.  Redis is the only supported DB <p>Edgex 2.0</p> <p>For EdgeX 2.0 <code>mongodb</code> has been remove as a supported DB. The credentials <code>username</code> and <code>password</code> have been removed and are now in the <code>Writable.InsecureSecrets.DB</code> section.</p> Property Default Value Description this configuration only takes effect when connecting to the registry for configuration info Host localhost Registry host name Port 8500 Registry port number Type consul Registry implementation type Property Default Value Description Each service has it own collect of Clients that it uses Protocol http The protocol to use when building a URI to local the service endpoint Host localhost The host name or IP address where the service is hosted Port 598xx The port exposed by the target service <p>Edgex 2.0</p> <p>For EdgeX 2.0 the map keys have changed to be the service's service-key, i.e. <code>Metadata</code> changed to <code>core-metadata</code></p> Property Default Value Description these config values are used when security is enabled and <code>SecretStore</code> service access is required for obtaining secrets, such as database credentials Type vault The type of the <code>SecretStore</code> service to use. Currenly only <code>vault</code> is supported. Host localhost The host name or IP address associated with the <code>SecretStore</code> service Port 8200 The configured port on which the <code>SecretStore</code> service is listening Path <code>&lt;service-key&gt;</code>/ The service-specific path where the secrets are kept. This path will differ according to the given service. Protocol http The protocol to be used when communicating with the <code>SecretStore</code> service RootCaCertPath blank Default is to not use HTTPS ServerName blank Not needed for HTTP TokenFile /tmp/edgex/secrets/<code>&lt;service-key&gt;</code>/secrets-token.json Fully-qualified path to the location of the service's <code>SecretStore</code> access token. This path will differ according to the given service. SecretsFile blank Fully-qualified path to the location of the service's JSON secrets file  contains secrets to seed at start-up. See Seeding Service Secrets section for more details on seed a service's secrets. DisableScrubSecretsFile false Controls if the secrets file is scrubbed (secret data remove) and rewritten after importing the secrets. Authentication AuthType X-Vault-Token A header used to indicate how the given service will authenticate with the <code>SecretStore</code> service <p>Edgex 2.0</p> <p>For EdgeX 2.0 the <code>Protocol</code> default has changed to <code>HTTP</code> which no longer requires <code>RootCaCertPath</code> and <code>ServerName</code> to be set. <code>Path</code> has been reduce to the sub-path for the service since the based path is fixed. <code>TokenFile</code> default value has changed and requires the <code>service-key</code> be used in the path.</p>"},{"location":"microservices/configuration/CommonConfiguration/#writable-vs-readable-settings","title":"Writable vs Readable Settings","text":"<p>Within a given service's configuration, there are keys whose values can be edited and change the behavior of the service while it is running versus those that are effectively read-only. These writable settings are grouped under a given service key. For example, the top-level groupings for edgex-core-data are:</p> <ul> <li>/edgex/core/2.0/edgex-core-data/Writable</li> <li>/edgex/core/2.0/edgex-core-data/Service</li> <li>/edgex/core/2.0/edgex-core-data/Clients</li> <li>/edgex/core/2.0/edgex-core-data/Databases</li> <li>/edgex/core/2.0/edgex-core-data/MessageQueue</li> <li>/edgex/core/2.0/edgex-core-data/Registry</li> <li>/edgex/core/2.0/edgex-core-data/SecretStore</li> </ul> <p>Any configuration settings found in a service's <code>Writable</code> section may be changed and affect a service's behavior without a restart. Any modifications to the other settings (read-only configuration) would require a restart.</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/","title":"Common Environment Variables","text":"<p>There are two types of environment variables used by all EdgeX services. They are <code>standard</code> and <code>overrides</code>. The only difference is that the <code>overrides</code> apply to command-line options and service configuration settings where as <code>standard</code> do not have any corresponding command-line option or configuration setting.</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#standard-environment-variables","title":"Standard Environment Variables","text":"<p>This section describes the <code>standard</code> environment variables common to all EdgeX services. Some service may have additional  <code>standard</code> environment variables which are documented in those service specific sections.</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_security_secret_store","title":"EDGEX_SECURITY_SECRET_STORE","text":"<p>This environment variables indicates whether the service is expected to initialize the secure SecretStore which allows the service to access secrets from Vault. Defaults to <code>true</code> if not set or not set to <code>false</code>. When set to <code>true</code> the EdgeX security services must be running. If running EdgeX in <code>non-secure</code> mode you then want this explicitly set to <code>false</code>.</p> <p>Example - Using docker-compose to disable secure SecretStore</p> <pre><code>environment: EDGEX_SECURITY_SECRET_STORE: \"false\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 when running in secure mode Consul is secured,  which requires all services to have this environment variable be <code>true</code> so they can request their Consul access token from Vault. See the Secure Consul section for more details.</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_startup_duration","title":"EDGEX_STARTUP_DURATION","text":"<p>This environment variable sets the total duration in seconds allowed for the services to complete the bootstrap start-up. Default is 60 seconds.</p> <p>Example - Using docker-compose to set start-up duration to 120 seconds</p> <pre><code>environment: EDGEX_STARTUP_DURATION: \"120\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the deprecated lower case version <code>startup_duration</code> has been removed</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_startup_interval","title":"EDGEX_STARTUP_INTERVAL","text":"<p>This environment variable sets the retry interval in seconds for the services retrying a failed action during the bootstrap start-up. Default is 1 second.</p> <p>Example - Using docker-compose to set start-up interval to 3 seconds</p> <pre><code>environment: EDGEX_STARTUP_INTERVAL: \"3\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the deprecated lower case version <code>startup_interval</code> has been removed</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#environment-overrides","title":"Environment Overrides","text":"<p>There are two types of environment overrides which are <code>command-line</code> and <code>configuration</code>. </p> <p>Important</p> <p>Environment variable overrides have precedence over all command-line, local configuration and remote configuration. i.e. configuration setting changed in Consul will be overridden after the service loads the configuration from Consul if that setting has an environment override.</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#command-line-overrides","title":"Command-line Overrides","text":""},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_conf_dir","title":"EDGEX_CONF_DIR","text":"<p>This environment variable overrides the <code>-c/--confdir</code> command-line option. </p> <p>Note</p> <p>All EdgeX service Docker images have this option set to <code>/res</code>.</p> <p>Example - Using docker-compose to override the configuration folder name</p> <pre><code>environment: EDGEX_CONF_DIR: \"/my-config\"\n</code></pre>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_config_file","title":"EDGEX_CONFIG_FILE","text":"<p>This environment variable overrides the <code>-f/--file</code> command-line option.</p> <p>Example - Using docker-compose to override the configuration file name used</p> <pre><code>environment: EDGEX_CONFIG_FILE: \"my-config.toml\"\n</code></pre>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_configuration_provider","title":"EDGEX_CONFIGURATION_PROVIDER","text":"<p>This environment variable overrides the <code>-cp/--configProvider</code> command-line option. </p> <p>Note</p> <p>All EdgeX service Docker images have this option set to <code>-cp=consul.http://edgex-core-consul:8500</code>.</p> <p>Example - Using docker-compose to override with different port number</p> <pre><code>environment: EDGEX_CONFIGURATION_PROVIDER: \"consul.http://edgex-consul:9500\"\n</code></pre>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_profile","title":"EDGEX_PROFILE","text":"<p>This environment variable overrides the <code>-p/--profile</code> command-line option. When non-empty,  the value is used in the path to the configuration file. i.e. /res/my-profile/configuation.toml.  This is useful when running multiple instances of a service such as App Service Configurable.</p> <p>Example - Using docker-compose to override the profile to use</p> <pre><code>app-service-rules:\nimage: edgexfoundry/docker-app-service-configurable:2.0.0\nenvironment: EDGEX_PROFILE: \"rules-engine\"\n...\n</code></pre> <p>This sets the <code>profile</code> so that the App Service Configurable uses the <code>rules-engine</code> configuration profile which resides at <code>/res/rules-engine/configuration.toml</code></p> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the deprecated lower case version <code>edgex_profile</code> has been removed</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#edgex_use_registry","title":"EDGEX_USE_REGISTRY","text":"<p>This environment variable overrides the <code>-r/--registry</code> command-line option. </p> <p>Note</p> <p>All EdgeX service Docker images have this option set to <code>--registry</code>.</p> <p>Example - Using docker-compose to override use of the Registry</p> <pre><code>environment: EDGEX_USE_REGISTRY: \"false\"\n</code></pre> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the deprecated lower case version <code>edgex_registry</code> has been removed</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#configuration-overrides","title":"Configuration Overrides","text":"<p>Any configuration setting from a service's <code>configuration.toml</code> file can be overridden by environment variables. The environment variable names have the following format:</p> <pre><code>&lt;TOM-SECTION-NAME&gt;_&lt;TOML-KEY-NAME&gt;\n&lt;TOML-SECTION-NAME&gt;_&lt;TOML-SUB-SECTION-NAME&gt;_&lt;TOML-KEY-NAME&gt;\n</code></pre> <p>EdgeX 2.0</p> <p>With EdgeX 2.0 the use of CamelCase environment variable names is no longer supported. Instead the variable names must be all uppercase as in the example below. Also the using of dash <code>-</code> in the TOML-NAME is converted to an underscore <code>_</code> in the environment variable name.</p> <p>Example - Environment Overrides of Configuration</p> <pre><code>``` toml   TOML   : [Writable]    LogLevel = \"INFO\"    ENVVAR : WRITABLE_LOGLEVEL=DEBUG    TOML   : [Clients]\n[Clients.core-data]\nHost = \"localhost\"\nENVVAR : CLIENTS_CORE_DATA_HOST=edgex-core-data    ```    </code></pre>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#notable-configuration-overrides","title":"Notable Configuration Overrides","text":"<p>This section describes environment variable overrides that have special utility, such as enabling a debug capability or facilitating code development.</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#kong_ssl_cipher_suite-edgex-kong-service","title":"KONG_SSL_CIPHER_SUITE (edgex-kong service)","text":"<p>This variable controls the TLS cipher suite and protocols supported by the EdgeX API Gateway as implemented by Kong. This variable, if unspecified, selects the <code>\"intermediate\"</code> cipher suite which supports TLSv1.2, TLSv1.3, and relatively modern TLS ciphers. The EdgeX framework by default overrides this value to <code>\"modern\"</code>, which currently enables only TLSv1.3 and a fixed cipher suite. The <code>\"modern\"</code> cipher suite is known to be incompatible with older web browsers, but since the target use of the API gateway is to support API clients, not browsers, this behavior was deemed acceptable by the EdgeX Security Working Group on September 8, 2021.</p>"},{"location":"microservices/configuration/CommonEnvironmentVariables/#tokenfileprovider_defaulttokenttl-security-secretstore-setup-service","title":"TOKENFILEPROVIDER_DEFAULTTOKENTTL (security-secretstore-setup service)","text":"<p>This variable controls the TTL of the default secretstore tokens that are created for EdgeX microservices. This variable defaults to <code>1h</code> (one hour) if unspecified. It is often useful when developing a new microservice to set this value to a higher value, such as <code>12h</code>. This higher value will allow the secret store token to remain valid long enough for a developer to get a new microservice working and into a state where it can renew its own token. (All secret store tokens in EdgeX expire if not renewed periodically.)</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/","title":"Configuration and Registry Providers","text":""},{"location":"microservices/configuration/ConfigurationAndRegistry/#introduction","title":"Introduction","text":"<p>The EdgeX registry and configuration service provides other EdgeX Foundry micro services with information about associated services within EdgeX Foundry (such as location and status) and  configuration properties (i.e. - a repository of initialization and operating values).  Today, EdgeX Foundry uses Consul by Hashicorp as its reference implementation configuration and registry providers.  However, abstractions are in place so that these functions could be provided by an alternate implementation.  In fact, registration and configuration could be provided by different services under the covers.  For more, see the Configuration Provider and Registry Provider sections in this page.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#configuration","title":"Configuration","text":"<p>Please refer to the EdgeX Foundry architectural decision record for details (and design decisions) behind the configuration in EdgeX.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#local-configuration","title":"Local Configuration","text":"<p>Because EdgeX Foundry may be deployed and run in several different ways, it is important to understand how configuration is loaded and from where it is sourced. Referring to the cmd directory within the edgex-go repository , each service has its own folder. Inside each service folder there is a <code>res</code> directory (short for \"resource\"). There you will find the configuration files in TOML format that defines each service's configuration. A service may support several different configuration profiles, such as a App Service Configurable does. In this case, the configuration file located directly in the <code>res</code> directory should be considered the default configuration profile. Sub-directories will contain configurations appropriate to the respective profile.</p> <p>As of the Geneva release, EdgeX recommends using environment variable overrides instead of creating profiles to override some subset of config values. App Service Configurable is an exception to this as this is how it defined unique instances using the same executable.</p> <p>If you choose to use profiles as described above, the config profile can be indicated using one of the following command line flags:</p> <p><code>--profile / -p</code></p> <p>Taking the <code>Core Data</code> and <code>App Service Configurable</code> services as an examples:</p> <ul> <li><code>./core-data</code> starts the service using the default profile found locally</li> <li><code>./app-service-configurable --profile=rules-engine</code> starts the service using the <code>rules-engine</code> profile found locally</li> </ul> <p>Note</p> <p>Again, utilizing environment variables for configuration overrides is the recommended path. Config profiles, for the most part, are not used.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#seeding-configuration","title":"Seeding Configuration","text":"<p>When utilizing the centralized configuration management for the EdgeX Foundry micro services, it is necessary to seed the required configuration before starting the services. Each service has the built-in capability to perform this seeding operation. A service will use its local configuration file to initialize the structure and relevant values, and then overlay any environment variable override values as specified. The end result will be seeded into the configuration provider if such is being used.</p> <p>In order for a service to seed/load the configuration to/from the configuration provider, use one of the following flags:</p> <p><code>--configProvider / -cp</code></p> <p>Again, taking the <code>core-data</code> service as an example:</p> <p><code>./core-data -cp=consul.http://localhost:8500</code> will start the service using configuration values found in the provider or seed them if they do not exist. </p> <p>Note</p> <p>Environment overrides are also applied after the configuration is loaded from the configuration provider. </p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#configuration-structure","title":"Configuration Structure","text":"<p>Configuration information is organized into a hierarchical structure allowing for a logical grouping of services, as well as versioning, beneath an \"edgex\" namespace at root level of the configuration tree. The root namespace separates EdgeX Foundry-related configuration information from other applications that may be using the same configuration provider. Below the root, sub-nodes facilitate grouping of device services, core/support/security services, app services, etc. As an example, the top-level nodes shown when one views the configuration registry might be as follows:</p> <ul> <li>edgex (root namespace)<ul> <li>core (core/support/security services)</li> <li>devices (device services)</li> <li>appservices (application services)</li> </ul> </li> </ul>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#versioning","title":"Versioning","text":"<p>Incorporating versioning into the configuration hierarchy looks like this.</p> <ul> <li>edgex (root namespace)<ul> <li>core (core/support/security services)<ul> <li>2.0<ul> <li>core-command</li> <li>core-data</li> <li>core-metadata</li> <li>support-notifications</li> <li>support-scheduler</li> <li>sys-mgmt-agent</li> </ul> </li> <li>3.0</li> </ul> </li> <li>devices (device services)<ul> <li>2.0<ul> <li>device-mqtt</li> <li>device-virtual</li> <li>device-modbus</li> </ul> </li> <li>3.0</li> </ul> </li> <li>appservices (application services)<ul> <li>2.0<ul> <li>app-rules-engine</li> </ul> </li> <li>3.0</li> </ul> </li> </ul> </li> </ul> <p>EdgeX 2.0</p> <p>For EdgeX 2.0 the version number in the path is now <code>2.0</code> and the service keys are now used for the service names.</p> <p>The versions shown correspond to major versions of the given services. For all minor/patch versions associated with a major version, the respective service keys live under the major version in configuration (such as 2.0). Changes to the configuration structure that may be required during the associated minor version development cycles can only be additive. That is, key names will not be removed or changed once set in a major version.  Furthermore, sections of the configuration tree cannot be moved from one place to another. In this way, backward compatibility for the lifetime of the major version is maintained.</p> <p>An advantage of grouping all minor/patch versions under a major version involves end-user configuration changes that need to be persisted during an upgrade. A service on startup will not overwrite existing configuration when it runs unless explicitly told to do so via the <code>--overwrite / -o</code> command line flag. Therefore if a user leaves their configuration provider running during an EdgeX Foundry upgrade any customization will be left in place. Environment variable overrides such as those supplied in the docker-compose for a given release will always override existing content in the configuration provider.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#configuration-provider","title":"Configuration Provider","text":"<p>You can supply and manage configuration in a centralized manner by utilizing the <code>-cp/--configProvider</code> flag when starting a service. If the flag is provided and points to an application such as HashiCorp's Consul, the service will bootstrap its configuration into the provider, if it doesn't exist. If configuration does already exist, it will load the content from the given location applying any environment variables overrides of which the service is aware. Integration with the configuration provider is handled through the go-mod-configuration module referenced by all services.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#registry-provider","title":"Registry Provider","text":"<p>The registry refers to any platform you may use for service discovery. For the EdgeX Foundry reference implementation, the default provider for this responsibility is Consul. Integration with the registry is handled through the go-mod-registry module referenced by all services.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#introduction-to-registry","title":"Introduction to Registry","text":"<p>The objective of the registry is to enable micro services to find and to communicate with each other. When each micro service starts up, it registers itself with the registry, and the registry continues checking its availability periodically via a specified health check endpoint. When one micro service needs to connect to another one, it connects to the registry to retrieve the available host name and port number of the target micro service and then invokes the target micro service. The following figure shows the basic flow.</p> <p></p> <p>Consul is the default registry implementation and provides native features for service registration, service discovery, and health checking. Please refer to the Consul official web site for more information:</p> <p>https://www.consul.io</p> <p>Physically, the \"registry\" and \"configuration\" management services are combined and running on the same Consul server node.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#web-user-interface","title":"Web User Interface","text":"<p>A web user interface is also provided by Consul. Users can view the available service list and their health status through the web user interface. The web user interface is available at the /ui path on the same port as the HTTP API. By default this is http://localhost:8500/ui. For more detail, please see:</p> <p>https://www.consul.io/intro/getting-started/ui.html</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#running-on-docker","title":"Running on Docker","text":"<p>For ease of use to install and update, the microservices of EdgeX Foundry are published as Docker images onto Docker Hub and compose files that allow you to run EdgeX and dependent service such as Consul. These compose files can be found here in the edgex-compose repository. See the Getting Started using Docker for more details.</p> <p>Once the EdgeX stack is running in docker verify Consul is running by going to  http://localhost:8500/ui in your browser.</p>"},{"location":"microservices/configuration/ConfigurationAndRegistry/#running-on-local-machine","title":"Running on Local Machine","text":"<p>To run Consul on the local machine, following these steps:</p> <ol> <li>Download the binary from Consul official website:     https://www.consul.io/downloads.html. Please choose the correct     binary file according to the operation system.</li> <li>Set up the environment variable. Please refer to     https://www.consul.io/intro/getting-started/install.html.</li> <li> <p>Execute the following command:</p> <pre><code>consul agent -data-dir \\${DATA_FOLDER} -ui -advertise 127.0.0.1 -server -bootstrap-expect 1\n\n# ${DATA_FOLDER} could be any folder to put the data files of Consul and it needs the read/write permission.\n</code></pre> </li> <li> <p>Verify the result: http://localhost:8500/ui</p> </li> </ol>"},{"location":"microservices/configuration/V2MigrationCommonConfig/","title":"V2 Migration of Common Configuration","text":"<p>EdgeX 2.0</p> <p>For EdgeX 2.0 there have been many breaking changes made to the configuration for all services. </p> <p>This section describes how to migrate the configuration sections that are common to all services. This information only applies if you have existing 1.x configuration that you have modified and need to migrate, rather than use the new V2 version of the configuration and modify it as needed.  </p>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#writable","title":"Writable","text":"<p>The <code>Writable</code> section has the new InsecureSecrets sub-section. All services need the following added so they can access the Database and/or MessageBus :</p> <pre><code>  [Writable.InsecureSecrets]\n[Writable.InsecureSecrets.DB]\npath = \"redisdb\"\n[Writable.InsecureSecrets.DB.Secrets]\nusername = \"\"\npassword = \"\"\n</code></pre>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#logging","title":"Logging","text":"<p>Remove the <code>[Logging]</code> section.</p>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#service","title":"Service","text":"<p>The service section is now common to all EdgeX services. The migration to this new version slightly differs for each class of service, i.e. Core/Support, Device or Application Service. The sub-sections below describe the migration for each class.</p>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#coresupport","title":"Core/Support","text":"<p>For the Core/Support services the following changes are required:</p> <ol> <li>Remove <code>BootTimeout</code></li> <li>Remove <code>Protocol</code></li> <li>Rename <code>CheckInterval</code> to <code>HealthCheckInterval</code></li> <li>Rename <code>Timeout</code> to <code>RequestTimeout</code> and change value to be duration string. i.e <code>5000</code> changes to <code>5s</code></li> <li>Add <code>MaxRequestSize</code> with value of <code>0</code></li> <li><code>Port</code> value changes to be in proper range for new port assignments. See Port Assignments (TBD) section for more details</li> </ol>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#device","title":"Device","text":"<p>For Device service the changes are the same as Core/Support above plus the following:</p> <ol> <li>Remove <code>ConnectRetries</code></li> <li>Move  <code>EnableAsyncReadings</code> to be under the <code>[Device]</code> section</li> <li>Move <code>AsyncBufferSize</code> to be under the <code>[Device]</code> section</li> <li>Move <code>labels</code> to be under the <code>[Device]</code> section</li> </ol>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#application","title":"Application","text":"<p>For Application services the changes are the same as Core/Support above plus the following:</p> <ol> <li>Remove <code>ReadMaxLimit</code></li> <li>Remove <code>ClientMonitor</code></li> <li>Add <code>ServerBindAddr = \"\" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen</code></li> <li>Add <code>MaxResultCount</code> and set value to <code>0</code> </li> </ol>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#databases","title":"Databases","text":"<p>Remove the <code>Username</code> and  <code>Password</code>  settings </p>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#registry","title":"Registry","text":"<p>No changes</p>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#clients","title":"Clients","text":"<p>The map key names have changed to uses the service key for each of the target services. Each client entry must be changed to use the appropriate service key as follows:</p> <ol> <li><code>CoreData</code> =&gt; <code>core-data</code></li> <li><code>Metadata</code> =&gt; <code>core-metadata</code></li> <li><code>Command</code> =&gt; <code>core-command</code></li> <li><code>Notifications</code> =&gt; <code>support-notifications</code></li> <li><code>Scheduler</code> =&gt; <code>support-scheduler</code></li> </ol> <p>Remove the <code>[Clients.Logging]</code> section</p>"},{"location":"microservices/configuration/V2MigrationCommonConfig/#secretstore","title":"SecretStore","text":"<p>All service now require the <code>[SecretStore]</code> section. For those that did not have it previously add the following replacing <code>&lt;service-key&gt;</code> with the service's actual service key:</p> <pre><code>[SecretStore]\nType = 'vault'\nProtocol = 'http'\nHost = 'localhost'\nPort = 8200\nPath = '&lt;service-key&gt;/'\nTokenFile = '/tmp/edgex/secrets/&lt;service-key&gt;/secrets-token.json'\nRootCaCertPath = ''\nServerName = ''\n  [SecretStore.Authentication]\n  AuthType = 'X-Vault-Token'\n</code></pre> <p>For those service that previously had the <code>[SecretStore]</code> section, make the following changes replacing <code>&lt;service-key&gt;</code> with the service's actual service key:</p> <ol> <li>Add the <code>Type = 'vault'</code> setting</li> <li>Remove <code>AdditionalRetryAttempts</code></li> <li>Remove <code>RetryWaitPeriod</code></li> <li>Change <code>Protocol</code> value to be <code>'http'</code></li> <li>Change <code>Path</code> value to be  <code>'&lt;service-key&gt;/'</code></li> <li>Change <code>TokenFile</code> value to be <code>'/tmp/edgex/secrets/&lt;service-key&gt;/secrets-token.json'</code></li> <li>Change <code>RootCaCertPath</code> value to be empty, i.e <code>''</code></li> <li>Change <code>ServerName</code> value to be empty, i.e <code>''</code></li> </ol>"},{"location":"microservices/core/Ch-CoreServices/","title":"Core Services","text":"<p>Core services provide the intermediary between the north and south sides of EdgeX.  As the name of these services implies, they are \u201ccore\u201d to EdgeX functionality.  Core services is where the innate knowledge of \u201cthings\u201d connected, sensor data collected, and EdgeX configuration resides.  Core consists of the following micro services:</p> <ul> <li>Core data: a persistence repository and associated management service for data collected from south side objects.</li> <li>Command: a service that facilitates and controls actuation requests from the north side to the south side.</li> <li>Metadata: a repository and associated management service of metadata about the objects that are connected to EdgeX Foundry. Metadata provides the capability to provision new devices and pair them with their owning device services.</li> <li>Registry and Configuration: provides other EdgeX Foundry micro services with information about associated services within the system and micro services configuration properties (i.e. - a repository of initialization values).</li> </ul>"},{"location":"microservices/core/command/Ch-Command/","title":"Command","text":""},{"location":"microservices/core/command/Ch-Command/#introduction","title":"Introduction","text":"<p>The command micro service (often called the command and control micro service) enables the issuance of commands or actions to devices on behalf of:</p> <ul> <li>other micro services within EdgeX Foundry (for example, an edge     analytics or rules engine micro service)</li> <li>other applications that may exist on the same system with EdgeX     Foundry (for example, a management agent that needs to     shutoff a sensor)</li> <li>To any external system that needs to command those devices (for     example, a cloud-based application that determined the need to     modify the settings on a collection of devices)</li> </ul> <p>The command micro service exposes the commands in a common, normalized way to simplify communications with the devices. There are two types of commands that can be sent to a device.</p> <ul> <li>a GET command requests data from the device.  This is often used to request the latest sensor reading from the device.</li> <li>SET commands request to take action or actuate the device or to set some configuration on the device.</li> </ul> <p>In most cases, GET commands are simple requests for the latest sensor reading from the device.  Therefore, the request is often parameter-less (requiring no parameters or body in the request).  SET commands require a request body where the body provides a key/value pair array of values used as parameters in the request (i.e. <code>{\"additionalProp1\": \"string\", \"additionalProp2\": \"string\"}</code>).</p> <p>EdgeX 2.1</p> <p>v2.1 supports a new value type, <code>Object</code>, to present the structral value instead of encoding it as string for both SET and GET commands, for example, the SET command parameter might be <code>{\"Location\": {\"latitude\": 39.67872546666667, \"longitude\": -104.97710646666667}}</code>.</p> <p>The command micro service gets its knowledge about the devices from the metadata service. The command service always relays commands (GET or SET) to the devices through the device service.  The command service never communicates directly to a device. Therefore, the command micro service is a proxy service for command or action requests from the north side of EdgeX (such as analytic or application services) to the protocol-specific device service and associated device.</p> <p>While not currently part of its duties, the command service could provide a layer of protection around device.  Additional security could be added that would not allow unwarranted interaction with the devices (via device service).  The command service could also regulate the number of requests on a device do not overwhelm the device - perhaps even caching responses so as to avoid waking a device unless necessary.</p>"},{"location":"microservices/core/command/Ch-Command/#data-model","title":"Data Model","text":"<p>EdgeX 2.0</p> <p>While the general concepts of core command's GET/PUT requests are the same, the core command request/response models has changed significantly in EdgeX 2.0.  Consult the API documentation for details.</p>"},{"location":"microservices/core/command/Ch-Command/#data-dictionary","title":"Data Dictionary","text":"DeviceProfileDeviceCoreCommandCoreCommandCoreCommandParameters Property Description Id uniquely identifies the device, a UUID for example Description Name Name for identifying a device Manufacturer Manufacturer of the device Model Model of the device Labels Labels used to search for groups of profiles DeviceResources deviceResource collection DeviceCommands collect of deviceCommand Property Description DeviceName reference to a device by name ProfileName reference to a device profile by name CoreCommands array of core commands Property Description Name Get bool indicating a get command Set bool indicating a set command Path Url Parameters array of core command parameters Property Description ResourceName ValueType"},{"location":"microservices/core/command/Ch-Command/#high-level-interaction-diagrams","title":"High Level Interaction Diagrams","text":"<p>The two following High Level Diagrams show:</p> <ul> <li>Issue a PUT command</li> <li>Get a list of devices and the available commands</li> </ul> <p>Command PUT Request</p> <p></p> <p>Request for Devices and Available Commands</p> <p></p>"},{"location":"microservices/core/command/Ch-Command/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Common Configuration documentation for configuration properties common to all services. Core Command no longer has any additional settings.</p>"},{"location":"microservices/core/command/Ch-Command/#v2-configuration-migration-guide","title":"V2 Configuration Migration Guide","text":"<p>Refer to the Common Configuration Migration Guide for details on migrating the common configuration sections such as <code>Service</code>.</p>"},{"location":"microservices/core/command/Ch-Command/#api-reference","title":"API Reference","text":"<p>Core Command API Reference</p>"},{"location":"microservices/core/data/Ch-CoreData/","title":"Core Data","text":""},{"location":"microservices/core/data/Ch-CoreData/#introduction","title":"Introduction","text":"<p>The core data micro service provides centralized persistence for data collected by devices.  Device services that collect sensor data call on the core data service to store the sensor data on the edge system (such as in a gateway) until the data gets moved \"north\" and then exported to Enterprise and cloud systems.  Core data persists the data in a local database.  Redis is used by default, but a database abstraction layer allows for other databases to be used.</p> <p>Other services and systems, both within EdgeX Foundry and outside of EdgeX Foundry, access the sensor data through the core data service. Core data could also provide a degree of security and protection of the data collected while the data is at the edge.</p> <p>EdgeX 2.0</p> <p>As of EdgeX 2.0 (Ireland), core data is completely optional.  Device services can send data via message bus directly to application services.  If local persistence is not needed, the service can be removed.</p> <p>If persistence is needed, sensor data can be sent via message bus to core data (the new default means to communicate with core data) or can be sent via REST to core data (the legacy way to send data to core data).  See below for more details.</p> <p>Sensor data can be sent to core data via two different means:</p> <ol> <li> <p>Services (like devices services) and other systems can put sensor data on a message bus topic and core data can be configured to subscribed to that topic.  This is the default means of getting data to core data.  Any service (like an application service or rules engine service) or 3rd system could also subscribe to the same topic.  If the sensor data does not need to persisted locally, core data does not have to subscribe to the message bus topic - making core data completely optional.  By default, the message bus is implemented using Redis Pub/Sub.  MQTT can be used as an alternate message bus implementation.</p> <p></p> </li> <li> <p>Services and systems can call on the core data REST API to send data to core data and have the data put in local storage.  Prior to EdgeX 2.0, this was the default and only means to send data to core data.  Today, it is an alternate means to send data to core data.  When data is sent via REST to core data, core data re-publishes the data on to message bus so that other services can subscribe to it. </p> <p></p> </li> </ol> <p>Core data moves data to the application service (and edge analytcs) via Redis Pub/Sub by default. MQTT or ZeroMQ can alternately be used.  Use of MQTT requires the installation of a broker such as ActiveMQ.  A messaging infrastructure abstraction is in place that allows for other message bus (e.g., AMQP) implementations to be created and used.</p>"},{"location":"microservices/core/data/Ch-CoreData/#core-data-streaming","title":"Core Data \"Streaming\"","text":"<p>By default, core data persists all data sent to it by services and other systems. However, when the data is too sensitive to keep at the edge, or there is no use for the data at the edge by other local services (e.g., by an analytics micro service), the data can be \"streamed\" through core data without persisting it. A configuration change to core data (Writable.PersistData=false) has core data send data to the application services without persisting the data. This option has the advantage of reducing latency through this layer and storage needs at the network edge.  But the cost is having no historical data to use for analytics that need to look back in time to make a decision.</p> <p>Note</p> <p>When persistence is turned off via the PersistData flag, it is off for all devices.  At this time, you cannot specify which device data is persisted and which device data is not.  Application services do allow filtering of device data before it is exported or sent to another service like the rules engine, but this is not based on whether the data is persisted or not.</p> <p>EdgeX 2.0</p> <p>As mentioned, as of EdgeX 2.0 (Ireland), core data is completely optional.  Therefore, if persistence is not needed, and if sensor data is sent from device services directly to application services via message bus, core data can be removed.  In addition to reducing resource utilization (memory and CPU for core data), it also removes latency of throughput as the core data layer can be completely bypassed.  However, if device services are still using REST to send data into the system, core data is the central receiving endpoint and must remain in place; even if persistence is turned off.</p>"},{"location":"microservices/core/data/Ch-CoreData/#events-and-readings","title":"Events and Readings","text":"<p>Data collected from sensors is marshalled into EdgeX event and reading objects (delivered as JSON objects or a binary object encoded as CBOR to core data).  An event represents a collection of one or more sensor readings.  Some sensors or devices are only providing a single value \u2013 a single reading - at a time. Other sensors spew multiple values whenever they are read.</p> <p>An event must have at least one reading.  Events are associated to a sensor or device \u2013 the \u201cthing\u201d that sensed the environment and produced the readings.  Readings represent a sensing on the part of a device or sensor.  Readings only exist as part of (are owned by) an event.  Readings are essentially a simple key/value pair of what was sensed (the key - called a ResourceName) and the value sensed (the value).  A reading may include other bits of information to provide more context (for example, the data type of the value) for the users of that data.  Consumers of the reading data could include things like user interfaces, data visualization systems and analytics tools.</p> <p>In the diagram below, an example event/reading collection is depicted.  The event coming from the \u201cmotor123\u201d device has two readings (or sensed values).  The first reading indicates that the motor123 device reported the pressure of the motor was 1300 (the unit of measure might be something like PSI).</p> <p>EdgeX 2.0</p> <p>In EdgeX 2.0, Value Descriptors have been removed.  The ResourceName in a reading provides an indication of the data read.  The other properties of that were in Value Descriptor (min, max, default value, unit of measure, etc.) can all be obtained from the Resource (in core metadata's resource properties associated to each Resource which are associated to a device profile) by ResourceName.  ValueType property is also provided in the Reading so that the data type of the value is immediately available without having to do a lookup in core metadata.</p> <p></p> <p>The value type property (shown as type above) on the reading lets the consumer of the information know that the value is an integer, base 64.  The second reading indicates that the motor123 device also reported the temperature of the motor was 120 at the same time it reported the pressure (perhaps in degrees Fahrenheit).</p>"},{"location":"microservices/core/data/Ch-CoreData/#data-model","title":"Data Model","text":"<p>The following diagram shows the Data Model for core data.  Device services send Event objects containing a collection or Readings to core data when a device captures a sensor reading.</p> <p></p> <p>EdgeX 2.1</p> <p>v2.1 supports a new value type, <code>Object</code>, to present the structral reading value instead of encoding it as string. Similar to the <code>BinaryValue</code>, there is a new field <code>ObjectValue</code> in the Reading. If the ValueType is <code>Object</code>, the read value will be put into the <code>ObjectValue</code> field in JSON object data type.</p> <p>EdgeX 2.0</p> <p>Note that ValueDescriptor has been removed from this model as Value Descriptors have been removed in EdgeX 2 (see note above for more details). </p>"},{"location":"microservices/core/data/Ch-CoreData/#data-dictionary","title":"Data Dictionary","text":"EventReading Property Description Event represents a single measurable event read from a device.  Event has a one-to-many relationship with Reading. ID Uniquely identifies an event, for example a UUID. DeviceName DeviceName identifies the source of the event; the device's name. ProfileName Identifies the name of the device profile associated with the device and corresponding resources collected in the readings of the event. SourceName Name of the source request from the device profile (ResourceName or Command) associated to the reading. Origin A timestamp indicating when the original event/reading took place.  Most of the time, this indicates when the device service collected/created the event. Tags An arbitrary set of labels or additional information associated with the event.  It can be used, for example, to add location information (like GPS coordinates) to the event. Readings A collection (one to many) of associated readings of a given event. Property Description ID Uniquely identifies a reading, for example a UUID. DeviceName DeviceName identifies the source of the reading; the device's name. ProfileName Identifies the name of the device profile associated with the device and corresponding resource collected in the reading. Origin A timestamp indicating when the original event/reading took place.  Most of the time, this indicates when the device service collected/created the event. ResourceName ResourceName-Value provide the key/value pair of what was sensed by a device.  ResourceName specifies what was the value collected.  ResourceName should match a device resource name in the device profile. Value The sensor data value ValueType The type of the sensor data - from a list of allowed value types that includes Bool, String, Uint8, Int8, ... BinaryValue Byte array of sensor data when the data captured is not structured; for example an image is captured.  This information is not persisted in the Database and is expected to be empty when retrieving a Reading for the ValueType of Binary. MediaType Indicating the type of binary data when collected. ObjectValue Complex value of sensor data when the data captured is structured; for example a BACnet date object: <code>\"date\":{ \"year\":2021, \"month\":8, \"day\":26, \"wday\":4 }</code>.  This is expected to be empty when the Reading for the ValueType is not <code>Object</code>."},{"location":"microservices/core/data/Ch-CoreData/#high-level-interaction-diagrams","title":"High Level Interaction Diagrams","text":"<p>The two following High Level Interaction Diagrams show:</p> <ul> <li>How new sensor readings are collected by a device and added as event/readings to core data and the associated persistence store</li> <li>How a client (inside or outside of EdgeX) can query for events (in this case by device name)</li> </ul> <p>Core Data Add Sensor Readings</p> <p></p> <p>Core Data Request Event / Reading for a Device</p> <p></p>"},{"location":"microservices/core/data/Ch-CoreData/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Common Configuration documentation for configuration properties common to all services. Below are only the additional settings and sections that are not common to all EdgeX Services.</p> WritableWritable.TelemetryDatabases/Databases.PrimaryMessageQueueMessageQueue.OptionalMaxEventSize Property Default Value Description Writable properties can be set and will dynamically take effect without service restart PersistData true When true, core data persists all sensor data sent to it in its associated database Property Default Value Description See <code>Writable.Telemetry</code> at Common Configuration for the Telemetry configuration common to all services Metrics EventsPersisted = false ReadingsPersisted = false Service metrics that Core Data collects. Boolean value indicates if reporting of the metric is enabled. Tags <code>&lt;empty&gt;</code> List of arbitrary service level tags to included with every metric that is reported. i.e. <code>Gateway=\"my-iot-gateway\"</code> <p>Edgex 2.2</p> <p>For EdgeX 2.2 Collecting of the <code>EventsPersisted</code> and <code>ReadingsPersisted</code> Core Data Service Metrics have been added.</p> Property Default Value Description Name 'coredata' Document store or database name Property Default Value Description Entries in the MessageQueue section of the configuration allow for publication of events to a message bus Protocol redis Indicates the connectivity protocol to use when connecting to the bus. Host localhost Indicates the host of the messaging broker, if applicable. Port 6379 Indicates the port to use when publishing a message. Type redis Indicates the type of messaging library to use. Currently this is Redis by default. Refer to the go-mod-messaging module for more information. AuthMode usernamepassword Auth Mode to connect to EdgeX MessageBUs. SecretName redisdb Name of the secret in the Secret Store to find the MessageBus credentials. PublishTopicPrefix edgex/events/core Indicates the base topic to which messages should be published. /<code>&lt;device-profile-name&gt;/&lt;device-name&gt;</code> will be added to this Publish Topic prefix SubscribeEnabled true Indicates wether to subcribe to the EdgeX MessageBus or not. SubscribeTopic edgex/events/device/# Topis to use when subscribing to the EdgeX MessageBus Property Default Value Description Configuration and connection parameters for use with MQTT message bus - in place of Redis ClientId 'core-data' Client ID used to put messages on the bus Qos '0' Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once) KeepAlive '10' Period of time in seconds to keep the connection alive when there is no messages flowing (must be 2 or greater) Retained false Whether to retain messages AutoReconnect true Whether to reconnect to the message bus on connection loss ConnectTimeout 5 Message bus connection timeout in seconds SkipCertVerify false TLS configuration - Only used if Cert/Key file or Cert/Key PEMblock are specified Property Default Value Description MaxEventSize 25000 maximum event size in kilobytes accepted via REST or MessageBus. 0 represents default to system max."},{"location":"microservices/core/data/Ch-CoreData/#v2-configuration-migration-guide","title":"V2 Configuration Migration Guide","text":"<p>Refer to the Common Configuration Migration Guide for details on migrating the common configuration sections such as <code>Service</code>.</p>"},{"location":"microservices/core/data/Ch-CoreData/#writable","title":"Writable","text":"<p>The following settings have been removed from the <code>Writable</code> section</p> <ul> <li>DeviceUpdateLastConnected</li> <li>MetaDataCheck</li> <li>ServiceUpdateLastConnected</li> <li>ValidateCheck</li> <li>ChecksumAlgo</li> </ul>"},{"location":"microservices/core/data/Ch-CoreData/#messagequeue","title":"MessageQueue","text":"<p>The following <code>MessageQueue</code> setting values have changed:</p> <ul> <li>Host - Override value for docker is now <code>edgex-redis</code></li> <li>Protocol = \"redis\"</li> <li>Port = 6379</li> <li>Type = 'redis'</li> </ul> <p>The following setting has been removed from the <code>MessageQueue</code> section</p> <ul> <li>Topic</li> </ul> <p>The following new settings have been added to  <code>MessageQueue</code> section</p> <ul> <li>PublishTopicPrefix = 'edgex/events/core'</li> <li> <p>SubscribeTopic = 'edgex/events/device/#'</p> </li> <li> <p>AuthMode = 'usernamepassword'</p> </li> <li>SecretName = 'redisdb'</li> <li>PublishTopicPrefix = 'edgex/events/core'</li> <li>SubscribeEnabled = true</li> </ul>"},{"location":"microservices/core/data/Ch-CoreData/#messagequeueoptional","title":"MessageQueue.Optional","text":"<p>The following settings have been removed from <code>MessageQueue.Optional</code> section for when using MQTT for the MessageBus. Secure MessageBus using MQTT is not yet supported and will be retrieved from the Secret Store in a future release.</p> <ul> <li>Username</li> <li>Password</li> </ul>"},{"location":"microservices/core/data/Ch-CoreData/#maxeventsize","title":"MaxEventSize","text":"<p>EdgeX 2.2</p> <p>Prior to EdgeX 2.2 event size is limited to 25MB, and it is configurable in EdgeX 2.2, the default value is 25000KB (25MB).</p>"},{"location":"microservices/core/data/Ch-CoreData/#api-reference","title":"API Reference","text":"<p>Core Data API Reference</p>"},{"location":"microservices/core/database/Ch-Redis/","title":"Redis Database","text":"<p>EdgeX Foundry's reference implementation database (for sensor data, metadata and all things that need to be persisted in a database) is Redis.</p> <p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database and message broker in EdgeX. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis is durable and uses persistence only for recovering state; the only data Redis operates on is in-memory.</p>"},{"location":"microservices/core/database/Ch-Redis/#memory-utilization","title":"Memory Utilization","text":"<p>Redis uses a number of techniques to optimize memory utilization. Antirez and Redis Labs have written a number of articles on the underlying details (see the list below) and those strategies has continued to evolve. When thinking about your system architecture, consider how long data will be living at the edge and consuming memory (physical or physical + virtual).</p> <ul> <li>http://antirez.com/news/92</li> <li>https://redislabs.com/blog/redis-ram-ramifications-part-i/</li> <li>https://redis.io/topics/memory-optimization</li> <li>http://antirez.com/news/128</li> </ul>"},{"location":"microservices/core/database/Ch-Redis/#on-disk-persistence","title":"On-disk Persistence","text":"<p>Redis supports a number of different levels of on-disk persistence. By default, snapshots of the data are persisted every 60 seconds or after 1000 keys have changed. Beyond increasing the frequency of snapshots, append only files that log every database write are also supported. See https://redis.io/topics/persistence for a detailed discussion on how to balance the options.</p> <p>Redis supports setting a memory usage limit and a policy on what to do if memory cannot be allocated for a write. See the MEMORY MANAGEMENT section of https://raw.githubusercontent.com/antirez/redis/5.0/redis.conf for the configuration options. Since EdgeX and Redis do not currently communicate on data evictions, you will need to use the EdgeX scheduler to control memory usage rather than a Redis eviction policy.</p>"},{"location":"microservices/core/metadata/Ch-Metadata/","title":"Metadata","text":""},{"location":"microservices/core/metadata/Ch-Metadata/#introduction","title":"Introduction","text":"<p>The core metadata micro service has the knowledge about the devices and sensors and how to communicate with them used by the other services, such as core data, core command, and so forth.</p> <p>Specifically, metadata has the following abilities:</p> <ul> <li>Manages information about the devices connected to, and operated by, EdgeX Foundry</li> <li>Knows the type, and organization of data reported by the devices</li> <li>Knows how to command the devices</li> </ul> <p>Although metadata has the knowledge, it does not do the following activities:</p> <ul> <li>It is not responsible for actual data collection from devices, which is performed by device services and core data</li> <li>It is not responsible for issuing commands to the devices, which is performed by core command and device     services</li> </ul>"},{"location":"microservices/core/metadata/Ch-Metadata/#data-models","title":"Data Models","text":"<p>To understand metadata, its important to understand the EdgeX data objects it manages.  Metadata stores its knowledge in a local persistence database.  Redis is used by default, but a database abstraction layer allows for other databases to be used.</p>"},{"location":"microservices/core/metadata/Ch-Metadata/#device-profile","title":"Device Profile","text":"<p>Device profiles define general characteristics about devices, the data they provide, and how to command them. Think of a device profile as a template of a type or classification of device. For example, a device profile for BACnet thermostats provides general characteristics for the types of data a BACnet thermostat sends, such as current temperature and humidity level. It also defines which types of commands or actions EdgeX can send to the BACnet thermostat.  Examples might include actions that set the cooling or heating point.  Device profiles are typically specified in YAML file and uploaded to EdgeX.  More details are provided below.</p> <p>EdgeX 2.0</p> <p>The device profile was greatly simplified in EdgeX 2.0 (Ireland).  There are now just two sections of the document (deviceResources and deviceCommands) versus the three (deviceResources, deviceCommands and coreCommands) of EdgeX 1.x profiles.  Device resources and device commands are made available through the core command service with the <code>isHidden</code> property on either is set to fault.  This makes a core command section no longer necessary in EdgeX 2.</p> <p>However, this does mean that EdgeX 2 profiles are not backward compatible and EdgeX 1.x profiles must be migrated. See Device Service V2 Migration Guide for complete details.</p>"},{"location":"microservices/core/metadata/Ch-Metadata/#device-profile-details","title":"Device Profile Details","text":"<p> Metadata device profile object model</p> General PropertiesDevice ResourcesAttributesPropertiesDevice CommandsCore Commands <p>A device profile has a number of high level properties to give the profile context and identification. Its name field is required and must be unique in an EdgeX deployment. Other fields are optional - they are not used by device services but may be populated for informational purposes:</p> <ul> <li>Description</li> <li>Manufacturer</li> <li>Model</li> <li>Labels</li> </ul> <p>Here is an example general information section for a sample KMC 9001 BACnet thermostat device profile provided with the BACnet device service (you can find the profile in Github) .  Only the name is required in this section of the device profile.  The name of the device profile must be unique in any EdgeX deployment.  The manufacturer, model and labels are all optional bits of information that allow better queries of the device profiles in the system.</p> <pre><code>name: \"BAC-9001\"\nmanufacturer: \"KMC\"\nmodel: \"BAC-9001\"\nlabels: - \"B-AAC\"\ndescription: \"KMC BAC-9001 BACnet thermostat\"\n</code></pre> <p>Labels provided a way to tag, organize or categorize the various profiles.  They serve no real purpose inside of EdgeX.</p> <p>A device resource (in the deviceResources section of the YAML file) specifies a sensor value within a device that may be read from or written to either individually or as part of a device command (see below).  Think of a device resource as a specific value that can be obtained from the underlying device or a value that can be set to the underlying device.  In a thermostat, a device resource may be a temperature or humidity (values sensed from the devices) or cooling point or heating point (values that can be set/actuated to allow the thermostat to determine when associated heat/cooling systems are turned on or off).  A device resource has a name for identification and a description for informational purposes.</p> <p>The properties section of a device resource has also been greatly simplified.  See details below.</p> <p>Back to the BACnet example, here are two device resources.  One will be used to get the temperature (read) the current temperature and the other to set (write or actuate) the active cooling set point.  The device resource name must be provided and it must also be unique in any EdgeX deployment.</p> <pre><code>name: Temperature\ndescription: \"Get the current temperature\"\nisHidden: false\n\nname: ActiveCoolingSetpoint\ndescription: \"The active cooling set point\"\nisHidden: false\n</code></pre> <p>EdgeX 2.0</p> <p><code>isHidden</code> is new in EdgeX 2.0.  While made explicit in this example, it is false by default when not specified.  <code>isHidden</code> indicates whether to expose the device resource to the core command service.</p> <p>The device service allows access to the device resources via REST endpoint.  Values specified in the device resources section of the device profile can be accessed through the following URL patterns:</p> <ul> <li>http://:/api/v2/device/name// <p>The attributes associated to a device resource are the specific parameters required by the device service to access the particular value.   In other words, attributes are \u201cinward facing\u201d and are used by the device service to determine how to speak to the device to either read or write (get or set) some of its values. Attributes are detailed protocol and/or device specific information that informs the device service how to communication with the device to get (or set) values of interest.</p> <p>Returning to the BACnet device profile example, below are the complete device resource sections for Temperature and ActiveCoolingSetPoint \u2013 inclusive of the attributes \u2013 for the example device.</p> <pre><code>-\nname: Temperature\ndescription: \"Get the current temperature\"\nisHidden: false\nattributes: { type: \"analogValue\", instance: \"1\", property: \"presentValue\", index: \"none\"  }\n-\nname: ActiveCoolingSetpoint\ndescription: \"The active cooling set point\"\nisHidden: false\nattributes:\n{ type: \"analogValue\", instance: \"3\", property: \"presentValue\", index: \"none\"  }\n</code></pre> <p>The properties of a device resource describe the value obtained or set on the device.  The properties can optionally inform the device service of some simple processing to be performed on the value.  Again, using the BACnet profile as an example, here are the properties associated to the thermostat's temperature device resource.</p> <pre><code>name: Temperature\ndescription: \"Get the current temperature\"\nattributes: { type: \"analogValue\", instance: \"1\", property: \"presentValue\", index: \"none\"  }\nproperties: valueType: \"Float32\"\nreadWrite: \"R\"\nunits: \"Degrees Fahrenheit\"\n</code></pre> <p>The 'valueType' property of properties gives more detail about the value collected or set.  In this case giving the details of the temperature value to be set.  The value provides details such as the type of the data collected or set, whether the value can be read, written or both.</p> <p>The following fields are available in the value property:</p> <ul> <li>valueType - Required. The data type of the value. Supported types are Bool, Int8 - Int64, Uint8 - Uint64, Float32, Float64, String, Binary, Object and arrays of the primitive types (ints, floats, bool). Arrays are specified as eg. Float32Array, BoolArray etc.</li> <li>readWrite - R, RW, or W indicating whether the value is readable or writable.</li> <li>units - gives more detail about the unit of measure associated with the value. In this case, the temperature unit of measure is in degrees Fahrenheit.</li> <li>min - minimum allowed value </li> <li>max - maximum allowed value</li> <li>defaultValue - a value used for PUT requests which do not specify one.</li> <li>base - a value to be raised to the power of the raw reading before it is returned.</li> <li>scale - a factor by which to multiply a reading before it is returned.</li> <li>offset - a value to be added to a reading before it is returned.</li> <li>mask - a binary mask which will be applied to an integer reading.</li> <li>shift - a number of bits by which an integer reading will be shifted right.</li> </ul> <p>The processing defined by base, scale, offset, mask and shift is applied in that order. This is done within the SDK. A reverse transformation is applied by the SDK to incoming data on set operations (NB mask transforms on set are NYI)</p> <p>Device commands (in the deviceCommands section of the YAML file) define access to reads and writes for multiple simultaneous device resources. Device commands are optional.  Each named device command should contain a number of get and/or set resource operations, describing the read or write respectively.</p> <p>Device commands may be useful when readings are logically related, for example with a 3-axis accelerometer it is helpful to read all axes (X, Y and Z) together.</p> <p>A device command consists of the following properties:</p> <ul> <li>name - the name of the command</li> <li>readWrite - R, RW, or W indicating whether the operation is readable or writable.</li> <li>isHidden - indicates whether to expose the device command to the core command service (optional and false by default)</li> <li>resourceOperations - the list of included device resource operations included in the command.</li> </ul> <p>Each resourceOperation will specify:</p> <ul> <li>the deviceResource - the name of the device resource</li> <li>defaultValue - optional, a value to return when the operation does not provide one</li> <li>parameter - optional, a value that will be used if a PUT request does not specify one.</li> <li>mappings - optional, allows readings of String type to be re-mapped.</li> </ul> <p>The device commands can also be accessed through a device service\u2019s REST API in a similar manner as described for device resources.</p> <ul> <li>http://:/api/v2/device/name// <p>If a device command and device resource have the same name, it will be the device command which is available.</p> <p>EdgeX 2.0</p> <p>Core commands have been removed in EdgeX 2.  Use <code>isHidden</code> with a value of false to service device resources and device commands to the command service.</p> <p>Device resources or device commands that are not hidden are seen and available via the EdgeX core command service.  </p> <p>Other services (such as the rules engine) or external clients of EdgeX, should make requests of device services through the core command service, and when they do, they are calling on the device service\u2019s unhidden device commands or device resources.  Direct access to the device commands or device resources of a device service is frowned upon.  Commands, made available through the EdgeX command service, allow the EdgeX adopter to add additional security or controls on who/what/when things are triggered and called on an actual device.</p> <p></p>"},{"location":"microservices/core/metadata/Ch-Metadata/#device","title":"Device","text":"<p>Data about actual devices is another type of information that the metadata micro service stores and manages. Each device managed by EdgeX Foundry registers with metadata (via its owning device service.  Each device must have a unique name associated to it. </p> <p>Metadata stores information about a device (such as its address) against the name in its database. Each device is also associated to a device profile. This association enables metadata to apply knowledge provided by the device profile to each device. For example, a thermostat profile would say that it reports temperature values in Celsius.  Associating a particular thermostat (the thermostat in the lobby for example) to the thermostat profile allows metadata to know that the lobby thermostat reports temperature value in Celsius. </p> <p></p>"},{"location":"microservices/core/metadata/Ch-Metadata/#device-service","title":"Device Service","text":"<p>Metadata also stores and manages information about the device services.  Device services serve as EdgeX's interfaces to the actual devices and sensors.</p> <p>Device services are other micro services that communicate with devices via the protocol of that device.  For example, a Modbus device service facilitates communications among all types of Modbus devices.  Examples of Modbus devices include motor controllers, proximity sensors, thermostats, and power meters.  Device services simplify communications with the device for the rest of EdgeX.</p> <p>When a device service starts, it registers itself with metadata.  When EdgeX provisions a new devices the device gets associated to its owning device service.  That association is also stored in metadata.</p> <p></p> <p>Metadata Device, Device Service and Device Profile Model</p> <p> Metadata's Device Profile, Device and Device Service object model and the association between them </p>"},{"location":"microservices/core/metadata/Ch-Metadata/#provision-watcher","title":"Provision Watcher","text":"<p>Device services may contain logic to automatically provision new devices.  This can be done statically or dynamically.  In static device configuration (also known as static provisioning) the device service connects to and establishes a new device that it manages in EdgeX (specifically metadata) from configuration the device service is provided.  For example, a device service may be provided with the specific IP address and additional device details for a device (or devices) that it is to onboard at startup.  In static provisioning, it is assumed that the device will be there and that it will be available at the address or place specified through configuration.  The devices and the connection information for those devices is known at the point that the device service starts.</p> <p>In dynamic discovery (also known as automatic provisioning), a device service is given some general information about where to look and general parameters for a device (or devices).  For example, the device service may be given a range of BLE address space and told to look for devices of a certain nature in this range.  However, the device service does not know that the device is physically there \u2013 and the device may not be there at start up.  It must continually scan during its operations (typically on some sort of schedule) for new devices within the guides of the location and device parameters provided by configuration. </p> <p>Not all device services support dynamic discovery.  If it does support dynamic discovery, the configuration about what and where to look (in other words, where to scan) for new devices is specified by a provision watcher.  A provision watcher, is specific configuration information provided to a device service (usually at startup) that gets stored in metadata.  In addition to providing details about what devices to look for during a scan, a provision watcher may also contain \u201cblocking\u201d indicators, which define parameters about devices that are not to be automatically provisioned.  This allows the scope of a device scan to be narrowed or allow specific devices to be avoided.  </p> <p> Metadata's provision watcher object model</p>"},{"location":"microservices/core/metadata/Ch-Metadata/#data-dictionary","title":"Data Dictionary","text":"BaseAddressRESTAddressMQTTPubAddressAutoEventDeviceDeviceProfileDeviceResourceDeviceServiceResourcePropertiesProvisionWatcher Property Description The metadata base structure for common information needed to make a request to an EdgeX Foundry target. Type REST or MQTT Host Target's address string - such as an IP address Port Port for the target address Property Description Structure extending BaseAddress, used to make a request of EdgeX Foundry targets via REST. Path URI path beyond the host and port HTTPMethod Method for connecting (i.e. POST) Property Description Structure extending BaseAddress, used to make a request of EdgeX Foundry targets via MQTT. Publisher Publisher name User User id for authentication Password Password of the user for authentication Topic Topic for message bus QoS Quality of service level for message publishing; value 0, 1, or 2 KeepAlive Maximum time interval in seconds with no comms before closing Retained Flag to have the broker store the last rec'd message for future subscribers AutoReconnect Indication to reconnect on failed connection ConnectTimeout Maximum time interval the client will wait for the connection to the MQTT server to be established Property Description AutoEvent supports auto-generated events sourced from a device service Interval How often the specific resource needs to be polled. OnChange indicates whether the device service will generate an event only SourceName the name of the resource in the device profile which describes the event to generate Property Description The object that contains information about the state, position, reachability, and methods of interfacing with a Device; represents a registered device participating within the EdgeX Foundry ecosystem Id uniquely identifies the device, a UUID for example Description Name Name for identifying a device AdminState Admin state (locked/unlocked) OperatingState Protocols A map of supported protocols for the given device LastConnected Time (milliseconds) that the device last provided any feedback or responded to any request LastReported Labels Other labels applied to the device to help with searching Location Device service specific location (interface{} is an empty interface so it can be anything) ServiceName Associated Device Service - One per device ProfileName AutoEvents A list of auto-generated events coming from the device Property Description represents the attributes and operational capabilities of a device. It is a template for which there can be multiple matching devices within a given system. Id uniquely identifies the device, a UUID for example Description Name Name for identifying a device Manufacturer Manufacturer of the device Model Model of the device Labels Labels used to search for groups of profiles DeviceResources deviceResource collection DeviceCommands collect of deviceCommand Property Description The atomic description of a particular protocol level interface for a class of Devices; represents a value on a device that can be read or written Description Name Tag Properties list of associated properties Attributes list of associated attributes Property Description represents a service that is responsible for proxying connectivity between a set of devices and the EdgeX Foundry core services; the current state and reachability information for a registered device service Id uniquely identifies the device service, a UUID for example Name LastConnected LastReported ime (milliseconds) that the device service reported data to the core microservice Labels BaseAddress address (MQTT topic, HTTP address, serial bus, etc.) for reaching the service AdminState Property Description The transformation and constraint properties for a device resource. ValueType Type of the value ReadWrite Read/Write Permissions set for this property Minimum Minimum value that can be get/set from this property Maximum Maximum value that can be get/set from this property DefaultValue Default value set to this property if no argument is passed Mask Mask to be applied prior to get/set of property Shift Shift to be applied after masking, prior to get/set of property Scale Multiplicative factor to be applied after shifting, prior to get/set of property Offset Additive factor to be applied after multiplying, prior to get/set of property Base Base for property to be applied to, leave 0 for no power operation (i.e. base ^ property: 2 ^ 10) Assertion Required value of the property, set for checking error state.  Failing an assertion condition will mark the device with an error state MediaType Property Description The metadata used by a Service for automatically provisioning matching Devices. Id Name unique name and identifier of the provision watcher Labels Identifiers set of key value pairs that identify property (MAC, HTTP,...) and value to watch for (00-05-1B-A1-99-99, 10.0.0.1,...) BlockingIdentifiers set of key-values pairs that identify devices which will not be added despite matching on Identifiers ProfileName Name of the device profile that should be applied to the devices available at the identifier addresses ServiceName Name of the device service that new devices will be associated to AdminState administrative state for new devices - either unlocked or locked AutoEvents Associated auto events to this watcher"},{"location":"microservices/core/metadata/Ch-Metadata/#high-level-interaction-diagrams","title":"High Level Interaction Diagrams","text":"<p>Sequence diagrams for some of the more critical or complex events regarding metadata.  These High Level Interaction Diagrams show:</p> <ol> <li>Adding a new device profile (Step 1 to provisioning a new device) via metadata</li> <li>Adding a new device via metadata (Step 2 to provisioning a new device)</li> <li>EdgeX Foundry device service startup (and its interactions with metadata)</li> </ol> <p> Add a New Device Profile (Step 1 to provisioning a new device)</p> <p> Add a New Device (Step 2 to provisioning a new device)</p> <p> What happens on a device service startup?</p>"},{"location":"microservices/core/metadata/Ch-Metadata/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Common Configuration documentation for configuration properties common to all services. Below are only the additional settings and sections that are not common to all EdgeX Services.</p> Writable.ProfileChangeDatabases/Databases.PrimaryNotifications Property Default Value Description StrictDeviceProfileChanges false Whether to allow device profile modifications, set to <code>true</code> to reject all modifications which might impact the existing events and readings. Thus, the changes like <code>manufacture</code>, <code>isHidden</code>, or <code>description</code> can still be made. StrictDeviceProfileDeletes false Whether to allow device profile deletionsm set to <code>true</code> to reject all deletions. Property Default Value Description Properties used by the service to access the database Name 'metadata' Document store or database name Property Default Value Description Configuration to post device changes through the notifiction service PostDeviceChanges false Whether to send out notification when a device has been added, changed, or removed Content 'Meatadata notice: ' Start of the notification message when sending notification messages on device change Sender 'core-metadata' Sender of any notification messages sent on device change Description 'Metadata change notice' Message description of any notification messages sent on device change Label 'metadata' Label to put on messages for any notification messages sent on device change"},{"location":"microservices/core/metadata/Ch-Metadata/#v2-configuration-migration-guide","title":"V2 Configuration Migration Guide","text":"<p>Refer to the Common Configuration Migration Guide for details on migrating the common configuration sections such as <code>Service</code>.</p>"},{"location":"microservices/core/metadata/Ch-Metadata/#writable","title":"Writable","text":"<p>The <code>EnableValueDescriptorManagement</code> setting has been removed</p> <p>Edgex 2.2</p> <p>The following setting has been added to the <code>Writable.ProfileChage</code> section.</p> <ul> <li>StrictDeviceProfileChanges</li> <li>StrictDeviceProfileDeletes</li> </ul>"},{"location":"microservices/core/metadata/Ch-Metadata/#api-reference","title":"API Reference","text":"<p>Core Metadata API Reference</p>"},{"location":"microservices/device/Ch-DeviceServiceList/","title":"Supported Device Services","text":"<p>The following table lists the EdgeX device services and protocols they support.</p> Device Service Repository Protocol Status Comments device-onvif-camera ONVIF Active Full implementation of ONVIF spec. Note that not all cameras implement the complete ONVIF spec. device-usb-camera USB Active USB using V4L2 API. ONLY works on Linux with kernel v5.10 or higher. Includes RTSP server for video streaming. device-camera-go ONVIF Deprecated Deprecated - use the new Device ONVIF Camera service device-rest-go REST Active provides one-way communications only.  Allows posting of binary and JSON data via REST.  Events are single reading only. device-rfid-llrp-go LLRP Active Communications with RFID readers via LLRP. device-snmp-go SNMP Active Basic implementation of SNMP protocol.  Async callbacks and traps not currently supported. device-virtual-go Active Simulates sensor readings of type binary, Boolean, float, integer and unsigned integer device-mqtt-go MQTT Active Two way communications via multiple MQTT topics device-modbus-go Modbus Active Supports Modbus over TCP or RTU device-gpio GPIO Active Linux only; uses sysfs ABI device-grove-c 2.x TBD Connects the Grove sensor on Grove Raspberry Pi using libmraa library; Linux and ARM only device-bacnet-c BACnet 2.x TBD Supports BACnet via ethernet (IP) or serial (MSTP).  Uses the Steve Karag BACnet stack device-coap-c CoAP Active (2.2.0 TBD) This service is in the process of being redeveloped and expanded for upcoming release for Kamakura \u2013 and will support Thread as a subset of functionality.  Currently supports CoAP-based REST and is one way communications (read-only) device-uart UART in Development Linux only; for connecting serial UART devices to EdgeX <p>Note</p> <p>Check the above Device Service README(s) for known devices that have been tested with the Device Service. Not all Device Service READMEs will have this information.</p>"},{"location":"microservices/device/Ch-DeviceServices/","title":"Device Services Microservices","text":""},{"location":"microservices/device/Ch-DeviceServices/#introduction","title":"Introduction","text":"<p>The Device Services Layer interacts with Device Services.</p> <p>Device services are the edge connectors interacting with the devices that include, but are not limited to: appliances in your home, alarm systems, HVAC equipment, lighting, machines in any industry, irrigation systems, drones, traffic signals, automated transportation, and so forth.</p> <p>EdgeX device services translate information coming from devices via hundreds of protocols and thousands of formats and bring them into EdgeX.  In other terms, device services ingest sensor data provided by \u201cthings\u201d.  When it ingests the sensor data, the device service converts the data produced and communicated by the \u201cthing\u201d into a common EdgeX Foundry data structure, and sends that converted data into the core services layer, and to other micro services in other layers of EdgeX Foundry.</p> <p>Device services also receive and handle any request for actuation back to the device.  Device services take a general command from EdgeX to perform some sort of action and it translates that into a protocol specific request and forwards the request to the desired device.</p> <p>Device services serve as the main means EdgeX interacts with sensors/devices.  So, in addition to getting sensor data and actuating devices, device services also:</p> <ul> <li>Get status updates from devices/sensors</li> <li>Transform data before sending sensor data to EdgeX</li> <li>Change configuration</li> <li>Discover devices</li> </ul> <p>Device services may service one or a number of devices at one time. </p> <p>A device that a device service manages, could be something other than a simple, single, physical device.  The device could be an edge/IoT gateway (and all of that gateway's devices), a device manager, a sensor hub, a web service available over HTTP, or a software sensor that acts as a device, or collection of devices, to EdgeX Foundry.</p> <p></p> <p>The device service communicates with the devices through protocols native to each device object.  EdgeX comes with a number of device services speaking many common IoT protocols such as Modbus, BACnet, BLE, etc.  EdgeX also provides the means to create new devices services through device service software development kits (SDKs) when you encounter a new protocol and need EdgeX to communicate with a new device.</p>"},{"location":"microservices/device/Ch-DeviceServices/#device-service-abstraction","title":"Device Service Abstraction","text":"<p>A device service is really just a software abstraction around a device and any associated firmware, software and protocol stack.  It allows the rest of EdgeX (and users of EdgeX) to talk to a device via the abstraction API so that all devices look the same from the perspective of how you communicate with them.  Under the covers, the implementation of the device service has some common elements, but can also vary greatly depending on the underlying device, protocol, and associate software.</p> <p></p> <p>A device service provides the abstraction between the rest of EdgeX and the physical device.  In other terms, the device service \u201cwraps\u201d the protocol communication code, device driver/firmware and actual device.</p> <p>Each device service in EdgeX is an independent micro service.  Devices services are typically created using a device service SDK. The SDK is really just a library that provides common scaffolding code and convenience methods that are needed by all device services.  While not required, the EdgeX community use the SDKs as the basis for the all device services the community provides.  The SDKs make it easier to create device service by allowing a developer to focus on device specific communications, features, etc. versus having to code a lot of EdgeX service boilerplate code.   Using the SDKs also helps to ensure the device services adhere to rules required of the device services.</p> <p>Unless you need to create a new device service or modify an existing device service, you may not ever have to go under the covers, so to speak, to understand how a device service works.  However, having some general understanding of what a device service does and how it does it can be helpful in customization, setting configuration and diagnosing problems.</p>"},{"location":"microservices/device/Ch-DeviceServices/#device-service-functionality","title":"Device Service Functionality","text":"<p>All device services must perform the following tasks:</p> <ul> <li>Register with core metadata \u2013 thereby letting all of EdgeX know that it is running and stands ready to manage devices.  In the case of an existing device service, the device service will update its metadata registration and get any new information.</li> <li>Get its configuration settings from the EdgeX\u2019s configuration service (or local configuration file if the configuration service is not being used).</li> <li>Register itself an EdgeX running micro service with the EdgeX registry service (when running) \u2013 thereby allowing other EdgeX services to communicate with it.</li> <li>On-board and manage physical devices it knows how to communicate with.  This process is called provisioning of the device(s).  In some cases, the device service may have the means to automatically detect and provision the devices.  For example, a BLE device service may automatically scan a BLE address space, detect a new BLE device in its range, and then provision that device to EdgeX and the associated BLE device service.</li> <li>Update and inform EdgeX on the operating state of the device (does it appear the device is still running and able to communicate).</li> <li>Monitor for configuration changes and apply new configuration where applicable.  Note, in some cases configuration changes cannot be dynamically applied (example: change the operating port of the device service).</li> <li>Get sensor data (i.e. ingest sensor data) and pass that data to the core data micro service via REST.</li> <li>Receive and react to REST based actuation commands.</li> </ul> <p>As you can imagine, many of these tasks (like registering with core metadata) are generic and the same for all device services and thereby provided by the SDK.  Other tasks (like getting sensor data from the underlying device) are quite specific to the underlying device.  In these cases, the device service SDK provides empty functions for performing the work, but the developer would need to fill in the function code as it relates to the specific device, the communication protocol, device driver, etc.</p>"},{"location":"microservices/device/Ch-DeviceServices/#device-service-functional-requirements","title":"Device Service Functional Requirements","text":"<p>Requirements for the device service are provided in this documentation. These requirements are being used to define what functionality needs to be offered via any Device Service SDK to produce the device service scaffolding code. They may also help the reader further understand the duties and role of a device service.</p>"},{"location":"microservices/device/Ch-DeviceServices/#device-profile","title":"Device Profile","text":"<p>EdgeX comes with a number of existing device services for communicating with devices that speak many IoT protocols \u2013 such as Modbus, BACnet, BLE, etc.  While these devices services know how to speak to devices that communicate by the associated protocol, the device service doesn\u2019t know the specifics of all devices that speak that protocol.  For example, there are thousands of Modbus devices in the world.  It is a common industrial protocol used in a variety of devices.  Some Modbus devices measure temperature and humidity and provide thermostatic control over building HVAC systems, while other Modbus devices are used in automation control of flare gas meters in the oil and gas industry.  This diversity of devices means that the Modbus device service could never know how to communicate with each Modbus device directly.  The device service just knows the Modbus protocol generically and must be informed of how to communicate with each individual device based on what that device knows and communicates.  Using an analogy, you may speak a language or two.  Just because you speak English, doesn\u2019t mean you know everything about all English-speaking people.  For example, just because someone spoke English, you would not know if they could solve a calculus problem for you or if they can sing your favorite song.</p> <p>Device profiles describe a specific device to a device service.  Each device managed by a device service has an association device profile, which defines that device in terms of the data it reports and operations that it supports. General characteristics about the type of device, the data the device provides, and how to command the device is all provided in a device profile. A device profile is described in YAML which is a human-readable data serialization language (similar to a markup language like XML).  See the page on device profiles to learn more about how they provide the detail EdgeX device services need to communicate with a device.</p> <p>Info</p> <p>Device profiles, while normally provided to EdgeX in a YAML file, can also be specified to EdgeX in JSON.  See the metadata API for upload via JSON versus upload YAML file.</p>"},{"location":"microservices/device/Ch-DeviceServices/#device-discovery-and-provision-watchers","title":"Device Discovery and Provision Watchers","text":"<p>Device Services may contain logic to automatically provision new devices.  This can be done statically or dynamically.  </p>"},{"location":"microservices/device/Ch-DeviceServices/#static-provisioning","title":"Static Provisioning","text":"<p>In static device configuration (also known as static provisioning) the device service connects to and establishes a new device that it manages in EdgeX (specifically metadata) from configuration the device service is provided.  For example, a device service may be provided with the specific IP address and additional device details for a device (or devices) that it is to onboard at startup.  In static provisioning, it is assumed that the device will be there and that it will be available at the address or place specified through configuration.  The devices and the connection information for those devices is known at the point that the device service starts.</p>"},{"location":"microservices/device/Ch-DeviceServices/#dynamic-provisioning","title":"Dynamic Provisioning","text":"<p>In dynamic discovery (also known as automatic provisioning), a device service is given some general information about where to look and general parameters for a device (or devices).  For example, the device service may be given a range of BLE address space and told to look for devices of a certain nature in this range.  However, the device service does not know that the device is physically there \u2013 and the device may not be there at start up.  It must continually scan during its operations (typically on some sort of schedule) for new devices within the guides of the location and device parameters provided by configuration. </p> <p>Not all device services support dynamic discovery.  If it does support dynamic discovery, the configuration about what and where to look (in other words, where to scan) for new devices is specified by a provision watcher.  A provision watcher is created via a call to the core metadata provision watcher API (and is stored in the metadata database).  In addition to providing details about what devices to look for during a scan, a provision watcher may also contain \u201cblocking\u201d indicators, which define parameters about devices that are not to be automatically provisioned.  This allows the scope of a device scan to be narrowed or allow specific devices to be avoided.  </p>"},{"location":"microservices/device/Ch-DeviceServices/#admin-state","title":"Admin State","text":"<p>The adminState is either <code>LOCKED</code> or <code>UNLOCKED</code> for each device.  This is an administrative condition applied to the device.  This state is periodically set by an administrator of the system \u2013 perhaps for system maintenance or upgrade of the sensor.  When <code>LOCKED</code>, requests to the device via the device service are stopped and an indication that the device is locked (HTTP 423 status code) is returned to the caller.</p>"},{"location":"microservices/device/Ch-DeviceServices/#sensor-reading-schedule","title":"Sensor Reading Schedule","text":"<p>Data collected from devices by a device service is marshalled into EdgeX event and reading objects (delivered as JSON objects in service REST calls).  This is one of the primary responsibilities of a device service.  Typically, a configurable schedule - called an auto event schedule - determines when a device service sends data to core data via core data\u2019s REST API (future EdgeX implementations may afford alternate means to send the data to core data or to send sensor data to other services).</p>"},{"location":"microservices/device/Ch-DeviceServices/#test-and-demonstration-device-services","title":"Test and Demonstration Device Services","text":"<p>Among the many available device services provided by EdgeX, there are two device services that are typically used for demonstration, education and testing purposes only.  The random device service (device-random-go) is a very simple device service used to provide device service authors a bare bones example inclusive of a device profile.  It can also be used to create random integer data (either 8, 16, or 32 bit signed or unsigned) to simulate integer readings when developing or testing other EdgeX micro services. It was created from the Go-based device service SDK.</p> <p>The virtual device service (device-virtual-go) is also used for demonstration, education and testing.  It is a more complex simulator in that it allows any type of data to be generated on a scheduled basis and used an embedded SQL database (ql) to provide simulated data.  Manipulating the data in the embedded database allows the service to mimic almost any type of sensing device.   More information on the virtual device service is available in this documentation.</p>"},{"location":"microservices/device/Ch-DeviceServices/#running-multiple-instances","title":"Running multiple instances","text":"<p>Device services support one additional command-line argument, <code>--instance</code> or <code>-i</code>. This allows for running multiple instances of a device service in an EdgeX deployment, by giving them different names.</p> <p>For example, running <code>device-modbus -i 1</code> results in a service named <code>device-modbus_1</code>, ie the parameter given to the <code>instance</code> argument is added as a suffix to the device service name. The same effect may be obtained by setting the <code>EDGEX_INSTANCE_NAME</code> environment variable.</p>"},{"location":"microservices/device/Ch-DeviceServices/#publish-to-messagebus","title":"Publish to MessageBus","text":"<p>Edgex 2.0</p> <p>New in Edgex 2.0</p> <p>Device services now have the capability to publish Events directly to the EdgeX MessageBus, rather than POST the Events to Core Data via REST. This capability is controlled by the <code>Device.UseMessageBus</code> configuration property (see below), which is set to <code>true</code> by default. Core Data is configured by default to subscribe to the EdgeX MessageBus to receive and persist the Events. Application services, as in EdgeX 1.x, subscribe to the EdgeX MessageBus to receive and process the Events.</p>"},{"location":"microservices/device/Ch-DeviceServices/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Common Configuration documentation for configuration properties common to all services.</p> <p>Edgex 2.2</p> <p><code>Writable.Reading.ReadingUnits</code> and <code>MaxEventSize</code> are new for Edgex 2.2</p> DeviceMessageQueueMessageQueue.OptionalWritable.ReadingMaxEventSize Property Default Value Description Properties that determine how the device service communicates with a device DataTransform true Controls whether transformations are applied to numeric readings MaxCmdOps 128 Maximum number of resources in a device command (hence, readings in an event) MaxCmdResultLen 256 Maximum JSON string length for command results ProfilesDir '' If set, directory containing profile definition files to upload to core-metadata DevicesDir '' If set, directory containing device definition files to upload to core-metadata UpdateLastConnected false If true, update the LastConnected attribute of a device whenever it is successfully accessed UseMessageBus true Controls whether events are published via MessageBus or core-data (REST) Discovery/Enabled true Controls whether device discovery is enabled Discovery/Interval 0 Interval between automatic discovery runs. Zero means do not run discovery automatically Property Default Value Description Entries in the MessageQueue section of the configuration allow for publication of events to a message bus Protocol redis Indicates the connectivity protocol to use to use the bus. Host localhost Indicates the host of the messaging broker, if applicable. Port 6379 Indicates the port to use when publishing a message. Type redis Indicates the type of messaging library to use. Currently this is Redis by default. Refer to the go-mod-messaging module for more information. AuthMode usernamepassword Auth Mode to connect to EdgeX MessageBus. SecretName redisdb Name of the secret in the Secret Store to find the MessageBus credentials. PublishTopicPrefix edgex/events/device Indicates the base topic to which messages should be published. /<code>&lt;device-profile-name&gt;/&lt;device-name&gt;</code> will be added to this Publish Topic prefix Property Default Value Description Configuration and connection parameters for use with MQTT message bus - in place of Redis ClientId [service-key] Client ID used to put messages on the bus Qos '0' Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once) KeepAlive '10' Period of time in seconds to keep the connection alive when there is no messages flowing (must be 2 or greater) Retained false Whether to retain messages AutoReconnect true Whether to reconnect to the message bus on connection loss ConnectTimeout 5 Message bus connection timeout in seconds SkipCertVerify false TLS configuration - Only used if Cert/Key file or Cert/Key PEMblock are specified Property Default Value Description ReadingUnits true Indicate the units of measure for the Value in the Reading, set to <code>false</code> to not to include units in the Reading. Property Default Value Description MaxEventSize 0 maximum event size in kilobytes sent to Core Data or MessageBus. 0 represents default to system max."},{"location":"microservices/device/Ch-DeviceServices/#custom-configuration","title":"Custom Configuration","text":"<p>Device services can have custom configuration in one of two ways. See the table below for details.</p> DriverCustom Structured Configuration <p><code>[Driver]</code> - The Driver section used for simple custom settings and is accessed via the SDK's DriverConfigs() API. The DriverConfigs API returns a <code>map[string] string</code> containing the contents on the <code>Driver</code> section of the <code>configuration.toml</code> file.</p> <pre><code>[Driver]\nMySetting = \"My Value\"\n</code></pre> <p>For Go Device Services see Go Custom Structured Configuration for more details.</p> <p>For C Device Service see C Custom Structured Configuration for more details.</p>"},{"location":"microservices/device/Ch-DeviceServices/#secrets","title":"Secrets","text":"<p>EdgeX 2.0</p> <p>New in EdgeX 2.0 the Device Services now have the capability to store and retrieve secure secrets. Note that currently this only applies to Go based Device Services. The C SDK currently does not have support for <code>secrets</code> which is planned for the Jakarta 2.1 release.</p>"},{"location":"microservices/device/Ch-DeviceServices/#configuration","title":"Configuration","text":"<p>All instances of Device Services running in secure mode require a <code>SecretStore</code> to be created for the service by the Security Services. See Configuring Add-on Service for details on configuring a <code>SecretStore</code> to be created for the Device Service. With the use of <code>Redis Pub/Sub</code> as the default EdgeX MessageBus all Device Services need the <code>redisdb</code> known secret added to their <code>SecretStore</code> so they can connect to the Secure EdgeX MessageBus. See the Secure MessageBus documentation for more details.</p> <p>Each Device Service also has detailed configuration to enable connection to it's exclusive <code>SecretStore</code></p> <p>Example - SecretStore configuration for Device MQTT</p> <pre><code>[SecretStore]\nType = \"vault\"\nHost = \"localhost\"\nPort = 8200\nPath = \"device-mqtt/\"\nProtocol = \"http\"\nRootCaCertPath = \"\"\nServerName = \"\"\nTokenFile = \"/tmp/edgex/secrets/device-mqtt/secrets-token.json\"\n[SecretStore.Authentication]\nAuthType = \"X-Vault-Token\"\n</code></pre>"},{"location":"microservices/device/Ch-DeviceServices/#storing-secrets","title":"Storing Secrets","text":""},{"location":"microservices/device/Ch-DeviceServices/#secure-mode","title":"Secure Mode","text":"<p>When running an Device Service in secure mode, secrets can be stored in the SecretStore by making an HTTP <code>POST</code> call to the <code>/api/v2/secret</code> API route on the Device Service. The secret data POSTed is stored to the <code>SecretStore</code> based on values in the <code>[SecretStore]</code> section of the configuration. Once a secret is stored, only the service that added the secret will be able to retrieve it.  See the Secret API Reference for more details and example.</p>"},{"location":"microservices/device/Ch-DeviceServices/#insecure-mode","title":"Insecure Mode","text":"<p>When running in insecure mode, the secrets are stored and retrieved from the Writable.InsecureSecrets section of the service's configuration.toml file. Insecure secrets and their paths can be configured as below.</p> <p>Example - InsecureSecrets Configuration</p> <pre><code>   [Writable.InsecureSecrets]    [Writable.InsecureSecrets.DB]\npath = \"redisdb\"\n[Writable.InsecureSecrets.DB.Secrets]\nusername = \"\"\npassword = \"\"\n[Writable.InsecureSecrets.MQTT]\npath = \"credentials\"\n[Writable.InsecureSecrets.MQTT.Secrets]\nusername = \"mqtt-user\"\npassword = \"mqtt-password\"\n</code></pre>"},{"location":"microservices/device/Ch-DeviceServices/#retrieving-secrets","title":"Retrieving Secrets","text":"<p>Device Services retrieve secrets from their <code>SecretStore</code> using the SDK API.  See Retrieving Secrets for more details using the Go SDK. </p>"},{"location":"microservices/device/Ch-DeviceServices/#api-reference","title":"API Reference","text":"<p>Device Service - SDK- API Reference</p>"},{"location":"microservices/device/V2Migration/","title":"V2 Migration Guide","text":"<p>EdgeX 2.0</p> <p>For the EdgeX 2.0 (Ireland) release there are many backward breaking changes. These changes require custom Device Services and custom device profiles to be migrated. This section outlines the necessary steps for this migration.</p>"},{"location":"microservices/device/V2Migration/#custom-device-services","title":"Custom Device Services","text":""},{"location":"microservices/device/V2Migration/#configuration","title":"Configuration","text":"<p>The migration of any Device Service's configuration starts with migrating configuration common to all EdgeX services. See the V2 Migration of Common Configuration section for details. The remainder of this section focuses on configuration specific to Device Services.</p>"},{"location":"microservices/device/V2Migration/#device","title":"Device","text":"<ol> <li>Remove <code>ImitCmd</code>, <code>ImitCmdArgs</code>, <code>RemoveCmd</code> and <code>RemoveCmdArgs</code></li> <li>Add <code>UseMessageBus</code> to determine events should be published to MessageBus or sent by REST call.</li> <li>For C-based Device Services (eg, BACnet, Grove, CoAP): <code>UpdateLastConnected</code>, <code>MaxCmdOps</code>, <code>DataTransform</code>, <code>Discovery</code> and <code>MaxCmdResultLen</code> are dynamic settings - move these to <code>[Writable.Device]</code></li> <li>Add <code>DevicesDir</code> and <code>ProfilesDir</code> as an indication of where to load the device profiles and pre-defined devices. Convention is to put them under <code>/res</code> folder:</li> </ol> <p>Example configuration</p> <pre><code>[Device] DevicesDir = \"./res/devices\"\nProfilesDir = \"./res/profiles\"\n... </code></pre> <p>Example Project Structure</p> <pre><code>+- res\n|  +- devices\n|    +- device1.toml\n|    +- device2.toml\n|  +- profiles\n|    +- profile1.yml\n|    +- profile2.yml\n|  +- configuration.toml\n|  +- ...\n+- main.go\n+- device-service-binary\n</code></pre>"},{"location":"microservices/device/V2Migration/#messagequeue","title":"MessageQueue","text":"<p>Device Service is capable of pushing Events to Message Bus instead of sending it via REST call. A <code>MessageQueue</code> section is added in configuration to specify the detail of it.</p> <p>MessageQueue Example</p> <pre><code>[MessageQueue]\nProtocol = \"redis\"\nHost = \"localhost\"\nPort = 6379\nType = \"redis\"\nAuthMode = \"usernamepassword\"  # required for redis messagebus (secure or insecure).\nSecretName = \"redisdb\"\nPublishTopicPrefix = \"edgex/events/device\" # /&lt;device-profile-name&gt;/&lt;device-name&gt;/&lt;source-name&gt; will be added to this Publish Topic prefix\n[MessageQueue.Optional]\n# Default MQTT Specific options that need to be here to enable environment variable overrides of them\n# Client Identifiers\nClientId = \"device-simple\"\n# Connection information\nQos = \"0\" # Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once)\nKeepAlive = \"10\" # Seconds (must be 2 or greater)\nRetained = \"false\"\nAutoReconnect = \"true\"\nConnectTimeout = \"5\" # Seconds\nSkipCertVerify = \"false\" # Only used if Cert/Key file or Cert/Key PEMblock are specified\n</code></pre> <p>See the Device Service MessageQueue section for details.</p>"},{"location":"microservices/device/V2Migration/#code-golang","title":"Code (Golang)","text":""},{"location":"microservices/device/V2Migration/#dependencies","title":"Dependencies","text":"<p>You first need to update the <code>go.mod</code> file to specify <code>go 1.16</code> and the V2 versions of the Device SDK and any EdgeX go-mods directly used by your service. Note the extra <code>/v2</code> for the modules.</p> <p>Example go.mod for V2</p> <pre><code>module &lt;your service&gt;\n\ngo 1.16\n\nrequire (\ngithub.com/edgexfoundry/device-sdk-go/v2 v2.0.0\ngithub.com/edgexfoundry/go-mod-core-contracts/v2 v2.0.0\n...\n)\n</code></pre> <p>Once that is complete then the import statements for these dependencies must be updated to include the <code>/v2</code> in the path.</p> <p>Example import statements for V2</p> <pre><code>import (\n...\n\n\"github.com/edgexfoundry/device-sdk-go/v2/pkg/models\"\n\"github.com/edgexfoundry/go-mod-core-contracts/v2/common\"\n)\n</code></pre>"},{"location":"microservices/device/V2Migration/#commandvalue","title":"CommandValue","text":"<p><code>CommandValue</code> is redesigned to be more simple and straightforward. A single <code>Value</code> with <code>interface{}</code> type is able to accommodate reading value of supported type. As a result, you might notice the original API to create CommandValue is no longer working. In V2 we refactor all those API functions to create CommandValue of different type to a generic function:</p> <p>Create CommandValue with string Type</p> <pre><code>cv, err := models.NewCommandValue(deviceResourceName, v2.ValueTypeString, \"foobar\")\nif err != nil {\n...\n}\ncv.Origin = time.Now().Unixnano()\ncv.Tags[\"foo\"] = \"bar\"\n</code></pre> <p>The 3rd argument in the function must be able to cast into the Type defined in 2nd argument otherwise there will be error. See Data formats for supported data type in EdgeX.</p> <p>Device Service also supports Event Tagging, the tags on the CommandValue will be copied to Event.</p>"},{"location":"microservices/device/V2Migration/#code-c","title":"Code (C)","text":""},{"location":"microservices/device/V2Migration/#dependencies_1","title":"Dependencies","text":"<p>The CSDK now has additional dependencies on the Redis client library (hiredis, hiredis-dev) and Paho MQTT (paho-mqtt-c-dev)</p>"},{"location":"microservices/device/V2Migration/#attribute-and-protocols-processing","title":"Attribute and Protocols processing","text":"<p>Four new callback functions are defined and implementations of them are required. Their purpose is to take the parsing of attributes and protocols out of the get/put handlers so that it is not done for every single request.</p> <p>The device service implementation should define a structure to hold the attributes of a resource in a form suitable for use with whatever access library is being used to communicate with the devices. A function should then be written which allocates and populates this structure, given a set of resource attributes held in a string map. Another function should be written which frees an instance of the structure and any associated elements.</p> <p>A similar pair of functions should be written to process ProtocolProperties to address a device.</p> <pre><code>devsdk_address_t xxx_create_address (void *impl, const devsdk_protocols *protocols, iot_data_t **exception);\nvoid xxx_free_address (void *impl, devsdk_address_t address);\ndevsdk_resource_attr_t xxx_create_resource_attr (void *impl, const iot_data_t *attributes, iot_data_t **exception);\nvoid xxx_free_resource_attr (void *impl, devsdk_resource_attr_t attr);\n</code></pre> <p>In the event of an attribute or protocol set being invalid, the create function should return <code>NULL</code> and allocate a string value into the exception parameter indicating the nature of the problem - this will be logged by the SDK.</p>"},{"location":"microservices/device/V2Migration/#get-and-put-handlers","title":"Get and Put handlers","text":"<ul> <li>The <code>devname</code> and <code>protocols</code> parameters are replaced by an object of type <code>devsdk_device_t</code>; this contains <code>name</code> (<code>char *</code>) and <code>address</code> (<code>devsdk_address_t</code> - see above) fields</li> <li>The resource <code>name</code>, <code>type</code> and <code>attributes</code> (the latter now represented as <code>devsdk_resource_attr_t</code>) in a <code>devsdk_commandrequest</code> are now held in a <code>devsdk_resource_t</code> structure</li> <li><code>qparams</code> is renamed to <code>options</code> and is now an <code>iot_data_t</code> map (string/string)</li> <li><code>options</code> is also added to the put handler parameters</li> </ul>"},{"location":"microservices/device/V2Migration/#callback-function-list","title":"Callback function list","text":"<p>The callback list structure has been made opaque. An instance of it to pass into the <code>devsdk_service_new</code> function is created by calling <code>devsdk_callbacks_init</code>. This takes as parameters the mandatory callback functions (init, get/set handlers, stop, create/free addr and create/free resource attr). Services which implement optional callbacks should set these using the relevant population functions:</p> <pre><code>* devsdk_callbacks_set_discovery\n* devsdk_callbacks_set_reconfiguration\n* devsdk_callbacks_set_listeners\n* devsdk_callbacks_set_autoevent_handlers\n</code></pre>"},{"location":"microservices/device/V2Migration/#misc","title":"Misc","text":"<ul> <li><code>edgex_free_device()</code> now takes the <code>devsdk_service_t</code> as its first parameter</li> <li>Reflecting changes in the device profile (see below), the <code>edgex_deviceresource</code> struct now contains an <code>edgex_propertyvalue</code> directly, rather than via an <code>edgex_profileproperty</code>. The <code>edgex_propertyvalue</code> contains a new field <code>char *units</code> which replaces the old <code>edgex_units</code> structure.</li> </ul>"},{"location":"microservices/device/V2Migration/#device-profiles","title":"Device Profiles","text":"<p>See Device Profile Reference for details, SDK now allows both YAML and JSON format.</p>"},{"location":"microservices/device/V2Migration/#device-resource","title":"Device Resource","text":"<p><code>properties</code> field is simplified in device resource:  </p> <ul> <li><code>units</code> becomes a single string field and it's optional  </li> <li><code>Float32</code> and <code>Float64</code> type are both only represented in eNotation. Base64 encoding is removed so there is no <code>floatEncoding</code> field anymore</li> </ul> <p>V1: <pre><code>deviceResources:\n-\nname: \"Xrotation\"\ndescription: \"X axis rotation rate\"\nproperties:\nvalue:\n{ type: \"Int32\", readWrite: \"RW\" }\nunits:\n{ type: \"string\", readWrite: \"R\", defaultValue: \"degrees/sec\" }\n</code></pre></p> <p>V2: <pre><code>deviceResources:\n-\nname: \"Xrotation\"\ndescription: \"X axis rotation rate\"\nproperties:\nvalueType: \"Int32\"\nreadWrite: \"RW\"\n</code></pre></p>"},{"location":"microservices/device/V2Migration/#device-command","title":"Device Command","text":"<p><code>get</code> and <code>set</code> ResourceOperation field is replaced with a single <code>readWrite</code> field to eliminate the duplicate definition.</p> <p>V1: <pre><code>deviceCommands:\n-\nname: \"Rotation\"\nget:\n- { operation: \"get\", deviceResource: \"Xrotation\" }\n- { operation: \"get\", deviceResource: \"Yrotation\" }\n- { operation: \"get\", deviceResource: \"Zrotation\" }\nset:\n- { operation: \"set\", deviceResource: \"Xrotation\", parameter: \"0\" }\n- { operation: \"set\", deviceResource: \"Yrotation\", parameter: \"0\" }\n- { operation: \"set\", deviceResource: \"Zrotation\", parameter: \"0\" }\n</code></pre> V2: <pre><code>deviceCommands:\n-\nname: \"Rotation\"\nisHidden: false\nreadWrite: \"RW\"\nresourceOperations:\n- { deviceResource: \"Xrotation\", defaultValue: \"0\" }\n- { deviceResource: \"Yrotation\", defaultValue: \"0\" }\n- { deviceResource: \"Zrotation\", defaultValue: \"0\" }\n</code></pre></p>"},{"location":"microservices/device/V2Migration/#core-command","title":"Core Command","text":"<p><code>coreCommands</code> section is removed in V2. We use <code>isHidden</code> field in both deviceResource and deviceCommand to indicates whether it is exposed to Command Service or not. <code>isHidden</code> default to false so all deviceResource and deviceCommand is able to be called via Command Service REST API. Set <code>isHidden</code> to true if you don't want to expose them.</p>"},{"location":"microservices/device/V2Migration/#devices","title":"Devices","text":""},{"location":"microservices/device/V2Migration/#state","title":"State","text":"<p>In V2 the values of a device's operating state are changed from <code>ENABLED</code>/<code>DISABLED</code> to <code>UP</code>/<code>DOWN</code>. The additional state value <code>UNKNOWN</code> is added for future use.</p>"},{"location":"microservices/device/V2Migration/#pre-defined-devices","title":"Pre-defined Devices","text":"<p>In V2 pre-defined devices are in their own file, SDK allows both TOML and JSON format.</p> <p>Pre-defined devices</p> <pre><code>[[DeviceList]]\nName = \"Simple-Device01\"\nProfileName = \"Simple-Device\"\nDescription = \"Example of Simple Device\"\nLabels = [ \"industrial\" ]\n[DeviceList.Protocols]\n[DeviceList.Protocols.other]\nAddress = \"simple01\"\nPort = \"300\"\n[[DeviceList.AutoEvents]]\nInterval = \"10s\"\nOnChange = false\nSourceName = \"Switch\"\n[[DeviceList.AutoEvents]]\nInterval = \"30s\"\nOnChange = false\nSourceName = \"Image\"\n</code></pre> <p>Notice that we renamed some fields:  </p> <ul> <li><code>Profle</code> is renamed to <code>ProfileName</code> </li> <li><code>Frequency</code> is renamed to <code>Interval</code> </li> <li><code>Resource</code> is renamed to <code>SourceName</code></li> </ul>"},{"location":"microservices/device/V2Migration/#device-mqtt","title":"Device MQTT","text":"<p>The Device MQTT service specific <code>[Driver]</code> and <code>[DeviceList.Protocols.mqtt]</code> sections have changed for V2. The MQTT Broker connection configuration has been consolidated to just one MQTT Client and now supports SecretStore for the authentication credentials.</p>"},{"location":"microservices/device/V2Migration/#driver-mqttbrokerinfo","title":"Driver =&gt; MQTTBrokerInfo","text":"<p>The <code>[Driver]</code> section has been replaced with the new <code>[MQTTBrokerInfo]</code>structured custom configuration section. The setting under <code>[MQTTBrokerInfo.Writable]</code>can be dynamically updated from Consul without needing to restart the service.</p> <p>Example - V1 Driver configuration</p> <pre><code># Driver configs\n[Driver]\nIncomingSchema = 'tcp'\nIncomingHost = '0.0.0.0'\nIncomingPort = '1883'\nIncomingUser = 'admin'\nIncomingPassword = 'public'\nIncomingQos = '0'\nIncomingKeepAlive = '3600'\nIncomingClientId = 'IncomingDataSubscriber'\nIncomingTopic = 'DataTopic'\nResponseSchema = 'tcp'\nResponseHost = '0.0.0.0'\nResponsePort = '1883'\nResponseUser = 'admin'\nResponsePassword = 'public'\nResponseQos = '0'\nResponseKeepAlive = '3600'\nResponseClientId = 'CommandResponseSubscriber'\nResponseTopic = 'ResponseTopic'\nConnEstablishingRetry = '10'\nConnRetryWaitTime = '5'\n</code></pre> <p>Example - V2 MQTTBrokerInfo configuration section</p> <pre><code>[MQTTBrokerInfo]\nSchema = \"tcp\"\nHost = \"0.0.0.0\"\nPort = 1883\nQos = 0\nKeepAlive = 3600\nClientId = \"device-mqtt\"\n\nCredentialsRetryTime = 120 # Seconds\nCredentialsRetryWait = 1 # Seconds\nConnEstablishingRetry = 10\nConnRetryWaitTime = 5\n\n# AuthMode is the MQTT broker authentication mechanism. \n# Currently, \"none\" and \"usernamepassword\" is the only AuthMode\n# supported by this service, and the secret keys are \"username\" and \"password\".\nAuthMode = \"none\"\nCredentialsPath = \"credentials\"\n\nIncomingTopic = \"DataTopic\"\nresponseTopic = \"ResponseTopic\"\n\n[MQTTBrokerInfo.Writable]\n# ResponseFetchInterval specifies the retry \n# interval(milliseconds) to fetch the command response from the MQTT broker\nResponseFetchInterval = 500\n</code></pre>"},{"location":"microservices/device/V2Migration/#devicelistprotocolsmqtt","title":"DeviceList.Protocols.mqtt","text":"<p>Now that there is a single MQTT Broker connection, the configuration in <code>[DeviceList.Protocols.mqtt]</code> for each device has been greatly simplified to just the CommandTopic the device is subscribed. Note that this topic needs to be a unique topic for each device defined.</p> <p>Example - V1 DeviceList.Protocols.mqtt device configuration section</p> <pre><code>[DeviceList.Protocols]\n[DeviceList.Protocols.mqtt]\nSchema = 'tcp'\nHost = '0.0.0.0'\nPort = '1883'\nClientId = 'CommandPublisher'\nUser = 'admin'\nPassword = 'public'\nTopic = 'CommandTopic'\n</code></pre> <p>Example - V2 DeviceList.Protocols.mqtt device configuration section</p> <pre><code>  [DeviceList.Protocols]\n[DeviceList.Protocols.mqtt]\nCommandTopic = 'CommandTopic'\n</code></pre>"},{"location":"microservices/device/V2Migration/#secretstore","title":"SecretStore","text":""},{"location":"microservices/device/V2Migration/#secure","title":"Secure","text":"<p>See the Secret API reference for injecting authentication credentials into a Device Service's secure SecretStore. </p> <p>Example - Authentication credentials injected via Device MQTT's <code>Secret</code> endpoint</p> <pre><code>curl -X POST http://localhost:59982/api/v2/secret  -H 'Content-Type: application/json' -d '{ \"apiVersion\": \"v2\", \"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\", \"path\": \"credentials\", \"secretData\": [  {   \"key\": \"username\", \"value\": \"mqtt-user\"  }, {  \"key\": \"password\", \"value\": \"mqtt-password\" } ]}'  </code></pre> <p>Note</p> <p>The service has to be running for this endpoint to be available.  The following <code>[MQTTBrokerInfo]</code> settings from above allow a window of time to inject the credentials. <pre><code>CredentialsRetryTime = 120 # Seconds\nCredentialsRetryWait = 1 # Seconds\n</code></pre></p>"},{"location":"microservices/device/V2Migration/#non-secure","title":"Non Secure","text":"<p>For non-secure mode the authentication credentials need to be added to the [InsecureSecrets] configuration section. </p> <p>Example - Authentication credentials in Device MQTT's <code>[InsecureSecrets]</code> configuration section</p> <pre><code>[Writable.InsecureSecrets]\n[Writable.InsecureSecrets.MQTT]\npath = \"credentials\"\n[Writable.InsecureSecrets.MQTT.Secrets]\nusername = \"mqtt-user\"\npassword = \"mqtt-password\"\n</code></pre>"},{"location":"microservices/device/V2Migration/#device-camera","title":"Device Camera","text":"<p>The Device Camera service specific <code>[Driver]</code> and <code>[DeviceList.Protocols.HTTP]</code> sections have changed for V2 due to the addition of the SecretStore capability and per camera credentials. The plain text camera credentials have been replaced with settings describing where to pull them from the SecretStore for each camera device specified.</p>"},{"location":"microservices/device/V2Migration/#driver","title":"Driver","text":"<p>Example V1 Driver configuration section</p> <pre><code>[Driver]\nUser = 'service'\nPassword = 'Password!1'\n# Assign AuthMethod to 'digest' | 'basic' | 'none'\n# AuthMethod specifies the authentication method used when\n# requesting still images from the URL returned by the ONVIF\n# \"GetSnapshotURI\" command.  All ONVIF requests will be\n# carried out using digest auth.\nAuthMethod = 'basic'\n</code></pre> <p>Example V2 Driver configuration section</p> <pre><code>[Driver]\nCredentialsRetryTime = '120' # Seconds\nCredentialsRetryWait = '1' # Seconds\n</code></pre>"},{"location":"microservices/device/V2Migration/#devicelistprotocolshttp","title":"DeviceList.Protocols.HTTP","text":"<p>Example V1 DeviceList.Protocols.HTTP device configuration section</p> <pre><code>[DeviceList.Protocols]\n[DeviceList.Protocols.HTTP]\nAddress = '192.168.2.105'\n</code></pre> <p>Example V2 DeviceList.Protocols.HTTP device configuration section</p> <pre><code>[DeviceList.Protocols]\n[DeviceList.Protocols.HTTP]\nAddress = '192.168.2.105'\n# Assign AuthMethod to 'digest' | 'usernamepassword' | 'none'\n# AuthMethod specifies the authentication method used when\n# requesting still images from the URL returned by the ONVIF\n# \"GetSnapshotURI\" command.  All ONVIF requests will be\n# carried out using digest auth.\nAuthMethod = 'usernamepassword'\nCredentialsPath = 'credentials001'\n</code></pre>"},{"location":"microservices/device/V2Migration/#secretstore_1","title":"SecretStore","text":""},{"location":"microservices/device/V2Migration/#secure_1","title":"Secure","text":"<p>See the Secret API reference for injecting authentication credentials into a Device Service's secure SecretStore. An entry is required for each camera that is configured with <code>AuthMethod = 'usernamepassword'</code></p> <p>Example - Authentication credentials injected via Device Camera's <code>Secret</code> endpoint</p> <pre><code>curl -X POST http://localhost:59985/api/v2/secret  -H 'Content-Type: application/json' -d '{ \"apiVersion\": \"v2\", \"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\", \"path\": \"credentials001\", \"secretData\": [  {   \"key\": \"username\", \"value\": \"camera-user\"  }, {  \"key\": \"password\", \"value\": \"camera-password\" } ]}'  </code></pre> <p>Note</p> <p>The service has to be running for this endpoint to be available.  The following <code>[Driver]</code> settings from above allow a window of time to inject the credentials.</p> <pre><code>CredentialsRetryTime = 120 # Seconds\nCredentialsRetryWait = 1 # Seconds\n</code></pre>"},{"location":"microservices/device/V2Migration/#non-secure_1","title":"Non Secure","text":"<p>For non-secure mode the authentication credentials need to be added to the [InsecureSecrets] configuration section. An entry is required for each camera that is configured with <code>AuthMethod = 'usernamepassword'</code></p> <p>Example - Authentication credentials in Device Camera's <code>[InsecureSecrets]</code> configuration section</p> <pre><code>[Writable.InsecureSecrets.Camera001]\npath = \"credentials001\"\n[Writable.InsecureSecrets.Camera001.Secrets]\nusername = \"camera-user\"\npassword = \"camera-password\"\n</code></pre>"},{"location":"microservices/device/profile/Ch-DeviceProfile/","title":"Device Profile","text":"<p>The device profile describes a type of device within the EdgeX system. Each device managed by a device service has an association with a device profile, which defines that device type in terms of the operations which it supports.</p> <p>For a full list of device profile fields and their required values see the device profile reference.</p> <p>For a detailed look at the device profile model and all its properties, see the metadata device profile data model.</p>"},{"location":"microservices/device/profile/Ch-DeviceProfile/#identification","title":"Identification","text":"<p>The profile contains various identification fields. The <code>Name</code> field is required and must be unique in an EdgeX deployment. Other fields are optional - they are not used by device services but may be populated for informational purposes:</p> <ul> <li>Description</li> <li>Manufacturer</li> <li>Model</li> <li>Labels</li> </ul>"},{"location":"microservices/device/profile/Ch-DeviceProfile/#deviceresources","title":"DeviceResources","text":"<p>A deviceResource specifies a sensor value within a device that may be read from or written to either individually or as part of a deviceCommand. It has a name for identification and a description for informational purposes.</p> <p>The device service allows access to deviceResources via its <code>device</code> REST endpoint.</p> <p>The <code>Attributes</code> in a deviceResource are the device-service-specific parameters required to access the particular value. Each device service implementation will have its own set of named values that are required here, for example a BACnet device service may need an Object Identifier and a Property Identifier whereas a Bluetooth device service could use a UUID to identify a value.</p> <p>The <code>Properties</code> of a deviceResource describe the value and optionally request some simple processing to be performed on it. The following fields are available:</p> <ul> <li>valueType - Required. The data type of the value. Supported types are <code>Bool</code>, <code>Int8</code> - <code>Int64</code>, <code>Uint8</code> - <code>Uint64</code>, <code>Float32</code>, <code>Float64</code>, <code>String</code>, <code>Binary</code>, <code>Object</code> and arrays of the primitive types (ints, floats, bool). Arrays are specified as eg. <code>Float32Array</code>, <code>BoolArray</code> etc.</li> <li>readWrite - <code>R</code>, <code>RW</code>, or <code>W</code> indicating whether the value is readable or writable.</li> <li>units - indicate the units of the value, eg Amperes, degrees C, etc.</li> <li>minimum - minimum value a SET command is allowed, out of range will result in error.</li> <li>maximum - maximum value a SET command is allowed, out of range will result in error.</li> <li>defaultValue - a value used for SET command which do not specify one.</li> <li>assertion - a string value to which a reading (after processing) is compared.  If the reading is not the same as the assertion value, the device's operating state will be set to disable. This can be useful for health checks.</li> <li>base - a value to be raised to the power of the raw reading before it is returned.</li> <li>scale - a factor by which to multiply a reading before it is returned.</li> <li>offset - a value to be added to a reading before it is returned.</li> <li>mask - a binary mask which will be applied to an integer reading.</li> <li>shift - a number of bits by which an integer reading will be shifted right.</li> </ul> <p>The processing defined by base, scale, offset, mask and shift is applied in that order. This is done within the SDK. A reverse transformation is applied by the SDK to incoming data on set operations (NB mask transforms on set are NYI)</p>"},{"location":"microservices/device/profile/Ch-DeviceProfile/#devicecommands","title":"DeviceCommands","text":"<p>DeviceCommands define access to reads and writes for multiple simultaneous device resources. Each named deviceCommand should contain a number of <code>resourceOperations</code>.</p> <p>DeviceCommands may be useful when readings are logically related, for example with a 3-axis accelerometer it is helpful to read all axes together.</p> <p>A resourceOperation consists of the following properties:</p> <ul> <li>deviceResource - the name of the deviceResource to access.</li> <li>defaultValue - optional, a value that will be used if a SET command does not specify one.</li> <li>mappings - optional, allows readings of String type to be re-mapped.</li> </ul> <p>The device service allows access to deviceCommands via the same <code>device</code> REST endpoint as is used to access deviceResources.</p> <p>EdgeX 2.0</p> <p>For the EdgeX 2.0 (Ireland) release coreCommands section is removed and both deviceResources and deviceCommands are available via the Core Command Service by default. Set <code>isHidden</code> field to true under deviceResource or deviceCommand to disable the outward-facing API.</p>"},{"location":"microservices/device/profile/Ch-DeviceProfileRef/","title":"Device Profile Reference","text":"<p>This chapter details the structure of a Device Profile and allowable values for its fields.</p>"},{"location":"microservices/device/profile/Ch-DeviceProfileRef/#device-profile","title":"Device Profile","text":"Field Name Type Required? Notes name String Y Must be unique in the EdgeX deployment. Only allow unreserved characters as defined in https://tools.ietf.org/html/rfc3986#section-2.3. description String N manufacturer String N model String N labels Array of String N deviceResources Array of DeviceResource Y deviceCommands Array of DeviceCommand N"},{"location":"microservices/device/profile/Ch-DeviceProfileRef/#deviceresource","title":"DeviceResource","text":"Field Name Type Required? Notes name String Y Must be unique in the EdgeX deployment. Only allow unreserved characters as defined in https://tools.ietf.org/html/rfc3986#section-2.3. description String N isHidden Bool N Expose the DeviceResource to Command Service or not, default false tag String N attributes String-Interface Map N Each Device Service should define required and optional keys properties ResourceProperties Y"},{"location":"microservices/device/profile/Ch-DeviceProfileRef/#resourceproperties","title":"ResourceProperties","text":"Field Name Type Required? Notes valueType Enum Y <code>Uint8</code>, <code>Uint16</code>, <code>Uint32</code>, <code>Uint64</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Float32</code>, <code>Float64</code>, <code>Bool</code>, <code>String</code>, <code>Binary</code>, <code>Object</code>, <code>Uint8Array</code>, <code>Uint16Array</code>, <code>Uint32Array</code>, <code>Uint64Array</code>, <code>Int8Array</code>, <code>Int16Array</code>, <code>Int32Array</code>, <code>Int64Array</code>, <code>Float32Array</code>, <code>Float64Array</code>, <code>BoolArray</code> readWrite Enum Y <code>R</code>, <code>W</code>, <code>RW</code> units String N Developer is open to define units of value minimum String N Error if SET command value out of minimum range maximum String N Error if SET command value out of maximum range defaultValue String N If present, should be compatible with the Type field mask String N Only valid where Type is one of the unsigned integer types shift String N Only valid where Type is one of the unsigned integer types scale String N Only valid where Type is one of the integer or float types offset String N Only valid where Type is one of the integer or float types base String N Only valid where Type is one of the integer or float types assertion String N String value to which the reading is compared mediaType String N Only required when valueType is <code>Binary</code>"},{"location":"microservices/device/profile/Ch-DeviceProfileRef/#devicecommand","title":"DeviceCommand","text":"Field Name Type Required? Notes name String Y Must be unique in this profile. A DeviceCommand with a single DeviceResource is redundant unless renaming and/or restricting R/W access. For example DeviceResource is RW, but DeviceCommand is read-only. Only allow unreserved characters as defined in https://tools.ietf.org/html/rfc3986#section-2.3. isHidden Bool N Expose the DeviceCommand to Command Service or not, default false readWrite Enum Y <code>R</code>, <code>W</code>, <code>RW</code> resourceOperations Array of ResourceOperation Y"},{"location":"microservices/device/profile/Ch-DeviceProfileRef/#resourceoperation","title":"ResourceOperation","text":"Field Name Type Required? Notes deviceResource String Y Must name a DeviceResource in this profile defaultValue String N If present, should be compatible with the Type field of the named DeviceResource mappings String-String Map N Map the GET resourceOperation value to another string value"},{"location":"microservices/device/sdk/Ch-DeviceSDK/","title":"Device Services SDK","text":""},{"location":"microservices/device/sdk/Ch-DeviceSDK/#introduction-to-the-sdks","title":"Introduction to the SDKs","text":"<p>EdgeX provides two software development kits (SDKs) to help developers create new device services.  While the EdgeX community and the larger EdgeX ecosystem provide a number of open source and commercially available device services for use with EdgeX, there is no way that every protocol and every sensor can be accommodated and connected to EdgeX with a pre-existing device service.  Even if all the device service connectivity were provided, your use case, sensor or security infrastructure may require customization.  Therefore, the device service SDKs provide the means to extend or customize EdgeX\u2019s device connectivity.</p> <p>EdgeX is mostly written in Go and C.  There is a device service SDK written in both Go and C to support the more popular languages used in EdgeX today.  In the future, alternate language SDKs may be provided by the community or made available by the larger ecosystem.</p> <p>The SDKs are really libraries to be incorporated into a new micro service.  They make writing a new device service much easier.  By importing the SDK library of choice into your new device service project, you can focus on the details associated with getting and manipulating sensor data from your device via the specific protocol of your device.  Other details, such as initialization of the device service, getting the service configured, sending sensor data to core data, managing communications with core metadata, and much more are handled by the code in the SDK library.  The code in the SDK also helps to ensure your device service adheres to rules and standards of EdgeX \u2013 such as making sure the service registers with the EdgeX registry service when it starts up.</p> <p>The EdgeX Foundry Device Service Software Development Kit (SDK) takes the developer through the step-by-step process to create an EdgeX Foundry device service micro service. Then setup the SDK and execute the code to generate the device service scaffolding to get you started using EdgeX.</p> <p>The Device Service SDK supports:</p> <ul> <li>Synchronous read and write operations</li> <li>Asynchronous device data collection</li> <li>Initialization and deconstruction of Driver Interface</li> <li>Initialization and destruction of Device Connection</li> <li>Framework for automated Provisioning Mechanism</li> <li>Support for multiple classes of Devices with Profiles</li> <li>Support for sets of actions triggered by a command</li> <li>Cached responses to queries</li> </ul>"},{"location":"microservices/device/sdk/Ch-DeviceSDK/#writing-a-device-service","title":"Writing a Device Service","text":"<ul> <li>Writing a new Device Service in Go</li> <li>Writing a new Device Service in C</li> </ul>"},{"location":"microservices/device/sdk/Ch-DeviceSDK/#reference","title":"Reference","text":"<ul> <li>C SDK Reference Guide</li> </ul>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/","title":"Device Services C SDK Reference","text":""},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#introduction","title":"Introduction","text":"<p>This page provides detail on the API provided by the C SDK. A device service implementation will define a number of callback functions, and a <code>main</code> function which registers these functions with the SDK and uses the SDK lifecycle methods to start the service and shut it down. The implementation may also use some of the helper functions which the SDK provides.</p> <p>In various places information is passed between the SDK and the DS implementation using the <code>iot_data_t</code> type. This is a holder for data of different types, and its use is described in its own page : Use of iot_data_t</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#types","title":"Types","text":""},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_service_t","title":"devsdk_service_t","text":"<p>This struct represents a running device service. An instance of it is created by calling <code>devsdk_service_new</code>, and this instance should be passed in subsequent sdk function calls.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_callbacks","title":"devsdk_callbacks","text":"<p>This struct type holds pointers to the various callback functions which the device service implementor needs to define in order to do the device-specific work of the service</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_address_t","title":"devsdk_address_t","text":"<p>This is an alias to <code>void*</code>. Implementations should define their own structure for device addresses and cast <code>devsdk_address_t*</code> to pointers to that structure.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_resource_attr_t","title":"devsdk_resource_attr_t","text":"<p>This is an alias to <code>void*</code>. Implementations should define their own structure for device resource information and cast <code>devsdk_resource_attr_t*</code> to pointers to that structure.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_protocols","title":"devsdk_protocols","text":"<p>This is an opaque structure which holds protocol properties. The <code>devsdk_protocols_properties</code> function is used to find the properties for a particular protocol.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_error","title":"devsdk_error","text":"<p>This structure is used to pass errors back from the device service startup and shutdown functions</p> Field Type Content code uint32_t A numeric code indicating the error. Zero is used for success reason const char * A string describing the error <p>An instance of devsdk_error with the code field set to zero should be passed by reference when calling startup and shutdown functions</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_device_t","title":"devsdk_device_t","text":"<p>Specifies a device</p> Field Type Content name char* The device's name (for logging purposes) address devsdk_address_t Address of the device in parsed form"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_resource_t","title":"devsdk_resource_t","text":"<p>Specifies a resource on a device</p> Field Type Content name char* The resource name (for logging purposes) attrs devsdk_resource_attr_t Resource attributes in parsed form type iot_typecode_t* Expected type of values read from or written to the resource"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_commandrequest","title":"devsdk_commandrequest","text":"<p>Specifies a resource in a get or put request</p> Field Type Content resource devsdk_resource_t* The resource definition mask uint64_t Mask to be applied (put requests only)"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_commandresult","title":"devsdk_commandresult","text":"<p>Holds a value which has been read from a resource</p> Field Type Content value iot_data_t* The value which has been read origin uint64_t Timestamp of the value <p>The timestamp is specified in nanoseconds past the epoch. It should only be set if one is provided by the device itself. Otherwise the timestamp should be left at zero and the SDK will use the current time.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_device_resources","title":"devsdk_device_resources","text":"<p>A list of device resources available on a device</p> Field Type Content resname char* Name of the resource attributes iot_data_t* String-keyed map of the resource attributes type iot_typecode_t* Type of the data which may be read or written readable bool Whether this resource is readable writable bool Whether this resource is writable next devsdk_device_resources* The next resource in the list, or NULL if this is the last"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_devices","title":"devsdk_devices","text":"<p>A description of a device or a list of such descriptions</p> Field Type Content device devsdk_device_t* The device's name and addressing information resources devsdk_device_resources* Information on the device's resources next devsdk_devices* The next device in the list, or NULL if this is the last"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#callbacks","title":"Callbacks","text":"<p>Note that each of the callback functions has as its first parameter a <code>void*</code> pointer. This pointer is specified by the implementation when the device service is created, and is passed to all callbacks. It may therefore be used to hold whatever state is required by the implementation.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#required-callback-functions","title":"Required callback functions","text":""},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_initialize","title":"devsdk_initialize","text":"<p>This function is called during the service start operation. Its purpose is to supply the implementation with a logger and configuration.</p> Parameter Type Description impl void* The context data passed in when the service was created lc iot_logger_t* A logging client for the device service config iot_data_t* A string-keyed map containing the configuration specified in the service's \"Driver\" section <p>The function should return true to indicate that initialization was successful, or false to abort the service startup - eg if the supplied configuration was invalid or resources were not available</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_create_address","title":"devsdk_create_address","text":"<p>This function should take the protocol properties that were specified for a device, and create an object representing the device's address in a form suitable for subsequent access.</p> Parameter Type Description impl void* The context data passed in when the service was created protocols const devsdk_protocols* The protocol properties for the device exception iot_data_t** Additional information in the event of an error <p>If the supplied protocol properties are valid (ie, mandatory elements are supplied and have valid values), the function should return an allocated structure representing the address. Otherwise the function should return NULL, and set <code>*exception</code> to a string (using eg. <code>iot_data_alloc_string</code>) containing an error message.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_free_address","title":"devsdk_free_address","text":"<p>This function should free a structure that was previously allocated in the <code>devsdk_create_address</code> implementation.</p> Parameter Type Description impl void* The context data passed in when the service was created address devsdk_address_t The object to be freed."},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_create_resource_attr","title":"devsdk_create_resource_attr","text":"<p>This function should take the attributes that were specified for a deviceResource, and create an object representing these attributes in a form suitable for subsequent access.</p> Parameter Type Description impl void* The context data passed in when the service was created attributes const iot_data_t* The attributes for the device exception iot_data_t** Additional information in the event of an error <p>If the supplied attributes are valid (ie, mandatory elements are supplied and have valid values), the function should return an allocated structure representing the resource within the device. Otherwise the function should return NULL, and set <code>*exception</code> to a string (using eg. <code>iot_data_alloc_string</code>) containing an error message.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_free_resource_attr","title":"devsdk_free_resource_attr","text":"<p>This function should free a structure that was previously allocated in the <code>devsdk_create_resource_attr</code> implementation</p> Parameter Type Description impl void* The context data passed in when the service was created resource devsdk_resource_attr_t The object to be freed"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_handle_get","title":"devsdk_handle_get","text":"<p>This function is called when a get (read) request on a deviceResource or deviceCommand is made. In the former case, the request is for a single reading and in the latter, for multiple readings. These readings will be packaged by the SDK into an Event.</p> Parameter Type Description impl void* The context data passed in when the service was created device devsdk_device_t* The name and address of the device to be queried nreadings uint32_t The number of readings being requested requests devsdk_commandrequest* Array containing details of the resources to be queried readings devsdk_commandresult* Array that the function should populate, with results of this request options iot_data_t* Any options which were specified in this request exception iot_data_t** Additional information in the event of an error <p>The readings array will have been allocated in the SDK; the implementation should set the results into <code>readings[0]...readings[nreadings - 1]</code>.</p> <p><code>Options</code> will be a string-keyed map which contains any options set specifically on this request. In the current implementation these may have been set via query parameters in the URL used to make the request.</p> <p>The function should return true if all of the requested resources were successfully read. Otherwise, <code>*exception</code> should be allocated with a string value indicating the problem (this will be logged and returned to the caller), and false returned.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_handle_put","title":"devsdk_handle_put","text":"<p>This function is called when a put (write) request on a deviceResource or deviceCommand is made. In the former case, the request is for a single resource and in the latter, for multiple resources.</p> Parameter Type Description impl void* The context data passed in when the service was created device devsdk_device_t* The name and address of the device to be written to nreadings uint32_t The number of resources to be written requests devsdk_commandrequest* Array containing details of the resources to be written values iot_data_t*[] Array of values to be written options iot_data_t* Any options which were specified in this request exception iot_data_t** Additional information in the event of an error <p>If the <code>mask</code> field in an element of the request array is nonzero, the implementation should implement the following:</p> <pre><code>new-value = (current-value &amp; mask) | request-value\n</code></pre> <p><code>Options</code> will be a string-keyed map which contains any options set specifically on this request. In the current implementation these may have been set via query parameters in the URL used to make the request.</p> <p>The function should return true if all of the requested resources were successfully written. Otherwise, <code>*exception</code> should be allocated with a string value indicating the problem (this will be logged and returned to the caller), and false returned.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_stop","title":"devsdk_stop","text":"<p>The implementation should perform any cleanup necessary before shutdown. At the time that this function is called, the service will be quiescent, ie there will be no new incoming requests.</p> Parameter Type Description impl void* The context data passed in when the service was created force bool An unclean shutdown may be performed if necessary. Long or indefinite timeouts should not occur."},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_callbacks_init","title":"devsdk_callbacks_init","text":"<p>Call this function in order to create a devsdk_callbacks object containing the required callback functions. This may then be passed to the SDK when starting the service</p> Parameter Type init devsdk_initialize gethandler devsdk_handle_get puthandler devsdk_handle_put stop devsdk_stop create_addr devsdk_create_address free_addr devsdk_free_address create_res devsdk_create_resource_attr free_res devsdk_free_resource_attr"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#optional-callback-functions","title":"Optional callback functions","text":""},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_reconfigure","title":"devsdk_reconfigure","text":"<p>Implement this function in order to allow changes in the device-specific configuration to be made without restarting the service.</p> Parameter Type Description impl void* The context data passed in when the service was created config iot_data_t* The new configuration (contains all elements, not just those which have changed)"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_callbacks_set_reconfiguration","title":"devsdk_callbacks_set_reconfiguration","text":"<p>Call this to add your reconfiguration function to the callbacks structure</p> Parameter Type Description cb devsdk_callbacks* structure to be modified reconf devsdk_reconfigure function to add"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_discover","title":"devsdk_discover","text":"<p>This function is called when a request for discovery is made. This may occur automatically at intervals or due to an external request. The SDK implements locking such that multiple invocations of this function will not be made in parallel.</p> <p>Implementations should perform a scan for devices, and use the <code>devsdk_add_discovered_devices</code> function to register them.</p> Parameter Type Description impl void* The context data passed in when the service was created"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_describe","title":"devsdk_describe","text":"<p>This is a placeholder function for future use. Its purpose will be to allow automatic generation of device profiles. It is not used in current versions of EdgeX.</p> Parameter Type Description impl void* The context data passed in when the service was created dev devsdk_device_t* The device which is to be described options iot_data_t* Service specific discovery options map. May be NULL resources devsdk_device_resources** The operations supported by the device exception iot_data_t** Additional information in the event of an error <p>Implementations should populate the <code>resources</code> parameter and return true if it is possible to automatically describe the device. Otherwise return false and set <code>exception</code>.</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_callbacks_set_discovery","title":"devsdk_callbacks_set_discovery","text":"<p>Call this to add your discovery functions to the callbacks structure</p> Parameter Type Description cb devsdk_callbacks* structure to be modified discover devsdk_discover device discovery function describe devsdk_describe device description function, may be NULL (currently unused)"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_add_device_callback","title":"devsdk_add_device_callback","text":"<p>To be notified when a device is added to the system (and assigned to this device service), provide an implementation of this function</p> Parameter Type Description impl void* The context data passed in when the service was created devname char* The name of the new device protocols devsdk_protocols* The protocol properties that comprise the device's address resources devsdk_device_resources* The operations supported by the device adminEnabled bool Whether the device is administratively enabled"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_update_device_callback","title":"devsdk_update_device_callback","text":"<p>To be notified when a device managed by this service is modified, provide an implementation of this function</p> Parameter Type Description impl void* The context data passed in when the service was created devname char* The name of the updated device protocols devsdk_protocols* The protocol properties that comprise the device's address state bool Whether the device is administratively enabled"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_remove_device_callback","title":"devsdk_remove_device_callback","text":"<p>To be notified when a device managed by this service is removed, provide an implementation of this function</p> Parameter Type Description impl void* The context data passed in when the service was created devname char* The name of the removed device protocols devsdk_protocols* The protocol properties that comprise the device's address"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_callbacks_set_listeners","title":"devsdk_callbacks_set_listeners","text":"<p>Call this to add your add, remove and/or update listener functions to the callbacks structure. Any of the functions may be NULL</p> Parameter Type Description cb devsdk_callbacks* structure to be modified device_added devsdk_add_device_callback device addition listener device_updated devsdk_update_device_callback device update listener device_removed devsdk_remove_device_callback device removal listener"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_autoevent_start_handler","title":"devsdk_autoevent_start_handler","text":"<p>Some device types may be configured to generate readings automatically at intervals. Such behavior may be enabled by providing implementations of this function and the stop handler described below. If \"AutoEvents\" have been defined for a device, this function will be called to request that automatic events should begin. The events when generated should be posted using the <code>devsdk_post_readings</code> function. In the absence of an implementation of this function, the SDK will poll the device via the get handler.</p> Parameter Type Description impl void* The context data passed in when the service was created devname char* The name of the device to be queried protocols devsdk_protocols* The address of the device to be queried resource_name char* The resource on which autoevents have been configured nreadings uint32_t The number of readings requested requests devsdk_commandrequest* Array containing details of the resources to be queried interval uint64_t The time between events, in milliseconds onChange bool If true, events should only be generated if one or more readings have changed <p>The function should return a pointer to a data structure that will be provided in a subsequent call to the stop handler when this autoevent is t be stopped</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_autoevent_stop_handler","title":"devsdk_autoevent_stop_handler","text":"<p>This function is called to request that automatic events should cease</p> Parameter Type Description impl void* The context data passed in when the service was created handle void* The data structure returned by a previous call to the start handler"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_callbacks_set_autoevent_handlers","title":"devsdk_callbacks_set_autoevent_handlers","text":"<p>Call this to add your autoevent management functions to the callbacks structure. Both start and stop handlers are required</p> Parameter Type Description cb devsdk_callbacks* structure to be modified ae_starter devsdk_autoevent_start_handler Autoevent start handler ae_stopper devsdk_autoevent_stop_handler Autoevent stop handler"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#initialisation-and-shutdown","title":"Initialisation and Shutdown","text":"<p>These functions manage the lifecycle of the device service and should be called in the order presented here</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_service_new","title":"devsdk_service_new","text":"<p>This function creates a new device service</p> Parameter Type Description defaultname char* The device service name, used in logging, metadata lookups and to scope configuration. This may be overridden via the commandline version char* The version string for this service. This is for information only, and will be logged during startup impldata void* An object pointer which will be passed back whenever one of the callback functions is invoked implfns devsdk_callbacks* Structure containing the device implementation functions. The SDK will call these functions in order to carry out its various actions argc int* A pointer to argc as passed into main(). This will be adjusted to account for arguments consumed by the SDK argv char** argv as passed into main(). This will be adjusted to account for arguments consumed by the SDK err devsdk_error* Nonzero reason codes will be set here in the event of errors <p>The newly created service is represented by an object of type devsdk_service_t, which is returned if the service is created successfully</p> <p>The SDK modifies the commandline argument parameters <code>argc</code> and <code>argv</code>, removing those arguments which it supports. The implementation may support additional arguments by inspecting these modified values after the create function has been called</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_service_start","title":"devsdk_service_start","text":"<p>Start the device service. Default values for the implementation-specific configuration are passed in here. These must be provided in a string-keyed iot_data_t map. A value named \"X\" may be over-ridden in the configuration file by an entry for X in the <code>[Driver]</code> section. For dynamically-updatable configuration, set a value for \"Writable/X\". This will correspond to a configuration file entry in the <code>[Writable.Driver]</code> section and updates may be received by implementing the <code>devsdk_reconfigure</code> function</p> Parameter Type Description svc devsdk_service_t* The device service driverdfls iot_data_t* Default configuration err devsdk_error* Nonzero reason codes will be set here in the event of errors"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_service_stop","title":"devsdk_service_stop","text":"<p>Stop the device service. Any automatic events will be cancelled and the REST API for the device service will be shut down</p> Parameter Type Description svc devsdk_service_t* The device service force bool Force stop. Currently unused but is passed through to the stop handler err devsdk_error* Nonzero reason codes will be set here in the event of errors"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_service_free","title":"devsdk_service_free","text":"<p>This function disposes of the device service object and all associated resources</p> Parameter Type Description svc devsdk_service_t* The device service"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#additional-functionality","title":"Additional functionality","text":""},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_usage","title":"devsdk_usage","text":"<p>This function writes out the commandline options supported by the SDK. It may be useful if a <code>--help</code> option is to be implemented</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_protocols_properties","title":"devsdk_protocols_properties","text":"<p>This function returns a map of properties (keyed on string) for the named protocol.</p> Parameter Type Description prots devsdk_protocols* The protocols to search name char* The name of the protocol to search for"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_protocols_new","title":"devsdk_protocols_new","text":"<p>This function creates a new protocols object, or adds a property set to an existing one.</p> Parameter Type Description name char* The name of the new protocol properties iot_data_t* The properties of the new protocol list devsdk_protocols* The protocols object to extend, or NULL to create a new one"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_protocols_dup","title":"devsdk_protocols_dup","text":"<p>This function duplicates a protocols object</p> Parameter Type Description e devsdk_protocols* object to duplicate"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_protocols_free","title":"devsdk_protocols_free","text":"<p>This function disposes of the memory used by a protocols object</p> Parameter Type Description e devsdk_protocols* object to free"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_get_secrets","title":"devsdk_get_secrets","text":"<p>This function returns secrets (credentials) for the service. In insecure mode these will be part of the service configuration, in secure mode they will be retrieved from the secret store (eg, Vault).</p> <p>The secrets are returned as a string-keyed map. This should be disposed after use using <code>iot_data_free</code></p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_post_readings","title":"devsdk_post_readings","text":"<p>This function posts readings to EdgeX. Depending on configuration this may be via REST to core-data or via the Message Bus to various upstream services. The readings are assembled into an Event and then posted</p> <p>This function may be used in services which implement the autoevent handlers or by any other service where the natural operation is that readings are generated by the device rather than being explicitly requested</p> Parameter Type Description svc devsdk_service_t* The device service device_name char* Name of the device that has generated the readings resource_name char* Name of the resource (or command) corresponding to this set of readings values devsdk_commandresult* The readings to be posted <p>The cardinality of the <code>values</code> array will depend on the resource - if it is a <code>deviceResource</code> there should be a single reading; for a <code>deviceCommand</code> there may be several</p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_add_discovered_devices","title":"devsdk_add_discovered_devices","text":"<p>This function should be called in response to a request for device discovery, but may be called at any time if for a particular device class immediate automatic discovery is appropriate. The function takes an array of devices in order to allow for batching, but it may be called multiple times during the course of a single invocation of discovery if necessary</p> Parameter Type Description svc devsdk_service_t* The device service ndevices uint32_t Number of devices discovered devices devsdk_discovered_device* Array of discovered devices"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_set_device_opstate","title":"devsdk_set_device_opstate","text":"<p>This function can be used to indicate that a device has become non-operational or non-responsive, or that a device has returned from such a state. The SDK will return errors for requests for a device marked non-operational without calling the get or set handler</p> Parameter Type Description svc devsdk_service_t* The device service devname char* The device that has changed state operational bool The new operational state"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_get_devices","title":"devsdk_get_devices","text":"<p>Returns a list of devices registered with this service</p> Parameter Type Description svc devsdk_service_t* The device service <p>The returned list should be disposed after use using <code>devsdk_free_devices</code></p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_get_device","title":"devsdk_get_device","text":"<p>Returns information on a device</p> Parameter Type Description svc devsdk_service_t* The device service name char* The device to query for <p>The returned device should be disposed after use using <code>devsdk_free_devices</code></p>"},{"location":"microservices/device/sdk/Ch-Ref-SDK-C/#devsdk_free_devices","title":"devsdk_free_devices","text":"<p>Frees a devices structure returned by <code>devsdk_get_devices</code> or <code>devsdk_get_device</code></p> Parameter Type Description svc devsdk_service_t* The device service d devsdk_devices* The device or device list"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/","title":"Using iot_data_t","text":""},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#introduction","title":"Introduction","text":"<p>The <code>iot_data_t</code> type is a holder for various types of data, and it is used in the SDK API to hold reading values and name-value collections (maps keyed by string). This chapter describes how to use <code>iot_data_t</code> in interactions with the SDK. It is not a complete guide to either the type or to the IOT utilities package which includes it</p>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#types","title":"Types","text":"<p>The type of data held in an <code>iot_data_t</code> object is represented by the <code>iot_data_type_t</code> type. This can take the following values:</p> <ul> <li><code>IOT_DATA_INT8 IOT_DATA_INT16 IOT_DATA_INT32 IOT_DATA_INT64</code> for signed integers</li> <li><code>IOT_DATA_UINT8 IOT_DATA_UINT16 IOT_DATA_UINT32 IOT_DATA_UINT64</code> for unsigned integers</li> <li><code>IOT_DATA_FLOAT32 IOT_DATA_FLOAT64</code> for floating point values</li> <li><code>IOT_DATA_BOOL</code> for booleans</li> <li><code>IOT_DATA_STRING</code> for strings</li> <li><code>IOT_DATA_ARRAY</code> for arrays</li> <li><code>IOT_DATA_MAP</code> for maps</li> </ul>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#allocations","title":"Allocations","text":"<p>Instances of <code>iot_data_t</code> are created with the <code>iot_data_alloc_*</code> functions</p>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#primitive-types","title":"Primitive types","text":"<p>For primitive types, use</p> <ul> <li><code>iot_data_alloc_i8 iot_data_alloc_i16 iot_data_alloc_i32 iot_data_alloc_i64</code> for signed integers</li> <li><code>iot_data_alloc_ui8 iot_data_alloc_ui16 iot_data_alloc_ui32 iot_data_alloc_ui64</code> for unsigned integers</li> <li><code>iot_data_alloc_f32 iot_data_alloc_f64</code> for floats</li> <li><code>iot_data_alloc_bool</code> for booleans</li> </ul> <p>Each takes a single parameter which is the value to hold</p>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#strings","title":"Strings","text":"<p>Strings are allocated using <code>iot_data_alloc_string</code>. In addition to the <code>const char*</code> which specifies the string to hold, a further parameter of type <code>iot_data_ownership_t</code> must be provided. This sets the ownership semantics for the string, and can take the following values:</p> Ownership Meaning IOT_DATA_REF The created object holds a pointer to the string, ownership remains the responsibility of the calling code. Useful in particular for string constants IOT_DATA_TAKE The created object takes ownership of the string. It will be freed when the <code>iot_data_t</code> object is freed IOT_DATA_COPY A copy will be made of the string. This copy will be freed when the <code>iot_data_t</code> object is freed, but the calling code remains responsible for the original"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#arrays-and-binary-data","title":"Arrays and Binary data","text":"<p>For array readings use <code>iot_data_alloc_array</code></p> Parameter Type Description data void* A C array of primitive types length uint32_t The number of elements in the array type iot_data_type_t The type of the data elements ownership iot_data_ownership_t Ownership semantics for the data (see description in Strings section) <p>For binary data allocate an array of <code>uint8_t / IOT_DATA_UINT8</code></p>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#objects","title":"Objects","text":"<p>Object-typed readings are represented by a map. Allocate it using</p> <p><code>iot_data_alloc_map (IOT_DATA_STRING)</code></p> <p>Values are added to the map using the <code>iot_data_string_map_add</code> function</p> Parameter Type Description map iot_data_t* The map representing the Object key char* The name of the field to add. This should be a string literal val iot_data_t* The value of the field"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#accessing-values","title":"Accessing values","text":""},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#primitive-types_1","title":"Primitive types","text":"<p>The accessors for primitive types are</p> <ul> <li><code>iot_data_i8 iot_data_i16 iot_data_i32 iot_data_i64</code></li> <li><code>iot_data_ui8 iot_data_ui16 iot_data_ui32 iot_data_ui64</code></li> <li><code>iot_data_f32 iot_data_f64</code></li> <li><code>iot_data_bool</code></li> </ul> <p>Each function takes an <code>iot_data_t*</code> as parameter and returns the value in the expected C type</p>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#strings_1","title":"Strings","text":"<p>The <code>iot_data_string</code> function returns the <code>char*</code> held in the data object</p>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#arrays-and-binary-data_1","title":"Arrays and Binary data","text":"<ul> <li><code>iot_data_array_length</code> returns the length of an array</li> <li><code>iot_data_address</code> returns a pointer to the first element</li> <li><code>iot_data_array_type</code> returns the type of the elements (as <code>iot_data_type_t</code>)</li> </ul> <p>Binary data is represented as an array of <code>uint8_t</code> (ie, <code>IOT_DATA_UINT8</code>)</p>"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#objects_1","title":"Objects","text":"<p>Use <code>iot_data_string_map_get</code> to obtain the <code>iot_data_t</code> instance representing a field</p> Parameter Type Description map iot_data_t* The map representing the Object key char* The name of the field to retrieve"},{"location":"microservices/device/sdk/Ch-Using-iot-data-t/#deallocation","title":"Deallocation","text":"<p>Instances of <code>iot_data_t</code> are freed using the <code>iot_data_free</code> function</p>"},{"location":"microservices/device/virtual/Ch-VirtualDevice/","title":"Virtual Device","text":""},{"location":"microservices/device/virtual/Ch-VirtualDevice/#introduction","title":"Introduction","text":"<p>The virtual device service simulates different kinds of devices to generate events and readings to the core data micro service, and users send commands and get responses through the command and control micro service. These features of the virtual device services are useful when executing functional or performance tests without having any real devices.</p> <p>The virtual device service, built in Go and based on the device service Go SDK, can simulate sensors by generating data of the following data types:</p> <ul> <li>Bool, BoolArray</li> <li>Int8, Int16, Int32, Int64, Int8Array, Int16Array, Int32Array, Int64Array</li> <li>Uint8, Uint16, Uint32, Uint64, Uint8Array, Uint16Array, Uint32Array, Uint64Array</li> <li>Float32, Float64, Float32Array, Float64Array</li> <li>Binary</li> </ul> <p>By default, the virtual device service is included and configured to run with all EdgeX Docker Compose files.  This allows users to have a complete EdgeX system up and running - with simulated data from the virtual device service - in minutes.</p>"},{"location":"microservices/device/virtual/Ch-VirtualDevice/#using-the-virtual-device-service","title":"Using the Virtual Device Service","text":"<p>The virtual device service contains 4 pre-defined devices as random value generators:</p> <ul> <li>Random-Boolean-Device</li> <li>Random-Integer-Device</li> <li>Random-UnsignedInteger-Device</li> <li>Random-Float-Device</li> <li>Random-Binary-Device</li> </ul> <p>These devices are created by the virtual device service in core metadata when the service first initializes. These devices are defined by device profiles that ship with the virtual device service.  Each virtual device causes the generation of one to many values of the type specified by the device name.  For example, Random-Integer-Device generates integer values:  Int8, Int16, Int32 and Int64.  As with all devices, the deviceResources in the associated device profile of the device defind what values are produced by the device service.  In the case of Random-Integer-Device, the Int8, Int16, Int32 and Int64 values are defined as deviceResources (see the device profile). </p> <p>Additionally, there is an accompanying deviceResource for each of the generated value deviceResource. Each deviceResources has an associated EnableRandomization_X deviceResource.  In the case of the integer deviceResources above, there are the associated EnableRandomization_IntX deviceResources (see the device profile).  The EnableRandomization deviceResources are boolean values, and when set to true, the associated simulated sensor value is generated by the device service.  When the EnableRandomization_IntX value is set to false, then the associated simulator sensor value is fixed.</p> <p>Info</p> <p>The Enable_Randomization attribute of resource is automatically set to false when you use a <code>PUT</code> command to set a specified generated value.  Furtehr, the minimum and maximum values of generated value deviceResource can be specified in the device profile. Below, Int8 is set to be between -100 and 100.</p> <pre><code>deviceResources:\n-\nname: \"Int8\"\nisHidden: false\ndescription: \"Generate random int8 value\"\nproperties:\nvalueType: \"Int8\"\nreadWrite: \"RW\"\nminimum: \"-100\"\nmaximum: \"100\"\ndefaultValue: \"0\"\n</code></pre> <p>For the binary deviceResources, values are generated by the function rand.Read(p []byte) in Golang math package. The []byte size is fixed to MaxBinaryBytes/1000.</p>"},{"location":"microservices/device/virtual/Ch-VirtualDevice/#core-command-and-the-virtual-device-service","title":"Core Command and the Virtual Device Service","text":"<p>Use the following core command service APIs to execute commands against the virtual device service for the specified devices.  Both <code>GET</code> and <code>PUT</code> commands can be issued with these APIs.  <code>GET</code> command request the next generated value while <code>PUT</code> commands will allow you to disable randomization (EnableRandomization) and set the fixed values to be returned by the device.</p> <ul> <li>http://[host]:59882/api/v2/device/name/Random-Boolean-Device</li> <li>http://[host]:59882/api/v2/device/name/Random-Integer-Device</li> <li>http://[host]:59882/api/v2/device/name/Random-UnsignedInteger-Device</li> <li>http://[host]:59882/api/v2/device/name/Random-Float-Device</li> <li>http://[host]:59882/api/v2/device/name/Random-Binary-Device</li> </ul> <p>Note</p> <p>Port 59882 is the default port for the core command service.</p>"},{"location":"microservices/device/virtual/Ch-VirtualDevice/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Common Configuration documentation for configuration properties common to all services.</p> <p>For each device, the virual device service will contain a DeviceList with associated Protocols and AutoEvents as shown by the example below.</p> DeviceListDeviceList/DeviceList.Protocols/DeviceList.Protocols.otherDeviceList/DeviceList.AutoEvents Property Example Value Description properties used in defining the static provisioning of each of the virtual devices Name 'Random-Integer-Device' name of the virtual device ProfileName 'Random-Integer-Device' device profile that defines the resources and commands of the virtual device Description 'Example of Device Virtual' description of the virtual device Labels ['device-virtual-example'] labels array used for searching for virtual devices Property Example Value Description Address 'device-virtual-int-01' address for the virtual device Protocol '300' Property Default Value Description properties used to define how often an event/reading is schedule for collection to send to core data from the virtual device Interval '15s' every 15 seconds OnChange false collect data regardless of change SourceName 'Int8' deviceResource to collect - in this case the Int8 resource"},{"location":"microservices/device/virtual/Ch-VirtualDevice/#api-reference","title":"API Reference","text":"<p>Device Service - SDK- API Reference</p>"},{"location":"microservices/general/","title":"Cross Cutting Concerns","text":""},{"location":"microservices/general/#event-tagging","title":"Event Tagging","text":"<p>In an edge solution, it is likely that several instances of EdgeX are all sending edge data into a central location (enterprise system, cloud provider, etc.)</p> <p></p> <p>In these circumstances, it will be critical to associate the data to its origin.  That origin could be specified by the GPS location of the sensor, the name or identification of the sensor, the name or identification of some edge gateway that originally collected the data, or many other means.</p> <p>EdgeX provides the means to \u201ctag\u201d the event data from any point in the system.  The Event object has a <code>Tags</code> property which is a key/value pair map that allows any service that creates or otherwise handles events to add custom information to the Event in order to help identify its origin or otherwise label it before it is sent to the north side.</p> <p>For example, a device service could populate the <code>Tags</code> property with latitude and longitude key/value pairs of the physical location of the sensor when the Event is created to send sensed information to Core Data.</p>"},{"location":"microservices/general/#application-service-configurable","title":"Application Service Configurable","text":"<p>When the Event gets to the Application Service Configurable, for example, the service has an optional function (defined by <code>Writable.Pipeline.Functions.AddTags</code> in configuration) that will add additional key/value pair to the Event <code>Tags</code>.  The key and value for the additional tag are provided in configuration (as shown by the example below).  Multiple tags can be provide separated by commas.</p> <pre><code>    [Writable.Pipeline.Functions.AddTags]\n[Writable.Pipeline.Functions.AddTags.Parameters]\ntags = \"GatewayId:HoustonStore000123,Latitude:29.630771,Longitude:-95.377603\"\n</code></pre>"},{"location":"microservices/general/#custom-application-service","title":"Custom Application Service","text":"<p>In the case, of a custom application service, an AddTags function can be used to  add a collection of specified tags to the Event's Tags collection (see Built in Transforms/Functions)</p> <p>If the Event already has <code>Tags</code> when it arrives at the application service, then configured tags will be added to the <code>Tags</code> map.  If the configured tags have the same key as an existing key in the <code>Tags</code> map, then the configured key/value will override what is already in the Event <code>Tags</code> map.</p>"},{"location":"microservices/general/#service-metrics","title":"Service Metrics","text":"<p>Edgex 2.2</p> <p>New for Edgex 2.2</p> <p>Note</p> <p>Service metrics are Beta released for EdgeX 2.2. Breaking changes, while not likely, may occur as more use of service metrics are added.</p> <p>Limited service metrics have been added for the EdgeX 2.2 release. Currently, only Core Data and Application Services are  collecting a limit set of service metrics. Additional service metrics will be added to Core Data, Application Services and other services in future releases.  See <code>Writable.Telemetry</code> at Common Configuration for details on configuring the reporting of service metrics. </p> <p>See Custom Application Service Metrics for more detail on Application Services capability to collect their own custom service metrics via use of the App SDK API. </p> <p>Each service defines (in code) a set of service metrics that it collects and optionally reports if configured.  The names the service gives to its metrics are used in the service's <code>Telemetry</code> configuration to enable/disable the reporting of those metrics. See Core Data's <code>Writable.Telemetry</code> at Core Data Configuration as example of the names used for the service metrics that Core Data is currently collecting.</p> <p>The following metric types are available to be used by the EdgeX services:</p> <ul> <li>Counter: Integer value that is incremented or decremented. Metric field name is <code>counter-count</code></li> <li>Gauge: Integer value that is set to a specific value. Metric field name is <code>gauge-value</code></li> <li>GaugeFloat64: Float value that is set to a specific value. Metric field name is <code>gaugeFloat64-value</code></li> <li>Timer: Float value that is set to the amount of time an action takes. Metric field names are <code>timer-count</code> , <code>timer-min</code>, <code>timer-max</code>, <code>timer-mean</code>, <code>timer-stddev</code> and <code>timer-variance</code></li> </ul> <p>Service metrics which are enabled for reporting are published to the EdgeX MessageBug every configured interval using the configured <code>Telemetry</code> base topic. See <code>Writable.Telemetry</code> at Common Configuration for details on these configuration items. The <code>service name</code> and the <code>metric name</code> are added to the configured base topic. This allows subscribers to subscribe only for specific metrics or metrics from specific services. Each metric is published (reported) independently using the Metric DTO (Data Transfer Object) define in go-mod-core-contracts.</p> <p>The aggregation of these service metrics is left to adopters to implement as best suits their deployment(s). This can be accomplished with a custom application service that sets the function pipeline <code>Target Type</code> to the <code>dtos.Metric</code> type. Then create a custom pipeline function which aggregates the metrics and provides them to the telemetry dashboard service of choice via push (export) or pull (custom GET endpoint). See App Services here for more details on <code>Target Type</code>.</p> <p>Example - DTO from Core Data in JSON format for the <code>EventsPersisted</code> metric as publish to the EdgeX MessageBus</p> <pre><code>{\n\"apiVersion\": \"v2\",\n\"name\": \"EventsPersisted\",\n\"fields\": [\n{\n\"name\": \"counter-count\",\n\"value\": 276\n}\n],\n\"tags\": [\n{\n\"name\": \"service\",\n\"value\": \"core-data\"\n}\n],\n\"timestamp\": 1650301898926166900\n}\n</code></pre> <p>Note</p> <p>The service name is added to the tags for every metric reported from each service. Additional tags may be added via the service's Telemetry configuration. See the <code>Writable.Telemetry</code> at Common Configuration for more details. A service may also add metric specific tags via code when it collects the individual metrics.</p>"},{"location":"microservices/support/Ch-SupportingServices/","title":"Supporting Services Microservices","text":"<p>The supporting services encompass a wide range of micro services to include edge analytics (also known as local analytics). Micro services in the supporting services layer perform normal software application duties such as scheduler, and notifications/alerting .</p> <p>These services often need some amount of core services to function.  In all cases, consider supporting service optional. Leave these services out of an EdgeX deployment depending on use case needs and system resources.</p> <p>Supporting services include:</p> <ul> <li>Rules Engine:  the reference implementation edge analytics service that performs if-then conditional actuation at the edge based on sensor data collected by the EdgeX instance.  Replace or augment this service with use case specific analytics capability.</li> <li>Scheduler:  an internal EdgeX \u201cclock\u201d that can kick off operations in any EdgeX service.  At a configuration specified time, the service will call on any EdgeX service API URL via REST to trigger an operation.  For example, at appointed times, the scheduler service calls on core data APIs to expunge old sensed events already exported out of EdgeX.</li> <li>Alerts and Notifications:  provides EdgeX services with a central facility to send out an alert or notification.  These are notices sent to another system or to a person monitoring the EdgeX instance (internal service communications are often handled more directly).</li> </ul>"},{"location":"microservices/support/eKuiper/Ch-eKuiper/","title":"eKuiper Rules Engine","text":""},{"location":"microservices/support/eKuiper/Ch-eKuiper/#overview","title":"Overview","text":"<p>LF Edge eKuiper is the EdgeX reference implementation rules engine (or edge analytics) implementation.</p>"},{"location":"microservices/support/eKuiper/Ch-eKuiper/#what-is-lf-edge-ekuiper","title":"What is LF Edge eKuiper?","text":"<p>LF Edge eKuiper is a lightweight open source software (Apache 2.0 open source license agreement) package for IoT edge analytics and stream processing implemented in Go lang, which can run on various resource constrained edge devices. Users can realize fast data processing on the edge and write rules in SQL. The eKuiper rules engine is based on three components <code>Source</code>, <code>SQL</code> and <code>Sink</code>.</p> <ul> <li>Source: Source of stream data, such as data from an MQTT server. For EdgeX, the data source is an EdgeX message bus, which can be implemented by ZeroMQ or MQTT;</li> <li>SQL: SQL is where the specified business logic is processed. eKuiper provides SQL statements to extract, filter, and transform data;</li> <li>Sink: Used to send the analysis result to a specific target, such as sending the analysis results to EdgeX's Command service, or an MQTT broker in the cloud;</li> </ul> <p>The relationship among Source, SQL and Sink in eKuiper is shown below.</p> <p></p> <p>eKuiper runs very efficiently on resource constrained edge devices. For common IoT data processing, the throughput can reach 12k per second. Readers can refer to here to get more performance benchmark data for eKuiper.</p>"},{"location":"microservices/support/eKuiper/Ch-eKuiper/#ekuiper-rules-engine-of-edgex","title":"eKuiper rules engine of EdgeX","text":"<p>An extension mechanism allows eKuiper to be customized to analyze and process data from different data sources. By default for the EdgeX configuration, eKuiper analyzes data coming from the EdgeX message bus. EdgeX provides an abstract message bus interface, and implements the ZeroMQ and MQTT protocols respectively to support information exchange between different micro-services. The integration of eKuiper and EdgeX mainly includes the following:</p> <ul> <li>Extend an EdgeX message bus source to support receiving data from the EdgeX message bus. By default, eKuiper listens to the port <code>5566</code> on which the Application Service publishes messages. After the data from the Core Data Service is processed by the Application Service, it will flow into the eKuiper rules engine for processing.</li> <li>Read the data type definition from Core Contract Service, convert EdgeX data to eKuiper data type, and process it according to the rules specified by the user.</li> <li>eKuiper supports sending analysis results to different Sink:</li> <li>The users can choose to send the analysis results to Command Service to control the equipment;</li> <li>The analysis results can be sent to the EdgeX message bus sink for further processing by other micro-services.</li> </ul> <p></p>"},{"location":"microservices/support/eKuiper/Ch-eKuiper/#learn-more","title":"Learn more","text":"<p>EdgeX 2.0</p> <p>Note: \"Configure the data flow\" tutorial in the list below is a new tutorial specific to EdgeX 2 and eKuiper 1.2 or later release.</p> <ul> <li>EdgeX eKuiper Rules Engine Tutorial: A 10-minute quick start tutorial, readers can refer to this article to start trying out the rules engine.</li> <li>Configure the data flow from EdgeX to eKuiper:  a demonstrate on how to set up the various data flows from EdgeX to eKuiper.  Learn how to configure the source to adopt any kind of data flow.</li> <li>Control the device with the EdgeX eKuiper rules engine: This article describes how to use the eKuiper rule engine in EdgeX to control the device based on the analysis results.</li> <li>Read EdgeX Source to get more detailed information, and type conversions.</li> <li>How to use the meta function to extract more information sent in the EdgeX message bus? When the device service sends data to the bus, some additional information is also sent, such as creation time and id. If you want to use this information in SQL statements, please refer to this article.</li> <li>EdgeX Message Bus Sink: The document describes how to use EdgeX message bus sink. If you'd like to have your analysis result consumed by other EdgeX services, you can send analysis data with EdgeX data format through this sink, and other EdgeX services can subscribe new message bus exposed by eKuiper sink.</li> </ul> <p>Info</p> <p>The eKuiper tutorials and documentation are available in both English and Chinese.</p> <p>For more information on the LF Edge eKuiper project, please refer to the following resources.</p> <ul> <li>eKuiper Github Code library</li> <li>eKuiper Reference</li> </ul>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/","title":"Alerts &amp; Notifications","text":""},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#introduction","title":"Introduction","text":"<p>When another system or a person needs to know that something occurred in EdgeX, the alerts and notifications microservice sends that notification. Examples of alerts and notifications that other services could broadcast, include the provisioning of a new device, sensor data detected outside of certain parameters (usually detected by a device service or rules engine) or system or service malfunctions (usually detected by system management services).</p>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#terminology","title":"Terminology","text":"<p>Notifications are informative, whereas Alerts are typically of a more important, critical, or urgent nature, possibly requiring immediate action.</p> <p></p> <p>This diagram shows the high-level architecture of the notifications service. On the left side, the APIs are provided for other microservices, on-box applications, and off-box applications to use.  The APIs could be in REST, AMQP, MQTT, or any standard application protocols. </p> <p>Warning</p> <p>Currently in EdgeX Foundry, only the RESTful interface is provided.</p> <p>On the right side, the notifications receiver could be a person or an application system on Cloud or in a server room. By invoking the Subscription RESTful interface to subscribe the specific types of notifications, the receiver obtains the appropriate notifications through defined receiving channels when events occur. The receiving channels include SMS message, e-mail, REST callback, AMQP, MQTT, and so on. </p> <p>Warning</p> <p>Currently in EdgeX Foundry, e-mail and REST callback channels are provided.</p> <p>When the notifications service receives notifications from any interface,  the notifications are passed to the Notifications Handler internally.  The Notifications Handler persists the received notifications first,  and passes them to the Distribution Coordinator.</p> <p>When the Distribution Coordinator receives a notification, it first queries the Subscription database to get receivers who need this notification and their receiving channel information. According to the channel information, the Distribution Coordinator passes this notification to the corresponding channel senders. Then, the channel senders send out the notifications to the subscribed receivers.</p>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#workflow","title":"Workflow","text":""},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#normalminor-notifications","title":"Normal/Minor Notifications","text":"<p>When a client requests a notification to be sent with \"NORMAL\" or \"MINOR\" status,  the notification is immediately sent to its receivers via the Distribution Coordinator,  and the status is updated to \"PROCESSED\".</p>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#critical-notifications","title":"Critical Notifications","text":"<p>Notifications with \"CRITICAL\" status are also sent immediately. When encountering any error during sending critical notification,  an individual resend task is scheduled, and each transmission record persists. After exceeding the configurable limit (resend limit), the service escalates the notification  and create a new notification to notify particular receivers of the escalation subscription (name = \"ESCALATION\") of the failure.</p> <p>Edgex 2.0</p> <p>For EdgeX 2.0, all notifications are processed immediately. The resend feature is only provided for critical notifications. The resendLimit and resendInterval properties can be defined in each subscription.  If the properties are not provided, use the default values in the configuration properties.</p>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#data-model","title":"Data Model","text":"<p>The latest developed data model will be updated in the Swagger API document.</p> <p></p> <p>This diagram is drawn by diagrams.net with the source file EdgeX_SupportingServicesNotificationsModel.xml</p>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#data-dictionary","title":"Data Dictionary","text":"SubscriptionChannelNotificationTransmissionTransmissionRecord Property Description The object used to describe the receiver and the recipient channels ID Uniquely identifies a subscription, for example a UUID Name Uniquely identifies a subscription Receiver The name of the party interested in the notification Description Human readable description explaining the subscription intent Categories Link the subscription to one or more categories of notification. Labels An array of associated means to label or tag for categorization or identification Channels An array of channel objects indicating the destination for the notification ResendLimit The retry limit for attempts to send notifications ResendInterval The interval in ISO 8691 format of resending the notification AdminState An enumeration string indicating the subscription is locked or unlocked Property Description The object used to describe the notification end point.  Channel supports transmissions and notifications with fields for delivery via email or REST Type Object of ChannelType - indicates whether the channel facilitates email or REST MailAddress EmailAddress object for an array of string email addresses RESTAddress RESTAddress object for a REST API destination endpoint Property Description The object used to describe the message and sender content of a notification. ID Uniquely identifies a notification, for example a UUID Sender A string indicating the notification message sender Category A string categorizing the notification Severity An enumeration string indicating the severity of the notification - as either normal or critical Content The message sent to the receivers Description Human readable description explaining the reason for the notification or alert Status An enumeration string indicating the status of the notification as new, processed or escalated Labels Array of associated means to label or tag a notification for better search and filtering ContentType String indicating the type of content in the notification message Property Description The object used to group Notifications ID Uniquely identifies a transmission, for example a UUID Created A timestamp indicating when the notification was created NotificationId The notification id to be sent SubscriptionName The name of the subscription interested in the notification Channel A channel object indicating the destination for the notification Status An enumeration string indicating whether the transmission failed, was sent, was resending, was acknowledged, or was escalated ResendCount Number indicating the number of resent attempts Records An array of TransmissionRecords Property Description Information the status and response of a notification sent to a receiver Status An enumeration string indicating whether the transmission failed, was sent, was acknowledged, or escalated Response The response string from the receiver Sent A timestamp indicating when the notification was sent"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Common Configuration documentation for configuration properties common to all services. Below are only the additional settings and sections that are not common to all EdgeX Services.</p> <p>Edgex 2.0</p> <p>For EdgeX 2.0, the SMTP username and password can be set in the Writable.InsecureSecrets.SMTP.Secrets as an insecure secret, or be stored in the Smtp.SecretPath for security. </p> WritableDatabases/Databases.PrimarySmtp Property Default Value Description Writable properties can be set and will dynamically take effect without service restart ResendLimit 2 Sets the retry limit for attempts to send notifications. CRITICAL notifications are sent to the escalation subscriber when resend limit is exceeded. ResendInterval '5s' Sets the retry interval for attempts to send notifications. Writable.InsecureSecrets.SMTP.Secrets username username@mail.example.com The email to send alerts and notifications Writable.InsecureSecrets.SMTP.Secrets password The email password Property Default Value Description Properties used by the service to access the database Name 'notifications' Document store or database name Property Default Value Description Config to connect to applicable SMTP (email) service. All the properties with prefix \"smtp\" are for mail server configuration. Configure the mail server appropriately to send alerts and notifications. The correct values depend on which mail server is used. Smtp Host smtp.gmail.com SMTP service host name Smtp Port 587 SMTP service port number Smtp EnableSelfSignedCert false Indicates whether a self-signed cert can be used for secure connectivity. Smtp SecretPath smtp Specify the secret path to store the credential(username and password) for connecting the SMTP server via the /secret API, or set Writable SMTP username and password for insecure secrets Smtp Sender jdoe@gmail.com SMTP service sender/username Smtp Subject EdgeX Notification SMTP notification message subject"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#gmail-configuration-example","title":"Gmail Configuration Example","text":"<p>Before using Gmail to send alerts and notifications, configure the sign-in security settings through one of the following two methods:</p> <ol> <li>Enable 2-Step Verification and use an App Password (Recommended). An     App password is a 16-digit passcode that gives an app or device     permission to access your Google Account. For more detail about this     topic, please refer to this      Google official document.</li> <li>Allow less secure apps: If the 2-Step Verification is not enabled,     you may need to allow less secure apps to access the Gmail account.     Please see the instruction from this      Google official document.</li> </ol> <p>Then, use the following settings for the mail server properties:</p> <pre><code>Smtp Port=25\nSmtp Host=smtp.gmail.com\nSmtp Sender=${Gmail account}\nSmtp Password=${Gmail password or App password}\n</code></pre>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#yahoo-mail-configuration-example","title":"Yahoo Mail Configuration Example","text":"<p>Similar to Gmail, configure the sign-in security settings for Yahoo through one of the following two methods:</p> <ol> <li>Enable 2-Step Verification and use an App Password (Recommended).     Please see this Yahoo official document for more detail:     https://help.yahoo.com/kb/SLN15241.html.</li> <li>Allow apps that use less secure sign in. Please see this Yahoo     official document for more detail on this topic:     https://help.yahoo.com/kb/SLN27791.html.</li> </ol> <p>Then, use the following settings for the mail server properties:</p> <pre><code>Smtp Port=25\nSmtp Host=smtp.mail.yahoo.com\nSmtp Sender=${Yahoo account}\nSmtp Password=${Yahoo password or App password}\n</code></pre>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#v2-configuration-migration-guide","title":"V2 Configuration Migration Guide","text":"<p>Refer to the Common Configuration Migration Guide for details on migrating the common configuration sections such as <code>Service</code>.</p>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#writable","title":"Writable","text":"<p>The <code>Writable.InsecureSecrets.SMTP</code> section has been added.</p> <p>Example Writable.InsecureSecrets.SMTP section</p> <pre><code>    [Writable.InsecureSecrets.SMTP]\npath = \"smtp\"\n[Writable.InsecureSecrets.SMTP.Secrets]\nusername = \"username@mail.example.com\"\npassword = \"\"\n</code></pre>"},{"location":"microservices/support/notifications/Ch-AlertsNotifications/#api-reference","title":"API Reference","text":"<p>Support Notifications API Reference</p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/","title":"Scheduler","text":""},{"location":"microservices/support/scheduler/Ch-Scheduler/#introduction","title":"Introduction","text":"<p>The support scheduler microservice provide an internal EdgeX \u201cclock\u201d that can kick off operations in any EdgeX service.  At a configuration specified time (called an interval), the service calls on any EdgeX service API URL via REST to trigger an operation (called an interval action).  For example, the scheduler service periodically calls on core data APIs to clean up old sensed events that have been successfully exported out of EdgeX.</p> <p>Edgex 2.0</p> <p>For EdgeX 2.0 the REST API provided by the Support Scheduler has changed to use DTOs (Data Transfer Objects) for all responses and for all POST/PUT/PATCH requests. All query APIs (GET) which return multiple objects, such as /all, provide <code>offset</code> and <code>limit</code> query parameters. </p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#default-interval-actions","title":"Default Interval Actions","text":"<p>Scheduled interval actions configured by default with the reference implementation of the service include:</p> <ul> <li>Clean up of Core-data events/readings that have been persisted for an extended period. In order to prevent the edge node from running out of space, these old events/readings are removed. This is the \"ScrubAged\" operation. Scheduler parameters around this operation determine how often and where to call into Core-data to invoke this operation to expunge of old data.</li> </ul> <p>NOTE The removal of stale records occurs on a configurable schedule. By default, the default action above is invoked once a day at midnight.</p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#scheduler-persistence","title":"Scheduler Persistence","text":"<p>Support scheduler uses a data store to persist the Interval(s) and IntervalAction(s). Persistence is accomplished by the Scheduler DB located in your current configured database for EdgeX.</p> <p>Info     Redis DB is used by default to persist all scheduler service information to include intervals and interval actions.</p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#iso-8601-standard","title":"ISO 8601 Standard","text":"<p>The times and frequencies defined in the scheduler service's intervals are specified using the international date/time standard - ISO 8601.  So, for example, the start of an interval would be represented in YYYYMMDD'T'HHmmss format.  20180101T000000 represents January 1, 2018 at midnight.  Frequencies are represented with ISO 8601 durations. </p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#data-model","title":"Data Model","text":"<p>The latest developed data model will be updated in the Swagger API document.</p> <p></p> <p>This diagram is drawn by diagram.net, and the source file is here.</p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#data-dictionary","title":"Data Dictionary","text":"IntervalsIntervalActions Property Description An object defining a specific \"period\" in time Id Uniquely identifies an interval, for example a UUID Created A timestamp indicating when the interval was created in the database Modified A timestamp indicating when the interval was last modified Name the name of the given interval - unique for the EdgeX instance Start The start time of the given interval in ISO 8601 format End The end time of the given interval in ISO 8601 format Interval How often the specific resource needs to be polled. It represents as a duration string. The format of this field is to be an unsigned integer followed by a unit which may be \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\" representing nanoseconds, microseconds, milliseconds, seconds, minutes or hours. Eg, \"100ms\", \"24h\" Property Description The action triggered by the service when the associated interval occurs Id Uniquely identifies an interval action, for example a UUID Created A timestamp indicating when the interval action was created in the database Modified A timestamp indicating when the interval action was last modified Name the name of the interval action Interval associated interval that defines when the action occurs AdminState interval action state - either LOCKED or UNLOCKED Protocol Indicates which protocol should be used.  Only http is used today Host The host targeted by the action when it activates Port The port on the targeted host Method Indicates which Http verb should be used for the REST endpoint.(Only using when type is REST Path The HTTP path at the targeted host for fulfillment of the action.(Only using when type is REST) Target The service target which is to receive the REST call - example core-data <p>See Interval and IntervalAction for more information.</p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#high-level-interaction-diagrams","title":"High Level Interaction Diagrams","text":"<p>Scheduler interval actions to expunge old and exported (pushed) records from Core Data</p> <p></p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Configuration documentation for configuration properties common to all services. Below are only the additional settings and sections that are not common to all EdgeX Services.</p> ScheduleIntervalTimeIntervals/Intervals.MidnightIntervalActions.IntervalActions.ScrubAged Property Default Value Description ScheduleIntervalTime 500 the time, in milliseconds, to trigger any applicable interval actions Property Default Value Description Default intervals for use with default interval actions Name midnight Name of the every day at midnight interval Start 20180101T000000 Indicates the start time for the midnight interval which is a midnight, Jan 1, 2018 which effectively sets the start time as of right now since this is in the past Interval 24h defines a frequency of every 24 hours Property Default Value Description Configuration of the core data clean old events operation which is to kick off every midnight Name scrub-aged-events name of the interval action Host localhost run the request on core data assumed to be on the localhost Port 59880 run the request against the default core data port Protocol http Make a RESTful request to core data Method DELETE Make a RESTful delete operation request to core data Target core-data target core data Path /api/v2/event/age/604800000000000 request core data's remove old events API with parameter of 7 days Interval midnight run the operation every midnight as specified by the configuration defined interval"},{"location":"microservices/support/scheduler/Ch-Scheduler/#v2-configuration-migration-guide","title":"V2 Configuration Migration Guide","text":"<p>Refer to the Common Configuration Migration Guide for details on migrating the common configuration sections such as <code>Service</code>.</p>"},{"location":"microservices/support/scheduler/Ch-Scheduler/#api-reference","title":"API Reference","text":"<p>Support Scheduler API Reference</p>"},{"location":"microservices/system-management/Ch_SystemManagement/","title":"System Management Micro Services","text":"<p>Warning</p> <p>EdgeX System Management services are deprecated with the Ireland release.  The service will not be immediately removed (in Ireland or even Jakarta), but adopters should note that it has been tagged for eventual replacement.  The reasons for this include:</p> <ul> <li>Deployment and orchestration systems (Docker Compose, Kubernetes, etc.) provide for the ability to start, stop, and restart the EdgeX services (making EdgeX system management capability redundant or not-aligned with the current deployment/orchestration tool/strategy).</li> <li>Native start, stop and restart of services is highly dependent on the operating system and/or deployment mechanism.  EdgeX is only providing the Docker Linux \"executor\" for these today - which was redundant to the capability in Docker Compose.  The reference implementation was insufficient to assist in other native environments.</li> <li>Configuration information is available from Consul (the configuration service) or the service directly.  System Management was not being used to provide this information or could be out of sync with the configuration service.</li> <li>Metrics information provided by System Management is dependent on the underlying deployment means (e.g., Docker).  The metrics telemetry has information about the memory and CPU used by the service, but this data is readily available from the operating system tools or Docker environment (if containerized).  The telemetry really needed by adopters is EdgeX specific telemetry that outside-application tools/systems cannot provide (e.g., the number of events being created by a device service). -Because System Management was not made aware of the addition/removal of services (without a reset of its configuration and a restart of the service), its ability to perform any action with all services (for example stopping all services) was dependent on its static list of services configuration being kept up to date.</li> </ul> <p>In a future release (unnamed and unscheduled at this time), EdgeX will offer a better EdgeX facility to collect EdgeX specific metrics telemetry.  EdgeX facilitation/support for deployment/orchestration tools will continue to grow (to include integration with LF Edge projects like OpenHorizon or Baetyl) to support service start/stop/restart and allow these tools to better track generic container metrics (memory/CPU).  EdgeX configuration service (however implemented) will be the single source of truth regarding service configuration.  If there is a documented use case for the existing system management features not covered by other capability in the future, a new system management service may be provide but providing for the needs in a platform independent fashion.</p> <p>System Management facilities provide the central point of contact for external management systems to start/stop/restart EdgeX services, get the configuration for a service, the status/health of a service, or get metrics on the EdgeX services (such as memory usage) so that the EdgeX services can be monitored.</p>"},{"location":"microservices/system-management/Ch_SystemManagement/#facilitating-larger-management-systems","title":"Facilitating Larger Management Systems","text":"<p>EdgeX is an edge platform.  It typically runs as close to the physical sensor/device world as it can in order to provide the fastest and most efficient collection and reaction to the data that it can.  In a larger solution deployment, there could be several instances of EdgeX each managing and controlling a subset of the \u201cthings\u201d in the overall deployment.</p> <p></p> <p>In a very big deployment, a larger management system will want to manage the edge systems and resources of the overall deployment.  Just as there is a management system to control all the nodes and infrastructure within a cloud data center, and across cloud data centers, so too there will likely be management systems that will manage and control all the nodes (from edge to cloud) and infrastructure of a complete fog or IoT deployment.</p> <p>EdgeX system management is not the larger control management system.  Instead, EdgeX system management capability is meant to facilitate the larger control management systems.  When a management system wants to start or stop the entire deployment, EdgeX system management capability is there to receive the command and start or stop the EdgeX platform and associated infrastructure of the EdgeX instance that it is aware of.</p> <p>Likewise, when the larger central management system needs service metrics or configuration from EdgeX, it can call on the EdgeX system management services to provide the information it needs (thereby avoiding communications with each individual service).</p> <p></p>"},{"location":"microservices/system-management/Ch_SystemManagement/#use-is-optional","title":"Use is Optional","text":"<p>There are many control management systems today.  Each of these systems operates differently. Some solutions may not require the EdgeX management components.  For example, if your edge platform is large enough to support the use of something like Kubernetes or Swarm to deploy, orchestrate and manage your containerized edge applications, you may not require the system management services provided with EdgeX Foundry.  Therefore, use of the system management services is considered optional.</p>"},{"location":"microservices/system-management/Ch_SystemManagement/#system-management-services","title":"System Management Services","text":"<p>There are two services that provide the EdgeX system management capability.</p> <ul> <li>System Management Agent: the micro service that other systems or services communicate with and make their management request (to start/stop/restart, get the configuration, get the status/health, or get metrics of the EdgeX service).  It communicates with the EdgeX micro services or executor (see below) to satisfy the requests. </li> <li>System Management Executor: the excutable that performs the start, stop and restart of the services as well as metrics gathering from the EdgeX services.  While EdgeX provides a single reference implementation of the system management executor today (one for Docker environments), there may be many implementations of the executor in the future.</li> </ul>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/","title":"System Management Agent (SMA)","text":"<p>Warning</p> <p>The System Management services (inclusive of the Agent) are deprecated with the Ireland (EdgeX 2.0) release.  See the notes on the System Management Microservice page.  Use this functionality with caution.</p>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#introduction","title":"Introduction","text":"<p>The SMA serves as the connection point of management control for an EdgeX instance.  </p>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#management-architecture","title":"Management Architecture","text":"<p>The SMA serves as the proxy for management requests.  Some management requests (metrics requests and operations to start, stop and restart services) are routed to an executor for execution.  Other requests (for service configuration) are routed to the services for a response.  Configuration information is only available by asking each service for its current configuration.  Metrics and operations (tasks to start, stop, restart) typically need to be performed by some other software that can perform the task best under the platform / deployment environment.  When running EdgeX in a Docker Engine, Docker can provide service metrics like memory and CPU usage to the requestor.  If EdgeX services were running non-containerized in a Linux environment, the request may be best performed by some Linux shell script or by sysd.  An executor encapsulates the implementation for the metrics gathering and start, stop, restart operations.  That implementation of the executor can vary based on OS, platform environment, etc.  EdgeX defines the system management executor interface and a reference implementation which utilizes Docker (for situations when EdgeX is run in Docker) to responsd to metrics and start, stop, and restart operations.</p> <p></p>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#examples-of-api-calls","title":"Examples of API Calls","text":"<p>EdgeX 2.0</p> <p>For EdgeX 2.0 the SMA API URIs, request body and request response all have considerable changes.</p> <p>To get an appreciation for some SMA API calls in action, it is instructive to look at what responses the SMA provides to the caller, for the respective calls.  The tabs below provide the API path and corresponding response for each of the system management capabilities.</p> <p>Info</p> <p>Consult the API Swagger documentation for status codes and message information returned by the SMA in error situations.</p> Metrics of a serviceConfiguration of a serviceStart a serviceStop a serviceRestart a serviceHealth check on a service <p>Example request: /api/v2/system/metrics?services=core-command,core-data</p> <p>Corresponding response, in JSON format:</p> <pre><code>[\n{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"serviceName\": \"core-command\",\n\"metrics\": {\n\"cpuUsedPercent\": 0.01,\n\"memoryUsed\": 7524581,\n\"raw\": {\n\"block_io\": \"7.18MB / 0B\",\n\"cpu_perc\": \"0.01%\",\n\"mem_perc\": \"0.05%\",\n\"mem_usage\": \"7.176MiB / 15.57GiB\",\n\"net_io\": \"192kB / 95.4kB\",\n\"pids\": \"13\"\n}\n}\n},\n{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"serviceName\": \"core-data\",\n\"metrics\": {\n\"cpuUsedPercent\": 0.01,\n\"memoryUsed\": 9142534,\n\"raw\": {\n\"block_io\": \"10.8MB / 0B\",\n\"cpu_perc\": \"0.01%\",\n\"mem_perc\": \"0.05%\",\n\"mem_usage\": \"8.719MiB / 15.57GiB\",\n\"net_io\": \"1.24MB / 1.49MB\",\n\"pids\": \"13\"\n}\n}\n}\n]\n</code></pre> <p>Example request: /api/v2/system/config?services=core-command,core-data</p> <p>Corresponding response, in JSON format:</p> <pre><code>[\n{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"serviceName\": \"core-command\",\n\"config\": {\n\"apiVersion\": \"v2\",\n\"config\": {\n\"Clients\": {\n\"core-metadata\": {\n\"Host\": \"edgex-core-metadata\",\n\"Port\": 59881,\n\"Protocol\": \"http\"\n}\n},\n\"Databases\": {\n\"Primary\": {\n\"Host\": \"edgex-redis\",\n\"Name\": \"metadata\",\n\"Port\": 6379,\n\"Timeout\": 5000,\n\"Type\": \"redisdb\"\n}\n},\n\"Registry\": {\n\"Host\": \"edgex-core-consul\",\n\"Port\": 8500,\n\"Type\": \"consul\"\n},\n\"SecretStore\": {\n\"Authentication\": {\n\"AuthToken\": \"\",\n\"AuthType\": \"X-Vault-Token\"\n},\n\"Host\": \"localhost\",\n\"Namespace\": \"\",\n\"Path\": \"core-command/\",\n\"Port\": 8200,\n\"Protocol\": \"http\",\n\"RootCaCertPath\": \"\",\n\"ServerName\": \"\",\n\"TokenFile\": \"/tmp/edgex/secrets/core-command/secrets-token.json\",\n\"Type\": \"vault\"\n},\n\"Service\": {\n\"HealthCheckInterval\": \"10s\",\n\"Host\": \"edgex-core-command\",\n\"MaxRequestSize\": 0,\n\"MaxResultCount\": 50000,\n\"Port\": 59882,\n\"RequestTimeout\": \"45s\",\n\"ServerBindAddr\": \"\",\n\"StartupMsg\": \"This is the Core Command Microservice\"\n},\n\"Writable\": {\n\"InsecureSecrets\": {\n\"DB\": {\n\"Path\": \"redisdb\",\n\"Secrets\": {\n\"password\": \"\",\n\"username\": \"\"\n}\n}\n},\n\"LogLevel\": \"INFO\"\n}\n}\n}\n},\n{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"serviceName\": \"core-data\",\n\"config\": {\n\"apiVersion\": \"v2\",\n\"config\": {\n\"Clients\": {\n\"core-metadata\": {\n\"Host\": \"edgex-core-metadata\",\n\"Port\": 59881,\n\"Protocol\": \"http\"\n}\n},\n\"Databases\": {\n\"Primary\": {\n\"Host\": \"edgex-redis\",\n\"Name\": \"coredata\",\n\"Port\": 6379,\n\"Timeout\": 5000,\n\"Type\": \"redisdb\"\n}\n},\n\"MessageQueue\": {\n\"AuthMode\": \"usernamepassword\",\n\"Host\": \"edgex-redis\",\n\"Optional\": {\n\"AutoReconnect\": \"true\",\n\"ClientId\": \"core-data\",\n\"ConnectTimeout\": \"5\",\n\"KeepAlive\": \"10\",\n\"Password\": \"\",\n\"Qos\": \"0\",\n\"Retained\": \"false\",\n\"SkipCertVerify\": \"false\",\n\"Username\": \"\"\n},\n\"Port\": 6379,\n\"Protocol\": \"redis\",\n\"PublishTopicPrefix\": \"edgex/events/core\",\n\"SecretName\": \"redisdb\",\n\"SubscribeEnabled\": true,\n\"SubscribeTopic\": \"edgex/events/device/#\",\n\"Type\": \"redis\"\n},\n\"Registry\": {\n\"Host\": \"edgex-core-consul\",\n\"Port\": 8500,\n\"Type\": \"consul\"\n},\n\"SecretStore\": {\n\"Authentication\": {\n\"AuthToken\": \"\",\n\"AuthType\": \"X-Vault-Token\"\n},\n\"Host\": \"localhost\",\n\"Namespace\": \"\",\n\"Path\": \"core-data/\",\n\"Port\": 8200,\n\"Protocol\": \"http\",\n\"RootCaCertPath\": \"\",\n\"ServerName\": \"\",\n\"TokenFile\": \"/tmp/edgex/secrets/core-data/secrets-token.json\",\n\"Type\": \"vault\"\n},\n\"Service\": {\n\"HealthCheckInterval\": \"10s\",\n\"Host\": \"edgex-core-data\",\n\"MaxRequestSize\": 0,\n\"MaxResultCount\": 50000,\n\"Port\": 59880,\n\"RequestTimeout\": \"5s\",\n\"ServerBindAddr\": \"\",\n\"StartupMsg\": \"This is the Core Data Microservice\"\n},\n\"Writable\": {\n\"InsecureSecrets\": {\n\"DB\": {\n\"Path\": \"redisdb\",\n\"Secrets\": {\n\"password\": \"\",\n\"username\": \"\"\n}\n}\n},\n\"LogLevel\": \"INFO\",\n\"PersistData\": true\n}\n}\n}\n}\n]\n</code></pre> <p>Example request: /api/v2/system/operation</p> <p>Example (POST) body accompanying the \"start\" request:</p> <pre><code>[{\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"apiVersion\": \"v2\",\n\"action\": \"start\",\n\"serviceName\": \"core-data\"\n}]\n</code></pre> <p>Corresponding response, in JSON format, on success:</p> <pre><code>[{\"apiVersion\":\"v2\",\"requestId\":\"e6e8a2f4-eb14-4649-9e2b-175247911369\",\"statusCode\":200,\"serviceName\":\"core-data\"}]\n</code></pre> <p>Example request: /api/v2/system/operation</p> <p>Example (POST) body accompanying the \"stop\" request:</p> <pre><code>[{\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"apiVersion\": \"v2\",\n\"action\": \"stop\",\n\"serviceName\": \"core-data\"\n}]\n</code></pre> <p>Corresponding response, in JSON format, on success: </p> <pre><code>[{\"apiVersion\":\"v2\",\"requestId\":\"e6e8a2f4-eb14-4649-9e2b-175247911369\",\"statusCode\":200,\"serviceName\":\"core-data\"}]\n</code></pre> <p>Example request: /api/v2/system/operation</p> <p>Example (POST) body accompanying the \"restart\" request:</p> <pre><code>[{\n\"requestId\": \"e6e8a2f4-eb14-4649-9e2b-175247911369\",\n\"apiVersion\": \"v2\",\n\"action\": \"restart\",\n\"serviceName\": \"core-data\"\n}]\n</code></pre> <p>Corresponding response, in JSON format, on success: </p> <pre><code>[{\"apiVersion\":\"v2\",\"requestId\":\"e6e8a2f4-eb14-4649-9e2b-175247911369\",\"statusCode\":200,\"serviceName\":\"core-data\"}]\n</code></pre> <p>Example request: /api/v2/system/health?services=device-virtual,core-data</p> <p>Corresponding response, in JSON format:</p> <pre><code>[\n{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"serviceName\": \"device-virtual\"\n},\n{\n\"apiVersion\": \"v2\",\n\"statusCode\": 200,\n\"serviceName\": \"core-data\"\n}\n]\n</code></pre>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#configuration-properties","title":"Configuration Properties","text":"<p>Please refer to the general Common Configuration documentation for configuration properties common to all services. Below are only the additional settings and sections that are not common to all EdgeX Services.</p> General Property Default Value Description general system management configuration properties ExecutorPath '../sys-mgmt-executor/sys-mgmt-executor' path to the executor to use for system management requests other than configuration MetricsMechanism 'direct-service' either direct-service or executor to advise the SMA where to go for service metrics information"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#v2-configuration-migration-guide","title":"V2 Configuration Migration Guide","text":"<p>Refer to the Common Configuration Migration Guide for details on migrating the common configuration sections such as <code>Service</code>.</p>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#writable","title":"Writable","text":"<p>The <code>ResendLimit</code> setting has been removed from the <code>Writable</code> section</p>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#service","title":"Service","text":"<p>The <code>FormatSpecifier</code> setting has been removed from the <code>Service</code> section</p>"},{"location":"microservices/system-management/agent/Ch_SysMgmtAgent/#api-reference","title":"API Reference","text":"<p>System Management API Reference</p>"},{"location":"microservices/system-management/executor/Ch_SysMgmtExecutor/","title":"System Management Executor (SME)","text":"<p>Warning</p> <p>The System Management services (inclusive of the Executor) are deprecated with the Ireland (EdgeX 2.0) release.  See the notes on the System Management Microservice page.  Use this functionality with caution.</p>"},{"location":"microservices/system-management/executor/Ch_SysMgmtExecutor/#introduction","title":"Introduction","text":"<p>The executable applications that the system management agent (SMA) micro service calls on for some management requests are referred to as the \u201cexecutors\u201d.  In particular, executors take care of service operations (start, stop, and restart functionality) as well as providing service metrics (CPU and memory usage).  How the executor performs its duties is left for the implementer and is generally dictated by the available operating system, platform environment (existence and use of Docker for example) and associated programming language resources.  EdgeX provides the executor interface and a reference implementation executor for use in Docker container runtime environments.</p> <p>The executor design allows use of other orchestrating software (example: Kubernetes or Swarm), scripts, OS specific technology (snaps or sysd), etc. to be used without having to build anything into the SMA \u2013 allowing for a more scalable solution in EdgeX but still allowing use of all sorts of implementation technology outside of EdgeX.  The SMA will be informed of what executor to use for metrics and start/stop/restart functionality through a configuration option \u2013 ExecutorPath.  The ExecutorPath will specify the location (which may be platform dependent) and executable to be called.</p>"},{"location":"microservices/system-management/executor/Ch_SysMgmtExecutor/#reference-implementation-executor","title":"Reference Implementation Executor","text":""},{"location":"microservices/system-management/executor/Ch_SysMgmtExecutor/#docker-executor","title":"Docker Executor","text":"<p>When using the reference implementation Docker executor for metrics collection and start, stop and restart functions, the executor will make command line calls to the Docker Engine.  However, this is not as straightforward as one would think.  Complexity comes from the fact that the SMA (and associated executor) is itself containerized in this type of environment and so a call from within a normal container to Docker would fail as Docker is not installed inside of that container.</p> <p>Even if Docker were part of the SMA\u2019s container, a call to Docker to start (or stop or restart) the other services would be internal to the SMA\u2019s container.  This would not be helpful since it would try to start the EdgeX services inside of the SMA\u2019s container and not on the Docker Engine where all the EdgeX containers exist.</p> <p>The solution to solve this issue is that the SMA must run inside of a special container \u2013 a Docker-in-Docker container - and that container must share a volume with the Docker Engine.  This acts in a way as to expose the Docker calls out to the Docker Engine running on the base platform.  Thereby allowing the SMA (and its executor) to effect calls to the original EdgeX services running on the same Docker Engine as the SMA.</p> <p></p> <p>Info</p> <p>Metrics collection is accomplished by making calls to <code>docker stats</code>.</p>"},{"location":"microservices/system-management/executor/Ch_SysMgmtExecutor/#docker-executor-internals","title":"Docker Executor Internals","text":"<p>Again, the makeup of the executors is at the implementer\u2019s discretion.  In the Docker executor reference implementation, code for calling Docker to execute start, stop and restart commands is exemplifeid in command.go while metrics collection (using <code>docker stats</code>) is exemplified in metrics.go.  Other executors for other environments can use these function templates to perform service operations and metrics collection by a variety of means.</p> <p>The reference implementation Docker executor is deployed inside of the SMA container.  Therefore, there are no exposed APIs.  The SMA makes a direct call to the executor executable inside the container. </p>"},{"location":"security/Ch-APIGateway/","title":"API Gateway","text":""},{"location":"security/Ch-APIGateway/#introduction","title":"Introduction","text":"<p>The security API gateway is the single point of entry for all EdgeX REST traffic. It is the barrier between external clients and the EdgeX microservices preventing unauthorized access to EdgeX REST APIs. The API gateway accepts client requests, verifies the identity of the clients, redirects the requests to correspondent microservice and relays the results back to the client.  Internally, no authentication is required for one EdgeX microservice to call another.</p> <p>The API Gateway provides two HTTP REST management interfaces. The first (insecure) interface is exposed only to <code>localhost</code>: in snaps, this means it is exposed to any local process. In Docker, this insecure interface is bound to the Docker container, and is not reachable from outside of the container. The second (secure) interface is exposed outside of cluster on an administative URL sub-path, <code>/admin</code> and requires a specifically-crafted JWT to access. The management interface offers the means to configure API routing, as well as client authentication and access control. This configuration is stored in an embedded database.</p> <p>KONG (https://konghq.com/) is the product underlying the API gateway. The EdgeX community has added code to initialize the KONG environment, set up service routes for EdgeX microservices, and add various authentication/authorization mechanisms including JWT authentication and ACL.</p>"},{"location":"security/Ch-APIGateway/#start-the-api-gateway","title":"Start the API Gateway","text":"<p>The API gateway is started by default when using  the secure version of the Docker Compose files found at https://github.com/edgexfoundry/edgex-compose/tree/ireland.</p> <p>The command to start EdgeX inclusive of API gateway related services is:</p> <pre><code>git clone -b ireland https://github.com/edgexfoundry/edgex-compose\nmake run\n</code></pre> <p>or</p> <pre><code>git clone -b ireland https://github.com/edgexfoundry/edgex-compose\nmake run arm64\n</code></pre> <p>The API gateway is not started if EdgeX is started with security features disabled by appending <code>no-secty</code> to the previous commands. This disables all EdgeX security features, not just the API gateway.</p> <p>The API Gateway is provided by the <code>kong</code> service. The <code>proxy-setup</code> service is a one-shot service that configures the proxy and then terminates. <code>proxy-setup</code> docker image also contains the <code>secrets-config</code> utility to assist in common configuration tasks.</p>"},{"location":"security/Ch-APIGateway/#configuring-api-gateway","title":"Configuring API Gateway","text":""},{"location":"security/Ch-APIGateway/#using-a-bring-your-own-external-tls-certificate-for-api-gateway","title":"Using a bring-your-own external TLS certificate for API gateway","text":"<p>The API gateway will generate a default self-signed TLS certificate that is used for external communication. Since this certificate is not trusted by client software, it is commonplace to replace this auto-generated certificate with one generated from a known certificate authority, such as an enterprise PKI, or a commercial certificate authority.</p> <p>The process for obtaining a certificate is out-of-scope for this document.  For purposes of the example, the X.509 PEM-encoded certificate is assumed to be called <code>cert.pem</code> and the unencrypted PEM-encoded private key is called <code>key.pem</code>. Do not use an encrypted private key as the API gateway will hang on startup in order to prompt for a password.</p> <p>Also, for purposes of the example, the external DNS name of the API gateway is assumed to be <code>edge001.example.com</code>. The API gateway requires client to support Server Name Identification (SNI) and that the client connects to the API gateway using a DNS host name.  The API gateway uses the host name supplied by the client to determine which certificate to present to the client.  The API gateway will continue to serve the default (untrusted) certificate if clients connect via IP address or do not provide SNI at all.</p> <p>Run the following command to install a custom certficate using the assumptions above:</p> <pre><code>docker-compose -p edgex -f docker-compose.yml run --rm -v `pwd`:/host:ro --entrypoint /edgex/secrets-config edgex-proxy proxy tls --incert /host/cert.pem --inkey /host/key.pem --snis edge001.example.com --admin_api_jwt /tmp/edgex/secrets/security-proxy-setup/kong-admin-jwt\n</code></pre> <p>The utility will always add the internal host names, \"localhost\" and \"kong\" to the specified SNI list.</p> <p>The following command can verify the certificate installation was successful.</p> <pre><code>echo \"GET /\" | openssl s_client -showcerts -servername edge001.example.com -connect 127.0.0.1:8443\n</code></pre>"},{"location":"security/Ch-APIGateway/#configuration-of-jwt-authentication-for-api-gateway","title":"Configuration of JWT Authentication for API Gateway","text":"<p>When using JWT Authentication, the [KongAuth] section needs to be specified in the configuration file as shown below.  This is the default.</p> <pre><code>[KongAuth]\nName = \"jwt\"\n</code></pre> <p>EdgeX 2.0</p> <p>The \"oauth2\" authentication method has been removed in EdgeX 2.0 as JWT-based authentication is resistant to brute-force attacks and does not require storage of a secret in the Kong database.</p>"},{"location":"security/Ch-APIGateway/#configuration-of-adding-microservices-routes-for-api-gateway","title":"Configuration of Adding Microservices Routes for API Gateway","text":"<p>For the current pre-existing Kong routes, they are configured and initialized statically through configuration TOML file specified in <code>security-proxy-setup</code> application. This is not sufficient for some other new additional microservices like application services, for example.  Thus, adding new proxy Kong routes are now possibly achieved via the environment variable, <code>ADD_PROXY_ROUTE</code>, of service <code>edgex-proxy</code> in the docker-compose file.  Here is an example:</p> <pre><code>edgex-proxy:\n...\nenvironment:\n...\nADD_PROXY_ROUTE: \"myApp.http://my-app:56789\"\n...\n\n...\n\nmy-app:\n...\ncontainer_name: myApp\nhostname: myApp\n...\n</code></pre> <p>The value of <code>ADD_PROXY_ROUTE</code> takes a comma-separated list of one or more (at least one) paired additional service name and URL for which to create proxy Kong routes.   The paired specification is given as the following:</p> <pre><code>&lt;RoutePrefix&gt;.&lt;TargetRouteURL&gt;\n</code></pre> <p>where RoutePrefix is the name of service which requests to create proxy Kong route and it is case insensitive; it is the docker network hostname of the service that want to add the proxy Kong route in the docker-compose file if running from docker-compose, for example, <code>myApp</code> in this case.</p> <p>TargetRouteURL is the full qualified URL for the target service, like <code>http://myapp:56789</code> as it is known on on the network on which the API gateway is running.  For Docker, the hostname should match the hostname specified in the <code>docker-compose</code> file.</p> <p>So as an example, for a single service, the value of <code>ADD_PROXY_ROUTE</code> would be:  \"<code>myApp.http://myapp:56789</code>\".</p> <p>Once <code>ADD_PROXY_ROUTE</code> is configured and composed-up successfully, the proxy route then can be accessed the app's REST API via Kong as <code>https://localhost:8443/myApp/api/v2/...</code> in the same way you would access the EdgeX service. You will also need an access token obtained using the documentation below.</p>"},{"location":"security/Ch-APIGateway/#using-api-gateway","title":"Using API Gateway","text":""},{"location":"security/Ch-APIGateway/#resource-mapping-between-edgex-microservice-and-api-gateway","title":"Resource Mapping between EdgeX Microservice and API gateway","text":"<p>If the EdgeX API gateway is not in use, a client can access and use any REST API provided by the EdgeX microservices by sending an HTTP request to the service endpoint. E.g., a client can consume the ping endpoint of the Core Data microservice with curl command like this:</p> <pre><code>curl http://&lt;core-data-microservice-ip&gt;:59880/api/v2/ping\n</code></pre> <p>Once the API gateway is started and initialized successfully, and all the common ports for EdgeX microservices are blocked by disabling the exposed external ports of the EdgeX microservices through updating the docker compose file, the EdgeX microservice will be behind the gateway. At this time both the microservice host/IP Address (\\&lt;core-data-microservice-ip&gt; in the example) as well as the service port (59880 in the example) are not available to external access. EdgeX uses the gateway as a single entry point for all the REST APIs. With the API gateway in place, the curl command to ping the endpoint of the same Core Data service, as shown above, needs to change to:</p> <pre><code>curl https://&lt;api-gateway-host&gt;:8443/core-data/api/v2/ping\n</code></pre> <p>Comparing these two curl commands you may notice several differences.</p> <ul> <li><code>http</code> is switched to <code>https</code> as we enable the SSL/TLS for secure     communication. This applies to any client side request.     (If the certificate is not trusted, the <code>-k</code> option to <code>curl</code>     may also be required.)</li> <li>The EdgeX microservice IP address where the request is sent changed     to the host/IP address of API gateway service (recall the API     gateway becomes the single entry point for all the EdgeX micro     services). The API gateway will eventually relay the request to     the Core Data service if the client is authorized.     Note that for Kong to serve the proper TLS certificate,     a DNS host name must be used as SNI does not support     IP addresses. This is a standards-compliant behavior,     not a limitation of Kong.</li> <li>The port of the request is switched from 48080 to 8443, which is the     default SSL/TLS port for API gateway (versus the micro service     port). This applies to any client side request.</li> <li>The <code>/core-data/</code> path in the URL is used to identify which EdgeX     micro service the request is routed to. As each EdgeX micro service     has a dedicated service port open that accepts incoming requests,     there is a mapping table kept by the API gateway that maps paths to     micro service ports. A partial listing of the map between ports and     URL paths is shown in the table below.</li> </ul> Microservice Host Name Port number Partial URL edgex-core-data 59880 core-data edgex-core-metadata 59881 core-metadata edgex-core-command 59882 core-command edgex-support-notifications 59860 support-notifications edgex-support-scheduler 59861 support-scheduler edgex-kuiper 59720 rules-engine device-virtual 59900 device-virtual"},{"location":"security/Ch-APIGateway/#creating-access-token-for-api-gateway-authentication","title":"Creating Access Token for API Gateway Authentication","text":"<p>The API gateway is configured to require authentiation prior to passing a request to a back-end microservice.</p> <p>It is necessary to create an API gateway user in order to satify the authentication requirement.  Gateway users are created using the proxy subcommand of the secrets-config utility.</p>"},{"location":"security/Ch-APIGateway/#jwt-authentication","title":"JWT authentication","text":"<p>JWT authentication is based on a public/private keypair, where the public key is registered with the API gateway, and the private key is kept secret.  This method does not require exposing any secret to the API gateway and allows JWTs to be generated offline.</p> <p>Before using the JWT authentiation method, it is necessary to create a public/private keypair. This example uses ECDSA keys, but RSA key can be used as well.</p> <pre><code>openssl ecparam -name prime256v1 -genkey -noout -out ec256.key\nopenssl ec -out ec256.pub &lt; ec256.key\n</code></pre> <p>Next, generate and save a unique ID that will be used in any issued JWTs to look up the public key to be used for validation. Also we need the JWT used to authenticate to Kong--this JWT was written to host-based secrets area when the framework was started. (Note the backtick to capture the uuidegen output.)</p> <pre><code>ID=`uuidgen`\nKONGJWT=`sudo cat /tmp/edgex/secrets/security-proxy-setup/kong-admin-jwt`\n</code></pre> <p>Register a user for that key:</p> <pre><code>docker-compose -p edgex -f docker-compose.yml run --rm -v `pwd`:/host:ro -u \"$UID\" --entrypoint \"/edgex/secrets-config\" proxy-setup -- proxy adduser --token-type jwt --id \"$ID\" --algorithm ES256 --public_key /host/ec256.pub --user _SOME_USERNAME_ --jwt \"$KONGJWT\"\n</code></pre> <p>Lastly, generate a valid JWT.  Any JWT library should work, but secrets-config provides a convenient utility:</p> <pre><code>docker-compose -p edgex -f docker-compose.yml run --rm -v `pwd`:/host:ro -u \"$UID\" --entrypoint \"/edgex/secrets-config\" proxy-setup -- proxy jwt --id \"$ID\" --algorithm ES256 --private_key /host/ec256.key\n</code></pre> <p>The command will output a long alphanumeric sequence of the format</p> <pre><code>&lt;alphanumeric&gt; '.' &lt;alphanumeric&gt; '.' &lt;alphanumeric&gt;\n</code></pre> <p>The access token is used in the Authorization header of the request (see details below).</p> <p>To de-authorize or delete the user:</p> <pre><code>docker-compose -p edgex -f docker-compose.yml run --rm -u \"$UID\" --entrypoint \"/edgex/secrets-config\" proxy-setup -- proxy deluser --user _SOME_USERNAME_ --jwt \"$KONGJWT\"\n</code></pre>"},{"location":"security/Ch-APIGateway/#using-api-gateway-to-proxy-existing-edgex-microservices","title":"Using API Gateway to Proxy Existing EdgeX Microservices","text":"<p>Once the resource mapping and access token to API gateway are in place, a client can use the access token to use the protected EdgeX REST API resources behind the API gateway. Again, without the API Gateway in place, here is the sample request to hit the ping endpoint of the EdgeX Core Data microservice using curl:</p> <pre><code>curl http://&lt;host-system-ip&gt;:59880/api/v2/ping\n</code></pre> <p>With the security service and JWT authentication is enabled, the command changes to:</p> <pre><code>curl -k --resolve kong:8443:127.0.0.1 -H 'Authorization: Bearer &lt;JWT&gt;' https://kong:8443/core-data/api/v2/ping\n</code></pre> <p>(Note the above <code>--resolve</code> line forces \"kong\" to resolve to 127.0.0.1. This is just for illustrative purposes to force SNI. In practice, the TLS certificate would be registered under the external host name.)</p> <p>In summary the difference between the two commands are listed below:</p> <ul> <li>--resolve tells curl to resolve https://kong:8443 to     the loopback address.  This will cause curl to use the     hostname <code>kong</code> as the SNI, but connect to the specified IP     address to make the connection.     -k tells curl to ignore certificate errors. This is for     demonstration purposes. In production, a known certificate that     the client trusts be installed on the proxy and this parameter omitted.</li> <li>--H \"host: edgex\" is used to indicate that the request is for     EdgeX domain as the API gateway could be used to take requests for     different domains.</li> <li>Use the https versus http protocol identifier for SSL/TLS secure     communication.</li> <li>The service port 8443 is the default TLS service port of API gateway</li> <li>Use the URL path \"coredata\" to indicate which EdgeX microservice     the request is routed to</li> <li>Use header of -H \"Authorization: Bearer \\&lt;access-token&gt;\" to     specify the access token associated with the client that was     generated when the client was added.</li> </ul>"},{"location":"security/Ch-APIGateway/#adjust-kong-worker-processes-to-optimize-the-performance","title":"Adjust Kong worker processes to optimize the performance","text":"<p>The number of the Kong worker processes would impact the memory consumption and the API Gateway performance. In order to reduce the memory consumption, the default value of it in EdgeX Foundry is one instead of auto (the original default value).  This setting is defined in the environment variable section of the docker-compose file. <pre><code>KONG_NGINX_WORKER_PROCESSES: '1'\n</code></pre> Users can adjust this value to meet their requirement, or remove this environment variable to adjust it automatically. Read the references for more details about this setting: </p> <ul> <li>https://docs.konghq.com/gateway-oss/2.5.x/configuration/#nginx_worker_processes</li> <li>http://nginx.org/en/docs/ngx_core_module.html#worker_processes</li> </ul>"},{"location":"security/Ch-AddGatewayUserRemotely/","title":"Adding EdgeX API Gateway Users Remotely","text":"<p>EdgeX 2.1</p> <p>Want to know what's new in EdgeX 2.1 (Jakarta)?  If you are already familiar with EdgeX, look for the EdgeX 2.1 emoji (<code>Edgey</code> - the EdgeX mascot) throughout the documentation outlining what's new.  These sections will give you a summary of what's new in each area of the documentation.</p> <p>Starting in EdgeX Ireland, the API gateway administrative interface is exposed by the <code>/admin</code> sub-URL of the gateway. Using this interface, and a special admin-only JWT, it is possible to remotely add gateway users. Support for this method in <code>secrets-config</code> was added in EdgeX Jakarta.</p>"},{"location":"security/Ch-AddGatewayUserRemotely/#pre-requisite-obtain-a-kong-admin-jwt","title":"Pre-requisite: Obtain a Kong Admin JWT","text":"<p>When EdgeX starts, the <code>security-secretstore-setup</code> utility creates a special administrative JWT and writes a Kong configuration file to trust it. The reasons why this is done here is explained in detail in <code>https://github.com/edgexfoundry/edgex-go/blob/main/internal/security/secretstore/init.go</code></p> <p>For security reasons, the created JWT is transient in nature: the private key used to create it is destroyed after the JWT is generated,  and a new JWT using a new key is created each time the EdgeX framework is started. This prevents exfiltration of a private key that could be used to permanently compromise the security of a given EdgeX host.</p> <p>If long-term access to the API gateway admin API is desired, it is left as an excersise to the reader to seed the Kong database with administrative public key whose private key is not known to the EdgeX framework and will persist across reboots. This could be done, for example, by creating a custom EdgeX microservice that has access to <code>kong-admin-jwt</code> and uses it to seed another user in the <code>admin</code> group. Alternatively, one could override <code>kong-admin-config.template.yml</code> to include an additional user and key. It is advisable to make such a key unique to the machine (best) or unique to the deployment (second best). It is inadvisable to code such a key into source code such that it would be shared across deployments.</p> <p>For now, let us make a copy the <code>kong-admin-jwt</code>:</p> <pre><code>sudo cp /tmp/edgex/secrets/security-proxy-setup/kong-admin-jwt .\nsudo chmod 400 kong-admin-jwt\nsudo chown \"${USER}:${USER}\" kong-admin-jwt\n</code></pre>"},{"location":"security/Ch-AddGatewayUserRemotely/#create-id-and-credential-for-the-gateway-user","title":"Create ID and Credential for the Gateway User","text":"<p>For the new user, create a unique ID and a public/private keypair to authenticate the user.</p> <pre><code>test -f gateway.id || uuidgen &gt; gateway.id\ntest -f gateway.key || openssl ecparam -name prime256v1 -genkey -noout -out gateway.key 2&gt; /dev/null\ntest -f gateway.pub || openssl ec -in gateway.key -pubout -out gateway.pub 2&gt; /dev/null\n</code></pre> <p>Retain these files, <code>gateway.id</code>, <code>gateway.key</code>, and <code>gateway.pub</code> to create a JWT to access the proxy later. The <code>gateway.id</code> file contains a unique value, in this case, a GUID, that the gateway uses to look up the public key needed to validate the JWT.</p>"},{"location":"security/Ch-AddGatewayUserRemotely/#create-an-proxy-user-and-credential","title":"Create an proxy user and credential","text":"<p>First, let us extract the <code>secrets-config</code> utility from an existing EdgeX container. The utility can also be built from source to the same effect.</p> <pre><code>CORE_EDGEX_VERSION=2.0.0 # Update to verion for Jakarta release\nDEV=\nPROXY_SETUP_CONTAINER=\"edgexfoundry/security-proxy-setup:${CORE_EDGEX_VERSION}${DEV}\"\n\ndocker run --rm --entrypoint /bin/cat \"${PROXY_SETUP_CONTAINER}\" /edgex/secrets-config &gt; secrets-config\nchmod +x secrets-config\ntest -d res || mkdir res\ndocker run --rm --entrypoint /bin/cat \"${PROXY_SETUP_CONTAINER}\" /edgex/res/configuration.toml &gt; res/configuration.toml\n</code></pre> <p>Then, let us add a user to the gateway.  Note: Currently one must use the string \"gateway\" as the group.</p> <pre><code>ID=`cat gateway.id`\nADMIN_JWT=`cat kong-admin-jwt`\nGW_USER=gateway\nGW_GROUP=gateway\nexport KONGURL_SERVER=&lt;ip address of gateway&gt;\n./secrets-config proxy adduser --token-type jwt --id ${ID} --algorithm ES256 --public_key gateway.pub --user \"${GW_USER}\" --group \"${GW_GROUP}\" --jwt \"${ADMIN_JWT}\"\n</code></pre>"},{"location":"security/Ch-AddGatewayUserRemotely/#creating-jwts-to-access-the-gateway","title":"Creating JWTs to access the gateway","text":"<p>The <code>secrets-config</code> utility has a helper method to create a JWT from the ID and private key:</p> <p>By default, the resulting JWT is valid for only one hour. This can be changed with the <code>--expiration</code> flag if needed.</p> <pre><code>ID=`cat gateway.id`\nUSER_JWT=`./secrets-config proxy jwt --algorithm ES256 --id ${ID} --private_key gateway.key`\n</code></pre> <p>Use the resulting JWT to call an EdgeX API method through the gateway:</p> <pre><code>curl -k -H \"Authorization: Bearer ${USER_JWT}\" \"https://localhost:8443/core-data/api/v2/ping\"\n</code></pre> <p>Output: <pre><code>{\"apiVersion\":\"v2\",\"timestamp\":\"Fri Sep  3 00:33:58 UTC 2021\"}\n</code></pre></p>"},{"location":"security/Ch-CORS-Settings/","title":"CORS settings","text":"<p>EdgeX 2.1</p> <p>New for EdgeX 2.1 is the ability to enable CORS access to EdgeX microservices through configuration. </p> <p>The EdgeX microservices provide REST APIs and those services might be called from a GUI through a browser. Browsers prevent service calls from a different origin, making it impossible to host a management GUI on one domain that manages an EdgeX device on a different domain. Thus, EdgeX supports Cross-Origin Resource Sharing (CORS) since Jakarta release (v2.1), and this feature can be controlled by the configurations. The default behavior of CORS is disabled. Here is a good reference to understand CORS.</p> <p>Note</p> <p>C Device SDK doesn't support CORS, and enabling CORS in Device Services is not recommended because browsers should not access Device Services directly.</p>"},{"location":"security/Ch-CORS-Settings/#enabling-cors","title":"Enabling CORS","text":"<p>There are two different ways to enable CORS depending on whether EdgeX is deployed in the security-enabled configuration. In the non-security configuration, EdgeX microservices are directly exposed on host ports. EdgeX microservices receive client requests directly in this configuration, and thus, the EdgeX microservices themselves must respond to CORS requests. In the security-enabled configuration, EdgeX microservices are exposed behind an API gateway that will receive CORS requests first. Only authenticated calls will be forwarded to the EdgeX microservice, but CORS pre-flight requests are always unauthenticated.</p> <p>CORS can be enabled at the API gateway in a security-enabled configuration, and at the individual microservice level in the non-security configuration. However, implementers should choose one or the other, not both.</p>"},{"location":"security/Ch-CORS-Settings/#enabling-cors-for-individual-microservices","title":"Enabling CORS for Individual Microservices","text":"<p>Configure CORS in the <code>Service.CORSConfiguration</code> configuration section for each microservice to be exposed via CORS.  They can also be set via <code>Service_CORSConfiguration_*</code> environment variables. Please refer to the Common Configuration page to learn the details.</p>"},{"location":"security/Ch-CORS-Settings/#enabling-cors-for-api-gateway","title":"Enabling CORS for API Gateway","text":"<p>Configure CORS in the <code>CORSConfiguration</code> configuration section for the <code>security-proxy-setup</code> microservice. They can also be set via <code>CORSConfiguration_*</code> environment variables.</p> <p>Note</p> <p>The settings under the CORSConfiguration configuration section are the same as those under the Service.CORSConfiguration so please refer to the Common Configuration page to learn the details.</p> <p>Note</p> <p>The name of the configuration sections and environment variable overrides are intentionally different than the API gateway section, in alignment with the guidance that CORS should be enabled at the microservice level or the API gateway level, but not both.</p>"},{"location":"security/Ch-Configuring-Add-On-Services/","title":"Configuring Add-on Service","text":"<p>In the current EdgeX security serivces, we set up and configure all security related properties and environments for the existing default serivces like <code>core-data</code>, <code>core-metadata</code>, <code>device-virtual</code>, and so on.</p> <p>The settings and service environment variables are pre-wired and ready to run in secure mode without any update or modification to the Docker-compose files.  However, there are some pre-built add-on services like some device services (e.g.<code>device-camera</code>, <code>device-modbus</code>), and some of application services (e.g. <code>app-http-export</code>, <code>app-mqtt-export</code>) are not pre-wired for by default. Also if you are adding on your custom application service, there is no pre-wiring for it and thus need some configuration efforts to make them run in secure mode.</p> <p>EdgeX provides a way for a user to add and configure those add-on services into EdgeX Docker software stack running in secure mode.  This can be done vai Docker-compose files with a few additional environment variables and some modification of micro-service's Dockerfile. From <code>edgex-compose</code> repository, the <code>compose-builder</code> utility provides some ways to deal with those add-on services like through <code>add-security.yml</code> via <code>make</code> targets to generate <code>docker-compose</code> file for running them in secure mode. For more details, please refer to README documentation of compose-builder.</p> <p>The above same guidelines can also be applied to custom device and application services, i.e. non-EdgeX built services.</p> <p>One of the major security features in EdgeX Ireland release is to utilize the service <code>security-bootstrapper</code> to ensure the right starting sequence so that all services have their needed security dependencies when they start up.</p> <p>Currently EdgeX uses <code>Vault</code> as the default implementation for secret store and Consul as the configuration and/or registry server if user chooses to do so.  There are some default services pre-configured to have <code>Secret Stores</code> created by default such as EdgeX core/support services, device-virtual, device-rest, and app-rules-engine services.</p> <p>For running additional add-on services (e.g. <code>device-camera</code>, <code>app-http-export</code>) in secure mode, their <code>Secret Stores</code> are not generated by default but they can be generated through some configuring steps as shown below.</p> <p>In the following scenario, we assume the EdgeX services are running in Docker environments, and thus the examples are given in terms of Docker-compose ways.  It should not be much or bigger difference for <code>snap</code> running environment to apply the same steps or concepts if found to do so.</p> <p>If users want to configure and set up an add-on service, e.g. <code>device-camera</code>, they can achieve this by following the steps that are outlined below:</p>"},{"location":"security/Ch-Configuring-Add-On-Services/#make-add-on-services-security-bootstrapper-compatible","title":"Make add-on services security-bootstrapper compatible","text":"<p>To use the Docker entrypoint scripts for gating mechanism from <code>security-bootstrapper</code>, the Dockerfile of <code>device-camera</code> should inherit shell scripting capability like <code>alpine</code>-based as the base Docker image and should install <code>dumb-init</code>(see details in Why you need an init system) via <code>apk add --update</code> command.</p> <p>Dockerfile example using alpine-base image and add <code>dumb-init</code>:</p> <pre><code>......\nFROM alpine:3.12\n\n# dumb-init needed for injected secure bootstrapping entrypoint script when run in secure mode.\nRUN apk add --update --no-cache dumb-init\n......\n</code></pre> <p>and then for the service itself should add <code>/edgex-init/ready_to_run_wait_install.sh</code> as the entrypoint script for the service in gating fashion and add related Docker volumes for <code>edgex-init</code> and for <code>Secret Store</code> token, which will be outlined in the next section.</p> <p>A good example of this will be like <code>app-service-rules</code>:</p> <pre><code>...\napp-service-rules:\nentrypoint: [\"/edgex-init/ready_to_run_wait_install.sh\"]\ncommand: \"/app-service-configurable ${DEFAULT_EDGEX_RUN_CMD_PARMS}\"\nvolumes:\n- edgex-init:/edgex-init:ro,z\n- /tmp/edgex/secrets/app-rules-engine:/tmp/edgex/secrets/app-rules-engine:ro,z\ndepends_on:\n- security-bootstrapper\n...\n</code></pre> <p>Note that we also add <code>command</code> directive override in the above example because we override Docker's entrypoint script in the original Dockerfile and Docker ignores the original command when the entrypoint script is overridden.  In this case, we also override the <code>command</code> for <code>app-service-rules</code> service with arguments to execute.</p>"},{"location":"security/Ch-Configuring-Add-On-Services/#configure-the-services-secret-store-to-use","title":"Configure the service's <code>Secret Store</code> to use","text":"<p>Make sure the TOML configuration file of add-on service like <code>device-camera</code> contains the proper <code>[SecretStore]</code> section.</p> <p>Example:</p> <pre><code>[SecretStore]\nType = \"vault\"\nHost = \"localhost\"\nPort = 8200\nPath = \"device-camera/\"\nProtocol = \"http\"\nRootCaCertPath = \"\"\nServerName = \"\"\nTokenFile = \"/tmp/edgex/secrets/device-camera/secrets-token.json\"\n[SecretStore.Authentication]\nAuthType = \"X-Vault-Token\"\n</code></pre> <p>Note that the service key <code>device-camera</code> must be used for the <code>Path</code> and in the <code>TokenFile</code> path to keep it consistent and easier to maintain. And then add the add-on service's service key to EdgeX service <code>secretstore-setup</code>'s <code>ADD_SECRETSTORE_TOKENS</code> environment variable in the <code>environment</code> section of <code>docker-compose</code> as the example shown below:</p> <pre><code>...\nsecretstore-setup:\ncontainer_name: edgex-secretstore-setup\ndepends_on:\n- security-bootstrapper\n- vault\nenvironment:\nADD_SECRETSTORE_TOKENS: 'device-camera'\n...\n</code></pre> <p>With that, <code>secretstore-setup</code> then will generate <code>Secret Store</code> token from <code>Vault</code> and store it in the <code>TokenFile</code> path specified in the TOML configuration file like the above example.</p> <p>Also note that the value of <code>ADD_SECRETSTORE_TOKENS</code> can take more than one service in a form of comma separated list like \"<code>device-camera</code>, <code>device-modbus</code>\" if needed.</p>"},{"location":"security/Ch-Configuring-Add-On-Services/#optional-configure-known-secrets-for-add-on-services","title":"(Optional) Configure known secrets for add-on services","text":"<p>The <code>ADD_KNOWN_SECRETS</code> environment variable on <code>secretstore-setup</code> allows for known secrets to be added to an add-on service's <code>Secret Store</code>.</p> <p>For the Ireland release, the only <code>known</code> secret is the <code>Redis DB credentials</code> identified by the name <code>redisdb</code>. Any add-on service needing access to the <code>Redis DB</code> such as App Service HTTP Export with Store and Forward enabled will need the <code>Redis DB credentials</code> put in its <code>Secret Store</code>. Also, since the <code>Redis DB</code> service is now used for the MessageBus implementation, all services that connect to the MessageBus also need the <code>Redis DB credentials</code></p> <p>Note that the steps needed for connecting add-on services to the <code>Secure MessageBus</code> are:</p> <ol> <li>Utilizing the <code>security-bootstrapper</code> to ensure proper startup sequence</li> <li>Creating the <code>Secret Store</code> for the add-on service</li> <li>Adding the <code>redisdb</code>'s known secret to the add-on service's <code>Secret Store</code></li> </ol> <p>and if the add-on service is not connecting to the bus or the Redis database, then this step can be skipped.</p> <p>So given an example for service <code>device-virtual</code> to use the <code>Redis</code> message bus in secure mode, we need to tell <code>secretstore-setup</code> to add the <code>redisdb</code> known secret to <code>Secret Store</code> for <code>device-virtual</code>. This can be done through the configuration of adding <code>redisdb[device-virtual]</code> into the environment variable <code>ADD_KNOWN_SECRETS</code> in <code>secretstore-setup</code> service's environment section, in which <code>redisdb</code> is the name of the <code>known secret</code> and <code>device-virtual</code> is the service key of the add-on service.</p> <pre><code>...\nsecretstore-setup:\ncontainer_name: edgex-secretstore-setup\ndepends_on:\n- security-bootstrapper\n- vault\nenvironment:\nADD_SECRETSTORE_TOKENS: 'device-camera, my-service'\nADD_KNOWN_SECRETS: redisdb[app-rules-engine],redisdb[device-rest],redisdb[device-virtual]\n...\n</code></pre> <p>In the above <code>docker-compose</code> section of <code>secretstore-setup</code>, we specify the known secret of <code>redisdb</code> to add/copy the Redis database credentials to the <code>Secret Store</code> for the <code>app-rules-engine</code>, <code>device-rest</code>, and <code>device-virtual</code> services.</p> <p>We can also use the alternative or simpler form of <code>ADD_KNOWN_SECRETS</code> environment variable's value like</p> <pre><code>    ADD_KNOWN_SECRETS: redisdb[app-rules-engine; device-rest; device-virtual]\n</code></pre> <p>in which all add-on services are put together in a comma separated list associated with the known secret <code>redisdb</code>.</p>"},{"location":"security/Ch-Configuring-Add-On-Services/#optional-configure-the-acl-role-of-configurationregistry-to-use-if-the-service-depends-on-it","title":"(Optional) Configure the ACL role of configuration/registry to use if the service depends on it","text":"<p>This is a new step coming from <code>securing Consul</code> security features as part of EdgeX Ireland release.</p> <p>If the add-on service uses <code>Consul</code> as the configuration and/or registry service, then we also need to configure the environment variable <code>ADD_REGISTRY_ACL_ROLES</code> to tell <code>security-bootstrapper</code> to generate an ACL role for <code>Consul</code> to associate with its token.</p> <p>An example of configuring ACL roles of the registry <code>Consul</code> for the add-on services <code>device-modbus</code> and <code>app-http-export</code> is shown as follows:</p> <pre><code>...\nconsul:\ncontainer_name: edgex-core-consul\ndepends_on:\n- security-bootstrapper\n- vault\nentrypoint:\n- /edgex-init/consul_wait_install.sh\nenvironment:\nADD_REGISTRY_ACL_ROLES: app-http-export,device-modbus\n...\n</code></pre> <p>The configuration of Edgex service <code>consul</code>'s environment variable <code>ADD_REGISTRY_ACL_ROLES</code> tells the <code>security-bootstrapper</code> to set up <code>Consul</code> ACL role so that the ACL token is generated, hence the permission is granted for that service with the access to <code>Consul</code> in secure mode.</p> <p>Without this step the add-on service will get status <code>Forbidden</code> (HTTP status code = 403) error when the service is depending on Consul and attempting to access Consul for configuration or service registry.</p>"},{"location":"security/Ch-Configuring-Add-On-Services/#optional-configure-the-api-gateway-access-route-for-add-on-service","title":"(Optional) Configure the API gateway access route for add-on service","text":"<p>If it is desirable to let user or other application services outside EdgeX's Docker network access the endpoint of the add-on service, then we can configure and add it via <code>proxy-setup</code> service's <code>ADD_PROXY_ROUTE</code> environment variable.  <code>proxy-setup</code> adds those services listed in that environment variable into the API gateway (also known as Kong) route so that the endpoint can be accessible using Kong's proxy endpoint.</p> <p>One example of adding API gateway access routes for both <code>device-camera</code> and <code>device-modbus</code> is given as follows:</p> <pre><code>...\nedgex-proxy:\n...\nenvironment:\n...\nADD_PROXY_ROUTE: \"device-camera.http://edgex-device-camera:59985, device-modbus.http://edgex-device-modbus:59901\"\n...\n...\n</code></pre> <p>where in the comma separated list, the first part of configured value <code>device-camera</code> is the service key and the URL format is the service's hostname with its docker network port number <code>59985</code> for <code>device-camera</code>.  The same idea applies to <code>device-modbus</code> with its values.</p> <p>With that setup, we can then access the endpoints of <code>device-camera</code> from Kong's host like <code>https://&lt;HostName&gt;:8443/device-camera/{device-name}/name</code> assuming the caller can resolve <code>&lt;HostName&gt;</code> from DNS server.</p> <p>For more details on the introduction to the API gateway and how it works, please see APIGateway documentation page.</p>"},{"location":"security/Ch-RemoteDeviceServices/","title":"Remote Device Services in Secure Mode","text":"<p>This page describes the remote device service example in the <code>edgex-examples</code> GitHub repository.</p> <p>Running a remote device service poses several problems when EdgeX is running in secure mode:</p> <ul> <li> <p>Network traffic between the primary EdgeX node and the remote   device service node is unencrypted.</p> </li> <li> <p>The remote device service will not have a Consul authentication token   that allows it to talk to the registry and configuration services.</p> </li> <li> <p>The remote device service will not have a secret store token that   allows access to the EdgeX secret store (which is also needed to   obtain a Consul authentication token).</p> </li> </ul> <p>This example will resolve the above complications by</p> <ol> <li> <p>Creating secure SSH network tunnel between nodes to encrypt    network communication.</p> </li> <li> <p>Use the delayed start feature introduced in EdgeX Kamakura to    lasily obtain a secret store token that will grant the device    service access to the EdgeX secret store, EdgeX registry service,    and EdgeX configuration service.</p> </li> </ol>"},{"location":"security/Ch-RemoteDeviceServices/#running-the-example","title":"Running the Example","text":"<p>First, clone the <code>edgex-examples repository</code>, checkout <code>v2.2.0</code> and change to the <code>security/remote_devices/spiffe_and_ssh</code> directory.</p> <p>Next, run the <code>generate_keys.sh</code> script to generate an SSH keypair for the SSH tunnel. This keypair is used only for the SSH tunnel and should have no other privileges.</p> <p>Once the <code>generate_keys.sh</code> script has been run, copy the <code>remote</code> folder to the remote device service machine.</p>"},{"location":"security/Ch-RemoteDeviceServices/#on-the-local-machine","title":"On the Local Machine","text":"<p>Change directories to the <code>local</code> folder.</p> <p>Edit <code>docker-compose.yml</code> and change the <code>TUNNEL_HOST</code> environment variable to the IP address of the remote node.</p> <p>Run</p> <pre><code>$ docker-compose build\n$ docker-compose up -d\n</code></pre> <p>After the framework has been built and is running, check the <code>device-ssh-proxy</code> service</p> <pre><code>$ docker ps -a | grep device-ssh-proxy\na92ff2d6999c device-ssh-proxy:latest \"/edgex-init\u2026\"   2 minutes ago   Restarting (1) 16 seconds ago edgex-device-ssh-proxy\n$ docker logs device-ssh-proxy\n+ scp -p -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -P 2223 /srv/spiffe/remote-agent/agent.key 192.168.122.193:/srv/spiffe/remote-agent/agent.key\nssh: connect to host 192.168.122.193 port 2223: Connection refused\nlost connection\n</code></pre> <p>The SSH connection will continue to fail until the remote node is brought up.</p> <p>Next, authorize the workload running on the remote node.</p> <pre><code>$ ./add-server-entry.sh\nEntry ID         : f62bfec6-b19c-43ea-94b8-975f7e9a258e\nSPIFFE ID        : spiffe://edgexfoundry.org/service/device-virtual\nParent ID        : spiffe://edgexfoundry.org/spire/agent/x509pop/cn/remote-agent\nRevision         : 0\nTTL              : default\nSelector         : docker:label:com.docker.compose.service:device-virtual\nDNS name         : edgex-device-virtual\n</code></pre> <p>That is all to be done on the local node.</p>"},{"location":"security/Ch-RemoteDeviceServices/#on-the-remote-machine","title":"On the Remote Machine","text":"<p>Change directories to the <code>remote</code> folder and run</p> <pre><code>$ docker-compose build\n$ docker-compose up -d\n</code></pre> <p>After the framework has been built and is running for about a minute, check the <code>device-virtual</code> service</p> <pre><code>$ docker logs -f edgex-device-virtual\nlevel=INFO ts=2022-05-05T14:28:30.005673094Z app=device-virtual source=config.go:391 msg=\"Loaded service configuration from ./res/configuration.toml\"\nlevel=INFO ts=2022-05-05T14:28:30.006211643Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.RuntimeTokenProvider.Port' by environment variable: SECRETSTORE_RUNTIMETOKENPROVIDER_PORT=59841\"\nlevel=INFO ts=2022-05-05T14:28:30.006286584Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.RuntimeTokenProvider.Protocol' by environment variable: SECRETSTORE_RUNTIMETOKENPROVIDER_PROTOCOL=https\"\nlevel=INFO ts=2022-05-05T14:28:30.006341968Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'Clients.core-metadata.Host' by environment variable: CLIENTS_CORE_METADATA_HOST=edgex-core-metadata\"\nlevel=INFO ts=2022-05-05T14:28:30.006382102Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'MessageQueue.Host' by environment variable: MESSAGEQUEUE_HOST=edgex-redis\"\nlevel=INFO ts=2022-05-05T14:28:30.006416098Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.RuntimeTokenProvider.EndpointSocket' by environment variable: SECRETSTORE_RUNTIMETOKENPROVIDER_ENDPOINTSOCKET=/tmp/edgex/secrets/spiffe/public/api.sock\"\nlevel=INFO ts=2022-05-05T14:28:30.006457406Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.RuntimeTokenProvider.RequiredSecrets' by environment variable: SECRETSTORE_RUNTIMETOKENPROVIDER_REQUIREDSECRETS=redisdb\"\nlevel=INFO ts=2022-05-05T14:28:30.006495791Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.RuntimeTokenProvider.Enabled' by environment variable: SECRETSTORE_RUNTIMETOKENPROVIDER_ENABLED=true\"\nlevel=INFO ts=2022-05-05T14:28:30.006529808Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.RuntimeTokenProvider.Host' by environment variable: SECRETSTORE_RUNTIMETOKENPROVIDER_HOST=edgex-security-spiffe-token-provider\"\nlevel=INFO ts=2022-05-05T14:28:30.006575741Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'Clients.core-data.Host' by environment variable: CLIENTS_CORE_DATA_HOST=edgex-core-data\"\nlevel=INFO ts=2022-05-05T14:28:30.006617026Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.Host' by environment variable: SECRETSTORE_HOST=edgex-vault\"\nlevel=INFO ts=2022-05-05T14:28:30.006650922Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.Port' by environment variable: SECRETSTORE_PORT=8200\"\nlevel=INFO ts=2022-05-05T14:28:30.006691769Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'SecretStore.RuntimeTokenProvider.TrustDomain' by environment variable: SECRETSTORE_RUNTIMETOKENPROVIDER_TRUSTDOMAIN=edgexfoundry.org\"\nlevel=INFO ts=2022-05-05T14:28:30.006729711Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'Service.Host' by environment variable: SERVICE_HOST=edgex-device-virtual\"\nlevel=INFO ts=2022-05-05T14:28:30.006764754Z app=device-virtual source=variables.go:352 msg=\"Variables override of 'Registry.Host' by environment variable: REGISTRY_HOST=edgex-core-consul\"\nlevel=INFO ts=2022-05-05T14:28:30.006904867Z app=device-virtual source=secret.go:55 msg=\"Creating SecretClient\"\nlevel=INFO ts=2022-05-05T14:28:30.006953018Z app=device-virtual source=secret.go:62 msg=\"Reading secret store configuration and authentication token\"\nlevel=INFO ts=2022-05-05T14:28:30.006994824Z app=device-virtual source=secret.go:165 msg=\"runtime token provider enabled\"\nlevel=INFO ts=2022-05-05T14:28:30.007064786Z app=device-virtual source=methods.go:138 msg=\"using Unix Domain Socket at unix:///tmp/edgex/secrets/spiffe/public/api.sock\"\n</code></pre> <p>If the workload was not authorized on the local side, the output will stop as shown above. The service would be hung waiting for a SPIFFE authentication token.</p> <p>Since the local site was stuck in a retry loop trying to establish an SSH connection to the remote, the service may stay stuck in this state for several minutes until the network tunnels are established.</p> <p>Otherwise the log would continue as follows:</p> <pre><code>level=INFO ts=2022-05-05T14:29:25.078483584Z app=device-virtual source=methods.go:150 msg=\"workload got X509 source\"\nlevel=INFO ts=2022-05-05T14:29:25.168325689Z app=device-virtual source=methods.go:120 msg=\"successfully got token from spiffe-token-provider!\"\nlevel=INFO ts=2022-05-05T14:29:25.169095621Z app=device-virtual source=secret.go:80 msg=\"Attempting to create secret client\"\nlevel=INFO ts=2022-05-05T14:29:25.172259336Z app=device-virtual source=secret.go:91 msg=\"Created SecretClient\"\nlevel=INFO ts=2022-05-05T14:29:25.172359472Z app=device-virtual source=secret.go:96 msg=\"SecretsFile not set, skipping seeding of service secrets.\"\nlevel=INFO ts=2022-05-05T14:29:25.172539631Z app=device-virtual source=secrets.go:276 msg=\"kick off token renewal with interval: 30m0s\"\nlevel=INFO ts=2022-05-05T14:29:25.172433598Z app=device-virtual source=config.go:551 msg=\"Using local configuration from file (14 envVars overrides applied)\"\nlevel=INFO ts=2022-05-05T14:29:25.172916142Z app=device-virtual source=httpserver.go:131 msg=\"Web server starting (edgex-device-virtual:59900)\"\nlevel=INFO ts=2022-05-05T14:29:25.172948285Z app=device-virtual source=messaging.go:69 msg=\"Setting options for secure MessageBus with AuthMode='usernamepassword' and SecretName='redisdb\"\nlevel=INFO ts=2022-05-05T14:29:25.174321296Z app=device-virtual source=messaging.go:97 msg=\"Connected to redis Message Bus @ redis://edgex-redis:6379 publishing on 'edgex/events/device' prefix topic with AuthMode='usernamepassword'\"\nlevel=INFO ts=2022-05-05T14:29:25.174585076Z app=device-virtual source=init.go:135 msg=\"Check core-metadata service's status by ping...\"\nlevel=INFO ts=2022-05-05T14:29:25.176202842Z app=device-virtual source=init.go:54 msg=\"Service clients initialize successful.\"\nlevel=INFO ts=2022-05-05T14:29:25.176377929Z app=device-virtual source=clients.go:124 msg=\"Using configuration for URL for 'core-metadata': http://edgex-core-metadata:59881\"\nlevel=INFO ts=2022-05-05T14:29:25.176559116Z app=device-virtual source=clients.go:124 msg=\"Using configuration for URL for 'core-data': http://edgex-core-data:59880\"\nlevel=INFO ts=2022-05-05T14:29:25.176806351Z app=device-virtual source=restrouter.go:55 msg=\"Registering v2 routes...\"\nlevel=INFO ts=2022-05-05T14:29:25.192658275Z app=device-virtual source=service.go:230 msg=\"device service device-virtual exists, updating it\"\nlevel=INFO ts=2022-05-05T14:29:25.195403199Z app=device-virtual source=profiles.go:54 msg=\"Loading pre-defined profiles from /res/profiles\"\nlevel=INFO ts=2022-05-05T14:29:25.197297762Z app=device-virtual source=profiles.go:88 msg=\"Profile Random-Binary-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.240099318Z app=device-virtual source=profiles.go:88 msg=\"Profile Random-Boolean-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.24221092Z app=device-virtual source=profiles.go:88 msg=\"Profile Random-Float-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.245516797Z app=device-virtual source=profiles.go:88 msg=\"Profile Random-Integer-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.250310838Z app=device-virtual source=profiles.go:88 msg=\"Profile Random-UnsignedInteger-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.250961547Z app=device-virtual source=devices.go:49 msg=\"Loading pre-defined devices from /res/devices\"\nlevel=INFO ts=2022-05-05T14:29:25.252216571Z app=device-virtual source=devices.go:85 msg=\"Device Random-Boolean-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.252274853Z app=device-virtual source=devices.go:85 msg=\"Device Random-Integer-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.252290321Z app=device-virtual source=devices.go:85 msg=\"Device Random-UnsignedInteger-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.252297541Z app=device-virtual source=devices.go:85 msg=\"Device Random-Float-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.252304305Z app=device-virtual source=devices.go:85 msg=\"Device Random-Binary-Device exists, using the existing one\"\nlevel=INFO ts=2022-05-05T14:29:25.252698155Z app=device-virtual source=autodiscovery.go:33 msg=\"AutoDiscovery stopped: disabled by configuration\"\nlevel=INFO ts=2022-05-05T14:29:25.252726349Z app=device-virtual source=autodiscovery.go:42 msg=\"AutoDiscovery stopped: ProtocolDiscovery not implemented\"\nlevel=INFO ts=2022-05-05T14:29:25.252736451Z app=device-virtual source=message.go:50 msg=\"Service dependencies resolved...\"\nlevel=INFO ts=2022-05-05T14:29:25.252804946Z app=device-virtual source=message.go:51 msg=\"Starting device-virtual 2.2.0-dev.15 \"\nlevel=INFO ts=2022-05-05T14:29:25.252817404Z app=device-virtual source=message.go:55 msg=\"device virtual started\"\nlevel=INFO ts=2022-05-05T14:29:25.252880346Z app=device-virtual source=message.go:58 msg=\"Service started in: 55.248960914s\"\n</code></pre> <p>At this point, the remote device service is up and running in secure mode.</p>"},{"location":"security/Ch-RemoteDeviceServices/#ssh-tunneling-explained","title":"SSH Tunneling Explained","text":"<p>In this example, SSH port forwarding is used to establish an encrypted network channel between the local and remote nodes. The local machine as the primary host is running the whole EdgeX core services including core services and security services but without any device service. The device services are running on the remote machine.  </p> <p>The SSH communication is established by introducing some extra SSH-related services:</p> <p>1) <code>device-ssh-proxy</code>.  This service runs on the local machine an is an SSH client that initiates communication with the remote node.  The <code>device-ssh-proxy</code> service has the private key needed to establish the network connection and also authorizes the network tunnels.</p> <p>2) <code>sshd-remote</code>.  This service runs on the remote machine and provides an SSH server for the purposes of establishing network communcation with the remote device service.</p> <p>Running <code>sshd</code> in Docker is a container anti-pattern, as one can enter a container for remote administration using <code>docker exec</code>. In this use case, however, we are not using <code>sshd</code> for remote administration, but instead to set up a network tunnel.</p> <p>For an example of how to run a SSH server in Docker, checkout https://docs.docker.com/engine/examples/running_ssh_service/ for detailed instructions.</p> <p>The <code>generate-keys.sh</code> helper script generates an RSA keypair, and copies the <code>authorized_keys</code> file into the <code>remote/sshd-remote</code> folder. The sample's <code>Dockerfile</code> will then build this key into the the remote <code>sshd</code> container image and use it for authentication. The private key remains on the local machine and is bind-mounted to the host from the <code>device-ssh-proxy</code> service.</p>"},{"location":"security/Ch-RemoteDeviceServices/#local-port-forwarding","title":"Local Port Forwarding","text":"<p>In this use case, we want to impersonate a device service that is running on a remote machine. We use local port forwarding to receive inbound requests on the device service's port, and ask that the traffic be forwarded through the ssh tunnel to a remote host and a remote port. The -L flag of ssh command is important here.</p> <pre><code>  ssh -N \\\n-o StrictHostKeyChecking=no \\\n-o UserKnownHostsFile=/dev/null \\\n-L *:$SERVICE_PORT:$SERVICE_HOST:$SERVICE_PORT \\\n-p $TUNNEL_SSH_PORT \\\n$TUNNEL_HOST </code></pre> <p>where environment variables are:</p> <ul> <li> <p><code>TUNNEL_HOST</code> is the remote host name or IP address that SSH daemon or server is running on;</p> </li> <li> <p><code>TUNNEL_SSH_PROT</code> is the port number to be used on the SSH tunnel communication between the local machine and the remote machine</p> </li> <li> <p><code>SERVICE_PORT</code> is the port number from the local or the primary to be forwared to the remote machine; without lose of generality, the port number on the remote machine is the same as the local one</p> </li> <li> <p><code>SERVICE_HOST</code> is the service host name or IP address of the Docker containers that are running on the remote machine</p> </li> </ul> <p>In order to make the other containers aware of the port forwarding, the <code>docker-compose.yml</code> is configured to so that the <code>device-ssh-proxy</code> service impersonates <code>edgex-device-virtual</code> on the local docker network.</p> <pre><code>  device-ssh-proxy:\nimage: device-ssh-proxy:latest\nnetworks:\nedgex-network:\naliases:\n- edgex-device-virtual\n</code></pre> <p>The port-forwarding is transparent to the EdgeX services running on the local machine.</p>"},{"location":"security/Ch-RemoteDeviceServices/#remote-port-forwarding","title":"Remote Port Forwarding","text":"<p>This step is to show the reverse direction of SSH tunneling: from the remote back to the local machine.</p> <p>The reverse SSH tunneling is also needed because the device services depends on the core services like <code>core-data</code>, <code>core-metadata</code>, Redis (for message queuing), Vault (for the secret store), and Consul (for registry and configuration). These core services are running on the local machine and should be reverse tunneled back from the remote machine. Essentially, the <code>sshd</code> container will impersonate these services on the remote side. This can be achieved by using <code>-R</code> flag of ssh command. Extending the previous example:</p> <pre><code>  ssh -N \\\n-o StrictHostKeyChecking=no \\\n-o UserKnownHostsFile=/dev/null \\\n-L *:$SERVICE_PORT:$SERVICE_HOST:$SERVICE_PORT \\\n-R 0.0.0.0:$SECRETSTORE_PORT:$SECRETSTORE_HOST:$SECRETSTORE_PORT \\\n-R 0.0.0.0:6379:$MESSAGEQUEUE_HOST:6379 \\\n-R 0.0.0.0:8500:$REGISTRY_HOST:8500 \\\n-R 0.0.0.0:5563:$CLIENTS_CORE_DATA_HOST:5563 \\\n-R 0.0.0.0:59880:$CLIENTS_CORE_DATA_HOST:59880 \\\n-R 0.0.0.0:59881:$CLIENTS_CORE_METADATA_HOST:59881 \\\n-R 0.0.0.0:$SECURITY_SPIRE_SERVER_PORT:$SECURITY_SPIRE_SERVER_HOST:$SECURITY_SPIRE_SERVER_PORT \\\n-R 0.0.0.0:$SECRETSTORE_RUNTIMETOKENPROVIDER_PORT:$SECRETSTORE_RUNTIMETOKENPROVIDER_HOST:$SECRETSTORE_RUNTIMETOKENPROVIDER_PORT \\\n-p $TUNNEL_SSH_PORT \\\n$TUNNEL_HOST </code></pre> <p>As was done on the local side, the remote side does in reverse, masquerading on the network as the core services needed by device services:</p> <pre><code>  sshd-remote:\nimage: edgex-sshd-remote:latest\nnetworks:\nedgex-network:\naliases:\n- edgex-core-consul\n- edgex-core-data\n- edgex-core-metadata\n- edgex-redis\n- edgex-security-spire-server\n- edgex-security-spiffe-token-provider\n- edgex-vault\n</code></pre>"},{"location":"security/Ch-RemoteDeviceServices/#security-edgex-secret-store-token","title":"Security: EdgeX Secret Store Token","text":"<p>Beyond port forwarding, extra steps need to be taken to enable the remote device service to use SPIFFE/SPIRE to obtain a token for the EdgeX secret store.</p>"},{"location":"security/Ch-RemoteDeviceServices/#local-side","title":"Local side","text":"<p>On the local machine side, the <code>device-ssh-proxy</code> service has some initialization code inserted into its entrypoint script. It is done this way to facilitate ease-of-use for the example. In a production deployment this should be done out-of-band.</p> <pre><code># Wait for agent CA creation\n\nwhile test ! -f \"/srv/spiffe/ca/public/agent-ca.crt\"; do\necho \"Waiting for /srv/spiffe/ca/public/agent-ca.crt\"\nsleep 1\ndone\n\n# Pre-create remote agent certificate\n\nif test ! -f \"/srv/spiffe/remote-agent/agent.crt\"; then\nopenssl ecparam -genkey -name secp521r1 -noout -out \"/srv/spiffe/remote-agent/agent.key\"\nSAN=\"\" openssl req -subj \"/CN=remote-agent\" -config \"/usr/local/etc/openssl.conf\" -key \"/srv/spiffe/remote-agent/agent.key\" -sha512 -new -out \"/run/agent.req.$$\"\nSAN=\"\" openssl x509 -sha512 -extfile /usr/local/etc/openssl.conf -extensions agent_ext -CA \"/srv/spiffe/ca/public/agent-ca.crt\" -CAkey \"/srv/spiffe/ca/private/agent-ca.key\" -CAcreateserial -req -in \"/run/agent.req.$$\" -days 3650 -out \"/srv/spiffe/remote-agent/agent.crt\"\nrm -f \"/run/agent.req.$$\"\nfi\n\n\nwhile true; do\nscp -p \\\n-o StrictHostKeyChecking=no \\\n-o UserKnownHostsFile=/dev/null \\\n-P $TUNNEL_SSH_PORT \\\n/srv/spiffe/remote-agent/agent.key $TUNNEL_HOST:/srv/spiffe/remote-agent/agent.key\n  scp -p \\\n-o StrictHostKeyChecking=no \\\n-o UserKnownHostsFile=/dev/null \\\n-P $TUNNEL_SSH_PORT \\\n/srv/spiffe/remote-agent/agent.crt $TUNNEL_HOST:/srv/spiffe/remote-agent/agent.crt\n  scp -p \\\n-o StrictHostKeyChecking=no \\\n-o UserKnownHostsFile=/dev/null \\\n-P $TUNNEL_SSH_PORT \\\n/tmp/edgex/secrets/spiffe/trust/bundle $TUNNEL_HOST:/tmp/edgex/secrets/spiffe/trust/bundle    ssh \\\n-o StrictHostKeyChecking=no \\\n-o UserKnownHostsFile=/dev/null \\\n-p $TUNNEL_SSH_PORT \\\n$TUNNEL_HOST -- \\\nchown -Rh 2002:2001 /tmp/edgex/secrets/spiffe\n\n  ...\n</code></pre> <p>The one-time setup is generating a new agent key from the agent CA certificate.  This will enable the SPIRE server to trust the new agent. There is also automation to copy the certificate and private key to the remote node as part of SSH session establishment. This entire flow could be done as an out-of-band process.</p> <p>The last part, which is to copy the current trust bundle to the remote node as part of SSH session establishment, should be left as-is, as the trust bundle is on a temp file system and might be cleaned between reboots.</p>"},{"location":"security/Ch-RemoteDeviceServices/#remote-side","title":"Remote side","text":"<p>On the remote side, the SPIRE agent looks mostly like the local side SPIRE agent, except that the paths are different, and there is a delay loop waiting for the agent key and certificate to be copied to the node via the above process.</p> <p>The requirements for the remote side are:</p> <ul> <li> <p>The SPIRE server must be able to establish trust in the agent.   There are many mechanisms available to do this.   The example uses a public key infrastructure to establish trust.</p> </li> <li> <p>The SPIRE agent must have network connectivity with the SPIRE server.   This is provided by the SSH reverse proxy tunnel.</p> </li> </ul>"},{"location":"security/Ch-RemoteDeviceServices/#testing","title":"Testing","text":""},{"location":"security/Ch-RemoteDeviceServices/#test-with-the-device-virtual-apis","title":"Test with the device-virtual APIs","text":"<p>The easiest way to test the setup is to make a call from the local machine to the remote <code>device-virtual</code> service:</p> <pre><code>$ curl -s http://127.0.0.1:59900/api/v2/config | jq\n{\n\"apiVersion\": \"v2\",\n  \"config\": {\n\"Writable\": {\n\"LogLevel\": \"INFO\",\n      \"InsecureSecrets\": {\n\"DB\": {\n\"Path\": \"redisdb\",\n          \"Secrets\": {\n\"password\": \"\",\n            \"username\": \"\"\n}\n}\n},\n      \"Reading\": {\n\"ReadingUnits\": true\n}\n},\n    \"Clients\": {\n\"core-data\": {\n\"Host\": \"edgex-core-data\",\n        \"Port\": 59880,\n        \"Protocol\": \"http\"\n},\n      \"core-metadata\": {\n\"Host\": \"edgex-core-metadata\",\n        \"Port\": 59881,\n        \"Protocol\": \"http\"\n}\n},\n    \"Registry\": {\n\"Host\": \"edgex-core-consul\",\n      \"Port\": 8500,\n      \"Type\": \"consul\"\n},\n    \"Service\": {\n\"HealthCheckInterval\": \"10s\",\n      \"Host\": \"edgex-device-virtual\",\n      \"Port\": 59900,\n      \"ServerBindAddr\": \"\",\n      \"StartupMsg\": \"device virtual started\",\n      \"MaxResultCount\": 0,\n      \"MaxRequestSize\": 0,\n      \"RequestTimeout\": \"5s\",\n      \"CORSConfiguration\": {\n\"EnableCORS\": false,\n        \"CORSAllowCredentials\": false,\n        \"CORSAllowedOrigin\": \"https://localhost\",\n        \"CORSAllowedMethods\": \"GET, POST, PUT, PATCH, DELETE\",\n        \"CORSAllowedHeaders\": \"Authorization, Accept, Accept-Language, Content-Language, Content-Type, X-Correlation-ID\",\n        \"CORSExposeHeaders\": \"Cache-Control, Content-Language, Content-Length, Content-Type, Expires, Last-Modified, Pragma, X-Correlation-ID\",\n        \"CORSMaxAge\": 3600\n}\n},\n    \"Device\": {\n\"DataTransform\": true,\n      \"MaxCmdOps\": 128,\n      \"MaxCmdValueLen\": 256,\n      \"ProfilesDir\": \"./res/profiles\",\n      \"DevicesDir\": \"./res/devices\",\n      \"UpdateLastConnected\": false,\n      \"Discovery\": {\n\"Enabled\": false,\n        \"Interval\": \"30s\"\n},\n      \"AsyncBufferSize\": 16,\n      \"EnableAsyncReadings\": true,\n      \"Labels\": [],\n      \"UseMessageBus\": true\n},\n    \"Driver\": {},\n    \"SecretStore\": {\n\"Type\": \"vault\",\n      \"Host\": \"edgex-vault\",\n      \"Port\": 8200,\n      \"Path\": \"device-virtual/\",\n      \"Protocol\": \"http\",\n      \"Namespace\": \"\",\n      \"RootCaCertPath\": \"\",\n      \"ServerName\": \"\",\n      \"Authentication\": {\n\"AuthType\": \"X-Vault-Token\",\n        \"AuthToken\": \"\"\n},\n      \"TokenFile\": \"/tmp/edgex/secrets/device-virtual/secrets-token.json\",\n      \"SecretsFile\": \"\",\n      \"DisableScrubSecretsFile\": false,\n      \"RuntimeTokenProvider\": {\n\"Enabled\": true,\n        \"Protocol\": \"https\",\n        \"Host\": \"edgex-security-spiffe-token-provider\",\n        \"Port\": 59841,\n        \"TrustDomain\": \"edgexfoundry.org\",\n        \"EndpointSocket\": \"/tmp/edgex/secrets/spiffe/public/api.sock\",\n        \"RequiredSecrets\": \"redisdb\"\n}\n},\n    \"MessageQueue\": {\n\"Type\": \"redis\",\n      \"Protocol\": \"redis\",\n      \"Host\": \"edgex-redis\",\n      \"Port\": 6379,\n      \"PublishTopicPrefix\": \"edgex/events/device\",\n      \"SubscribeTopic\": \"\",\n      \"AuthMode\": \"usernamepassword\",\n      \"SecretName\": \"redisdb\",\n      \"Optional\": {\n\"AutoReconnect\": \"true\",\n        \"ClientId\": \"device-virtual\",\n        \"ConnectTimeout\": \"5\",\n        \"KeepAlive\": \"10\",\n        \"Password\": \"(redacted)\",\n        \"Qos\": \"0\",\n        \"Retained\": \"false\",\n        \"SkipCertVerify\": \"false\",\n        \"Username\": \"redis5\"\n},\n      \"SubscribeEnabled\": false\n},\n    \"MaxEventSize\": 0\n},\n  \"serviceName\": \"device-virtual\"\n}\n</code></pre>"},{"location":"security/Ch-SecretStore/","title":"Secret Store","text":""},{"location":"security/Ch-SecretStore/#introduction","title":"Introduction","text":"<p>There are all kinds of secrets used within EdgeX Foundry micro services, such as tokens, passwords, certificates etc. The secret store serves as the central repository to keep these secrets. The developers of other EdgeX Foundry micro services utilize the secret store to create, store and retrieve secrets relevant to their corresponding micro services.</p> <p>Currently the EdgeX Foundry secret store is implemented with Vault, a HashiCorp open source software product.</p> <p>Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, database credentials, service credentials, or certificates. Vault provides a unified interface to any secret, while providing tight access control and multiple authentication mechanisms (token, LDAP, etc.). Additionally, Vault supports pluggable \"secrets engines\". EdgeX uses the Consul secrets engine to allow Vault to issue Consul access tokens to EdgeX microservices.</p> <p>In EdgeX, Vault's storage backend is the host file system.</p>"},{"location":"security/Ch-SecretStore/#start-the-secret-store","title":"Start the Secret Store","text":"<p>The EdgeX secret store is started by default when using  the secure version of the Docker Compose scripts found at https://github.com/edgexfoundry/edgex-compose/tree/ireland.</p> <p>The command to start EdgeX with the secret store enabled is:</p> <pre><code>git clone -b ireland https://github.com/edgexfoundry/edgex-compose\nmake run\n</code></pre> <p>or</p> <pre><code>git clone -b ireland https://github.com/edgexfoundry/edgex-compose\nmake run arm64\n</code></pre> <p>The EdgeX secret store is not started if EdgeX is started with security features disabled by appending <code>no-secty</code> to the previous commands. This disables all EdgeX security features, not just the API gateway.</p> <p>Documentation on how the EdgeX security store is sequenced with respect to all of the other EdgeX services is covered in the Secure Bootstrapping of EdgeX Architecture Decision Record(ADR).</p>"},{"location":"security/Ch-SecretStore/#using-the-secret-store","title":"Using the Secret Store","text":""},{"location":"security/Ch-SecretStore/#preferred-approach","title":"Preferred Approach","text":"<p>The preferred approach for interacting with the EdgeX secret store is to use the <code>SecretClient</code> interface in go-mod-secrets.</p> <p>Each EdgeX microservice has access to a <code>StoreSecrets()</code> method that allows setting of per-microservice secrets, and a <code>GetSecrets()</code> method to read them back.</p> <p>If manual \"super-user\" to the EdgeX secret store is required, it is necesary to obtain a privileged access token, called the Vault root token.</p>"},{"location":"security/Ch-SecretStore/#obtaining-the-vault-root-token","title":"Obtaining the Vault Root Token","text":"<p>For security reasons (the  Vault production hardening guide recommends revokation of the root token), the Vault root token is revoked by default. EdgeX automatically manages the secrets required by the framework, and provides a programmatic interface for individual microservices to interact with their partition of the secret store.</p> <p>If global access to the secret store is required, it is necessary to obtain a copy of the Vault root token using the below recommended procedure. Note that following this procedure directly contradicts the Vault production hardening guide. Since the root token cannot be un-revoked, the framework must be started for the first time with root token revokation disabled.</p> <ol> <li> <p>Shut down the entire framework and remove the Docker persistent volumes    using <code>make clean</code> in <code>edgex-compose</code> or <code>docker volume prune</code> after stopping all the containers.    Optionally remove <code>/tmp/edgex</code> as well to clean the shared secrets volume.</p> </li> <li> <p>Edit <code>docker-compose.yml</code> and add an environment variable override for <code>SECRETSTORE_REVOKEROOTTOKENS</code></p> </li> </ol> <pre><code>  secretstore-setup:\nenvironment:\nSECRETSTORE_REVOKEROOTTOKENS: \"false\"\n</code></pre> <ol> <li> <p>Start EdgeX using <code>make run</code> or some other mechanism.</p> </li> <li> <p>Reveal the contents of the <code>resp-init.json</code> file stored in a Docker volume.</p> </li> </ol> <pre><code>  docker run --rm -ti -v edgex_vault-config:/vault/config:ro alpine:latest cat /vault/config/assets/resp-init.json\n</code></pre> <ol> <li>Extract the <code>root_token</code> field value from the resulting JSON output.</li> </ol> <p>As an alternative to overriding <code>SECRETSTORE_REVOKEROOTTOKENS</code> from the beginning, it is possible to regenerate the root token from the Vault unseal keys in <code>resp-init.json</code>  using the Vault's documented procedure. The EdgeX framework executes this process internally whenever it requires root token capability. Note that a token created in this manner will again be revoked the next time EdgeX is restarted if <code>SECRETSTORE_REVOKEROOTTOKENS</code> remains set to its default value: all root tokens are revoked every time the framework is started if <code>SECRETSTORE_REVOKEROOTTOKENS</code> is <code>true</code>.</p>"},{"location":"security/Ch-SecretStore/#using-the-vault-cli","title":"Using the Vault CLI","text":"<p>Execute a shell session in the running Vault container:</p> <pre><code>  docker exec -it edgex-vault sh -l\n</code></pre> <p>Login to Vault using Vault CLI and the gathered Root Token:</p> <pre><code>edgex-vault:/# vault login s.ULr5bcjwy8S0I5g3h4xZ5uWa\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                s.ULr5bcjwy8S0I5g3h4xZ5uWa\ntoken_accessor       Kv5FUhT2XgN2lLu8XbVxJI0o\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre> <p>Perform an introspection <code>lookup</code> on the current token login. This proves the token works and is valid.</p> <pre><code>edgex-vault:/# vault token lookup\nKey                 Value\n---                 -----\naccessor            Kv5FUhT2XgN2lLu8XbVxJI0o\ncreation_time       1623371879\ncreation_ttl        0s\ndisplay_name        root\nentity_id           n/a\nexpire_time         &lt;nil&gt;\nexplicit_max_ttl    0s\nid                  s.ULr5bcjwy8S0I5g3h4xZ5uWa\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              true\npath                auth/token/root\npolicies            [root]\nttl                 0s\ntype                service\n</code></pre> <p>!!! Note: The Root Token is the only token that has no expiration     enforcement rules (Time to Live TTL counter).</p> <p>As an example, let's poke around and spy on the Redis database password:</p> <pre><code>edgex-vault:/# vault list secret \n\nKeys\n----\nedgex/\n\nedgex-vault:/# vault list secret/edgex\nKeys\n----\napp-rules-engine/\ncore-command/\ncore-data/\ncore-metadata/\ndevice-rest/\ndevice-virtual/\nsecurity-bootstrapper-redis/\nsupport-notifications/\nsupport-scheduler/\n\nedgex-vault:/# vault list secret/edgex/core-data\nKeys\n----\nredisdb\n\nedgex-vault:/# vault read secret/edgex/core-data/redisdb\nKey                 Value\n---                 -----\nrefresh_interval    168h\npassword            9/crBba5mZqAfAH8d90m7RlZfd7N8yF2IVul89+GEaG3\nusername            redis5\n</code></pre> <p>With the root token, it is possible to modify any Vault setting. See the Vault manual for available commands.</p>"},{"location":"security/Ch-SecretStore/#use-the-vault-rest-api","title":"Use the Vault REST API","text":"<p>Vault also supports a REST API with functionality equivalent to the command line interface:</p> <p>The equivalent of the</p> <pre><code>vault read secret/edgex/core-data/redisdb\n</code></pre> <p>command looks like the following using the REST API:</p> <p>Displaying (GET) the redis credentials from Core Data's secret store:</p> <pre><code>curl -s -H 'X-Vault-Token: s.ULr5bcjwy8S0I5g3h4xZ5uWa' http://localhost:8200/v1/secret/edgex/core-data/redisdb | python -m json.tool\n{\n    \"request_id\": \"9d28ffe0-6b25-c0a8-e395-9fbc633f20cc\",\n    \"lease_id\": \"\",\n    \"renewable\": false,\n    \"lease_duration\": 604800,\n    \"data\": {\n        \"password\": \"9/crBba5mZqAfAH8d90m7RlZfd7N8yF2IVul89+GEaG3\",\n        \"username\": \"redis5\"\n    },\n    \"wrap_info\": null,\n    \"warnings\": null,\n    \"auth\": null\n}\n</code></pre> <p>See HashiCorp Vault API documentation for further details on syntax and usage (https://www.vaultproject.io/api/).</p>"},{"location":"security/Ch-SecretStore/#using-the-vault-web-ui","title":"Using the Vault Web UI","text":"<p>The Vault Web UI is not exposed via the API gateway. It must therefore be accessed via <code>localhost</code> or a network tunnel of some kind.</p> <p>Open a browser session on <code>http://localhost:8200</code> and sign-in with the Root Token.</p> <p>{.align-center width=\"606px\" height=\"504px\"}</p> <p>Upper left corner of the current Vault UI session, the sign-out menu displaying the current token name:</p> <p>{.align-center width=\"275px\" height=\"156px\"}</p> <p>Select the Vault secret backend:</p> <p></p> <p>Navigate the API Gateway (Kong) service X.509 TLS materials path (edgex/pki/tls/edgex-kong):</p> <p></p> <p>The Vault UI also allows entering Vault CLI commands (see above 1st alternative) using an embedded console:</p> <p></p>"},{"location":"security/Ch-SecretStore/#see-also","title":"See also","text":"<p>Some of the command used in implementing security services have man-style documentation:</p> <ul> <li>security-file-token-provider -     Generate Vault tokens for EdgeX services</li> <li>secrets-config - Utility for secrets management.</li> <li>secrets-config-proxy - \"proxy\" subcommand for managing proxy secrets.</li> </ul>"},{"location":"security/Ch-Secure-Consul/","title":"Secure Consul","text":"<p>EdgeX 2.0</p> <p>Secure Consul is new in EdgeX 2.0</p>"},{"location":"security/Ch-Secure-Consul/#introduction","title":"Introduction","text":"<p>In the current EdgeX architecture, <code>Consul</code> is pre-wired as the default agent service for <code>Service Configuration</code>, <code>Service Registry</code>, and <code>Service Health Check</code> purposes. Prior to EdgeX's Ireland release, the communication to <code>Consul</code> uses plain HTTP calls without any access control (ACL) token header and thus are insecure.  With the Ireland release, that situation is now improved by adding required ACL token header <code>X-Consul-Token</code> in any HTTP calls. Moreover, <code>Consul</code> itself is now bootstrapped and started with its ACL system enabled and thus provides better authentication and authorization security features for services.  In other words, with the required Consul's ACL token for accessing Consul, assets inside Consul like EdgeX's configuration items in Key-Value (KV) store are now better protected.</p> <p>In this documentation, we will highlight some major features incorporated into EdgeX framework system for <code>Securing Consul</code>, including how the <code>Consul</code> token is generated via the integration of secret store management system <code>Vault</code> with <code>Consul</code> via Vault's Consul Secrets Engine APIs. Also a brief overview on how Consul token is governed by Vault using Consul's ACL policy associated with a Vault role for that token is given.  Finally, EdgeX provides an easy way for getting Consul token from <code>edgex-compose</code>'s <code>compose-builder</code> utility for better developer experiences.</p>"},{"location":"security/Ch-Secure-Consul/#consul-access-token-with-vault-integration","title":"Consul access token with Vault integration","text":"<p>In order to reduce another token generation system to maintain, we utilize the Vault's feature of <code>Consul Secrets Engine</code> APIs, governed by Vault itself, and integrated with Consul. Consul service itself provides ACL system and is enabled via Consul's configuration settings like:</p> <pre><code>acl = {\nenabled = true\ndefault_policy = \"deny\"\nenable_token_persistence = true\n}\n</code></pre> <p>and this is set as part of EdgeX <code>security-bootstrapper</code> service's process. Note that the default ACL policy is set to \"deny\" so that anything is not listed in the ACL list will get access denied by nature. The flag <code>enable_token_persistence</code> is related to the persistence of Consul's agent token and is set to true so as to re-use the same agent token when EdgeX system restarts again.</p> <p>During the process of Consul bootstrapping, the first main step of <code>security-bootstrapper</code> for Consul is to bootstrap Consul's ACL system with Consul's API endpoint <code>/acl/bootstrap</code>.</p> <p>Once Consul's ACL is successfully bootstrapped, <code>security-bootstrapper</code> stores the Consul's ACL bootstrap token onto the pre-configured folder under <code>/tmp/edgex/secrets/consul-acl-token</code>.</p> <p>As part of <code>security-bootstrapper</code> process for Consul, Consul service's agent token is also set via Consul's sub-command: <code>consul acl set-agent-token agent</code> or Consul's HTTP API endpoint <code>/agent/token/&lt;agent_token&gt;</code> using Consul's ACL bootstrap token for the authentication. This agent token provides the identity for Consul service itself and access control for any agent-based API calls from client and thus provides better security.</p> <p><code>security-bootstrapper</code> service also uses Consul's bootstrap token to generate Vault's role based from Consul Secrets Engine API <code>/consul/role/&lt;role_name&gt;</code> for all internal default EdgeX services and add-on services via environment variable <code>ADD_REGISTRY_ACL_ROLES</code>. Please see more details and some examples in Configuring Add-on Service documentation section for how to configure add-on services' ACL roles.</p> <p><code>security-bootstrapper</code> then automatically associated with Consul's ACL policy rules with this provided ACL role so that Consul token will be created or generated with that ACL rules and hence enforced access controls by Consul when the service is communicating with it.</p> <p>Note that Consul token is generated via Vault's <code>/consul/creds/&lt;role_name&gt;</code> API with Vault's secretstore token and hence the generated Consul token is inherited the time-restriction nature from Vault system itself. Thus Consul token will be revoked by Vault if Vault's token used to generate it expires or is revoked. Currently in EdgeX we utilize the auto-renewal feature of Vault's token implemented in <code>go-mod-secrets</code> to keep Consul token alive and not expire.</p>"},{"location":"security/Ch-Secure-Consul/#how-to-get-consul-acl-token","title":"How to get Consul ACL token","text":"<p>Consul's access token can be obtained from the <code>compose-builder</code> of <code>edgex-compose</code> repository via command <code>make get-consul-acl-token</code>.  One example of this will be like:</p> <pre><code>$ make get-consul-acl-token ef4a0580-d200-32bf-17ba-ba78e3a546e7\n</code></pre> <p>This output token is Consul's ACL bootstrap token and thus one can use it to login and access Consul service's features from Consul's GUI on http://localhost:8500/ui.</p> <p>From the upper right-hand corner of Consul's GUI or the \"Log in\" button in the center, one can login with the obtained Consul token in order to access Consul's GUI features:</p> <p></p> <p></p> <p>If the end user wants to access consul from the command line and since by default now Consul is running in ACL enabled mode, any API call to Consul's endpoints will requires the access token and thus one needs to give the access token into the header <code>X-Consul-Token</code> of HTTP calls.</p> <p>One example using <code>curl</code> command with Consul access token to do local Consul KV store is given as follows:</p> <pre><code>curl -v -H \"X-Consul-Token:8775c1db-9340-d07b-ac95-bc6a1fa5fe57\" -X PUT --data 'TestKey=\"My key values\"' \\\n    http://localhost:8500/v1/kv/my-test-key\n</code></pre> <p>where the Consul access token is passed into the header <code>X-Consul-Token</code> and assuming it has write permission for accessing and updating data in Consul's KV store.</p>"},{"location":"security/Ch-Secure-MessageBus/","title":"Secure MessageBus","text":"<p>EdgeX 2.0</p> <p>Starting with the Ireland release (2.0.0) the default <code>MessageBus</code> implementation used is <code>Redis Pub/Sub</code>, which replaced the <code>Redis Streams</code> implementation. <code>Redis Pub/Sub</code> utilizes the existing <code>Redis</code> database service so that no additional broker service is required. When running in secure mode the <code>Redis</code> database service is secured with a username/password. This in turn creates a <code>Secure MessageBus</code>.</p> <p>All the default services (Core Data, App Service Rules, Device Virtual, eKuiper, etc.) that utilize the <code>MessageBus</code> are configured out of the box to connect securely.</p> <p>Additional add-on services that require <code>Secure MessageBus</code> access (App and/or Device services) need to follow the steps outline in the Configuring Add-On Services for Security section.</p> <p>Note</p> <p><code>Secure MQTT MessageBus</code> capability does not exist . This will be a future enhancement.</p>"},{"location":"security/Ch-Security/","title":"Security","text":"<p>Security elements, both inside and outside of EdgeX Foundry, protect the data and control of devices, sensors, and other IoT objects managed by EdgeX Foundry. Based on the fact that EdgeX is a \"vendor-neutral open source software platform at the edge of the network\", the EdgeX security features are also built on a foundation of open interfaces and pluggable, replaceable modules. With security service enabled, the administrator of the EdgeX would be able to initialize the security components, set up running environment for security services, manage user access control, and create JWT( JSON Web Token) for resource access for other EdgeX business services. There are two major EdgeX security components. The first is a security store, which is used to provide a safe place to keep the EdgeX secrets. The second is an API gateway, which is used as a reverse proxy to restrict access to EdgeX REST resources and perform access control related works. In summary, the current features are as below:</p> <ul> <li>Secret creation, store and retrieve (password, cert, access key     etc.)</li> <li>API gateway for other existing EdgeX microservice REST APIs</li> <li>User account creation with optional either OAuth2 or JWT     authentication</li> <li>User account with arbitrary Access Control List groups (ACL)</li> </ul>"},{"location":"security/Ch-SecurityIssues/","title":"Reporting Security Issues","text":"<p>This page describes how to report EdgeX Foundry security issues and how they are handled.</p>"},{"location":"security/Ch-SecurityIssues/#security-announcements","title":"Security Announcements","text":"<p>Join the edgexfoundry-announce group at: https://groups.google.com/d/forum/edgexfoundry-announce) for emails about security and major API announcements.</p>"},{"location":"security/Ch-SecurityIssues/#vulnerability-reporting","title":"Vulnerability Reporting","text":"<p>The EdgeX Foundry Open Source Community is grateful for all security reports made by users and security researchers. All reports are thoroughly investigated by a set of community volunteers.</p> <p>To make a report, please email the private list: security-issues@edgexfoundry.org, providing as much detail as possible. Use the security issue template: security_issue_template.</p> <p>At this time we do not yet offer an encrypted bug reporting option.</p>"},{"location":"security/Ch-SecurityIssues/#when-to-report-a-vulnerability","title":"When to Report a Vulnerability?","text":"<ul> <li>You think you discovered a potential security vulnerability in EdgeX     Foundry</li> <li>You are unsure how a vulnerability affects EdgeX Foundry</li> <li>You think you discovered a vulnerability in another project that     EdgeX Foundry depends upon (e.g. docker, MongoDB, Redis,..)</li> </ul>"},{"location":"security/Ch-SecurityIssues/#when-not-to-report-a-vulnerability","title":"When NOT to Report a Vulnerability?","text":"<ul> <li>You need help tuning EdgeX Foundry components for security</li> <li>You need help applying security related updates</li> <li>Your issue is not security related</li> </ul>"},{"location":"security/Ch-SecurityIssues/#security-vulnerability-response","title":"Security Vulnerability Response","text":"<p>Each report is acknowledged and analyzed by Security Issue Review (SIR) team within one week.</p> <p>Any vulnerability information shared with SIR stays private, and is shared with sub-projects as necessary to get the issue fixed.</p> <p>As the security issue moves from triage, to identified fix, to release planning we will keep the reporter updated.</p> <p>In the case of 3 rd party dependency (code or library not managed and maintained by the EdgeX community) related security issues, while the issue report triggers the same response workflow, the EdgeX community will defer to owning community for fixes.</p> <p>On receipt of a security issue report, SIR:</p> <ol> <li>Discusses the issue privately to understand it</li> <li>Uses the Common Vulnerability Scoring     System to grade the issue</li> <li>Determines the sub-projects and developers to involve</li> <li>Develops a fix</li> <li>In conjunction with the product group determines when to release the     fix</li> <li>Communicates the fix</li> </ol> <p>7. Uploads a Common Vulnerabilities and Exposures (CVE) style report of the issue and associated threat</p> <p>The issue reporter will be kept in the loop as appropriate. Note that a critical or high severity issue can delay a scheduled release to incorporate a fix or mitigation.</p>"},{"location":"security/Ch-SecurityIssues/#public-disclosure-timing","title":"Public Disclosure Timing","text":"<p>A public disclosure date is negotiated by the EdgeX Product Security Committee and the bug submitter. We prefer to fully disclose the bug as soon as possible AFTER a mitigation is available. It is reasonable to delay disclosure when the bug or the fix is not yet fully understood, the solution is not well-tested, or for vendor coordination. The timeframe for disclosure may be immediate (especially publicly known issues) to a few weeks. The EdgeX Foundry Product Security Committee holds the final say when setting a disclosure date.</p>"},{"location":"security/SeedingServiceSecrets/","title":"Seeding Service Secrets","text":"<p>EdgeX 2.1</p> <p>New for EdgeX 2.1 is the ability to seed service specific secrets during the service's start-up. </p> <p>All EdgeX services now have the capability to specify a JSON file that contains the service's secrets which are seeded into the service's <code>SecretStore</code> during service start-up. This allows the secrets to be present in the service's <code>SecretStore</code> when the service needs to use them.</p> <p>Note</p> <p>The service must already have a <code>SecretStore</code> configured. This is done by default for the Core/Support services. See Configure the service's Secret Store section for details for add-on App and Device services </p>"},{"location":"security/SeedingServiceSecrets/#secrets-file","title":"Secrets File","text":"<p>The new <code>SecretsFile</code> setting on the <code>SecretStore</code> configuration allows the service to specify the fully-qualified path to the location of the service's secrets file. Normally this setting is left blank when a service has no secrets to be seeded.</p> <p>Example - Setting SecretsFile in TOML</p> <pre><code>[SecretStore]\nType = \"vault\"\n...\nSecretsFile = \"/tmp/my-service/secrets.json\"\nDisableScrubSecretsFile = false\n...\n</code></pre> <p>This setting can also be overridden with the <code>SECRETSTORE_SECRETSFILE</code> environment variable. When EdgeX is deployed using Docker/docker-compose the setting can be overridden in the docker-compose file and the file can be volume mounted into the service's container.</p> <p>Example - Setting SecretsFile via environment override</p> <pre><code>environment:\nSECRETSTORE_SECRETSFILE: \"/tmp/my-service/secrets.json\"\n...\nvolumes:\n- /tmp/my-service/secrets.json:/tmp/my-service/secrets.json\n</code></pre> <p>During service start-up, after <code>SecretStore</code> initialization, the service's secrets JSON file is read, validated, and the secrets stored into the service's <code>SecretStore</code>. The file is then scrubbed of the secret data, i.e rewritten without the sensitive secret data that was successfully stored. See Disable Scrubbing section below for detail on disabling the scrubbing of the secret data</p> <p>Example - Initial service secrets JSON</p> <pre><code>{\n\"secrets\": [\n{\n\"path\": \"credentials001\",\n\"imported\": false,\n\"secretData\": [\n{\n\"key\": \"username\",\n\"value\": \"my-user-1\"\n},\n{\n\"key\": \"password\",\n\"value\": \"password-001\"\n}\n]\n},\n{\n\"path\": \"credentials002\",\n\"imported\": false,\n\"secretData\": [\n{\n\"key\": \"username\",\n\"value\": \"my-user-2\"\n},\n{\n\"key\": \"password\",\n\"value\": \"password-002\"\n}\n]\n}\n]\n}\n</code></pre> <p>Example - Re-written service secrets JSON after seeding complete</p> <pre><code>{\n\"secrets\": [\n{\n\"path\": \"credentials001\",\n\"imported\": true,\n\"secretData\": []\n},\n{\n\"path\": \"credentials002\",\n\"imported\": true,\n\"secretData\": []\n}\n]\n}\n</code></pre> <p>The secrets marked with <code>imported=true</code> are ignored the next time the service starts up since they are already in the the service's <code>SecretStore</code>.  If the Secret Store service's persistence is cleared, the original version of service's secrets file will need to be provided for the next time the service starts up.</p> <p>Note</p> <p>The secrets file must be have write permissions for the file to be scrubbed of the secret data. If not the service with fail to start-up with an error re-writing the file.</p>"},{"location":"security/SeedingServiceSecrets/#disable-scrubbing","title":"Disable Scrubbing","text":"<p>Scrubbing of the secret data can be disabled by setting <code>SecretStore.DisableScrubSecretsFile</code> to <code>true</code>. This can be done in the configuration.toml file or by using the <code>SECRETSTORE_DISABLESCRUBSECRETSFILE</code> environment variable override. </p> <p>Example - Set DisableScrubSecretsFile in TOML</p> <pre><code>[SecretStore]\nType = \"vault\"\n...\nSecretsFile = \"/tmp/my-service/secrets.json\"\nDisableScrubSecretsFile = true\n...\n</code></pre> <p>Example - Set DisableScrubSecretsFile via environment variable</p> <pre><code>environment:\nSECRETSTORE_DISABLESCRUBSECRETSFILE: \"true\"\n</code></pre>"},{"location":"security/secrets-config-proxy/","title":"Secrets config proxy","text":"<p>% secrets-config-proxy(1) User Manuals secrets-config-proxy(1)</p>"},{"location":"security/secrets-config-proxy/#name","title":"NAME","text":"<p>secrets-config-proxy \u2013 Configure EdgeX API gateway service</p>"},{"location":"security/secrets-config-proxy/#synopsis","title":"SYNOPSIS","text":"<p>secrets-config proxy SUBCOMMAND [OPTIONS]</p>"},{"location":"security/secrets-config-proxy/#description","title":"DESCRIPTION","text":"<p>Configures the EdgeX API gateway service.</p> <p>This command is used to configure the TLS certificate for external connections, create authentication tokens for inbound proxy access, and other related utility functions.</p> <p>Proxy configuration commands (listed below) require access to the secret store master key in order to generate temporary secret store access credentials.</p>"},{"location":"security/secrets-config-proxy/#options","title":"OPTIONS","text":"<ul> <li> <p>--confdir /path/to/directory/with/configuration.toml (optional)</p> <p>Points to directory containing a configuration.toml file.</p> </li> </ul>"},{"location":"security/secrets-config-proxy/#subcommands","title":"SUBCOMMANDS","text":"<ul> <li> <p>tls</p> <p>Configure inbound TLS certificate. This command will provision the TLS secrets into the secret store and re-deploy them to Kong. Requires additional arguments:</p> <ul> <li>--incert /path/to/certchain (required)</li> </ul> <p>Path to TLS leaf certificate (PEM-encoded x.509) (the file extension is arbitrary).   If intermediate certificates are required to chain to a certificate authority,   these should also be included.   The root certificate authority should not be included.</p> <ul> <li>--inkey /path/to/private_key (required)</li> </ul> <p>Path to TLS private key (PEM-encoded).</p> <ul> <li>--snis comma_separated_list_for_server_names (optional)</li> </ul> <p>A comma separated extra server DNS names in addition to the built-in   server name indications.  The built-in names are \"localhost,kong\".   These names will be associated with the user-provided certificate for Kong's TLS to use.   Based on the specification RFC4366:   \"Currently, the only server names supported are DNS hostnames\",   so the IP address-based input is not allowed.</p> </li> <li> <p>adduser</p> <p>Create an API gateway user using specified token type. Requires additional arguments:</p> <ul> <li>--token-type jwt (required)</li> </ul> <p>Create user using either the JWT authentication plugin.   This value must match the configured authentication plugin   (<code>KongAuth.Name</code> in security-proxy-setup's <code>configuration.toml</code>).</p> <ul> <li>--user username (required)</li> </ul> <p>Username of the user to add.</p> <ul> <li>--group group (optional)</li> </ul> <p>Group to which the user belongs, defaults to \"admin\".   This should be the group associated with the route ACL   (<code>KongAuth.WhiteList</code> in security-proxy-setup's <code>configuration.toml</code>).   (Note that secrets-config shares the same configuration as security-proxy-setup   as they both configure the EdgeX API gateway.)</p> <p>The following options are used when token-type == \"jwt\":</p> <ul> <li>--algorithm RS256 | ES256 (required for JWT method)</li> </ul> <p>Algorithm used for signing the JWT.   (See RFC 7518 for a list of signing algorithms.)</p> <ul> <li>--public_key /path/to/public_key (required for JWT tokens)</li> </ul> <p>Public key (in PEM format) used to validate the JWT.   (Not an x.509 certificate.)   This key is assumed to have been pre-created using some external mechanism such as a TPM, HSM, openssl, or other method.</p> <ul> <li>--id key (optional)</li> </ul> <p>Optional user-specified \"key\" used for linkage with an incoming JWT via Kong's config.key_claim_name setting (defaults to \"iss\" field).   See   Kong documentation for JWT plugin   for an example of how this parameter is used.</p> <p>Upon completion, for token-type == \"jwt\", the command outputs the autogenerated key for the id command above. This value must be used during later construction of the JWT.</p> </li> <li> <p>deluser</p> <p>Delete a API gateway user. Requires additional arguments:</p> <ul> <li>--user username (required)</li> </ul> <p>Username of the user to delete.</p> </li> <li> <p>jwt</p> <p>Utility function to create a JWT proxy authentication token from a supplied secret. This command does not require secret store access, but the values supplied must match those presented to the adduser command earlier. Requires additional arguments:</p> <ul> <li>--algorithm <code>RS256</code> | <code>ES256</code> (required)</li> </ul> <p>Algorithm used for signing the JWT.   (See RFC 7518 for a list of signing algorithms.)</p> <ul> <li>--id key (required)</li> </ul> <p>The \"key\" field from the \"adduser\" command.   (This will be either the --id argument passed in, or the automatically generated identifier.)   (This is not actually a cryptographic key, but a unique identifier such as would be used in a database.)</p> <ul> <li>--private_key /path/to/private.key (required)</li> </ul> <p>Private key used to sign the JWT (PEM-encoded) with a key type corresponding to the above-supplied algorithm.</p> <ul> <li>--exp duration (optional)</li> </ul> <p>Duration of generated JWT expressed as a golang-parseable duration value. Use \"never\" to omit an expiration field in the JWT. Defaults to \"1h\" (one hour) if unspecified.</p> <p>The generated JWT will be the encoded representation of:</p> <p><pre>\n  {\n    \"typ\": \"JWT\",\n    \"alg\": \"RS256 | ES256\"\n  }\n  {\n    \"iss\": \"key\",\n    \"exp\": (calculated expiration time)\n  }\n  (signature)\n  </pre></p> </li> </ul>"},{"location":"security/secrets-config-proxy/#configuration","title":"CONFIGURATION","text":""},{"location":"security/secrets-config-proxy/#environment","title":"ENVIRONMENT","text":"<ul> <li> <p>IKM_HOOK</p> <p>Enables decryption of an encrypted secret store master key by pointing at an executable that returns an encryption seed that is formatted as a hex-encoded (typically 32-byte) string to its stdout. This optional feature, if enabled, requires pointing at the same executable that was used by security-secretstore-setup to provision and unlock the EdgeX the secret store.</p> </li> </ul>"},{"location":"security/secrets-config-proxy/#see-also","title":"SEE ALSO","text":"<p>secrets-config(1)</p> <p>EdgeX Foundry Last change: 2020</p>"},{"location":"security/secrets-config/","title":"Secrets config","text":"<p>% edgex-secrets-config(1) User Manuals edgex-secrets-config(1)</p>"},{"location":"security/secrets-config/#name","title":"NAME","text":"<p>edgex-secrets-config \u2013 Perform post-installation EdgeX secrets configuration</p>"},{"location":"security/secrets-config/#synopsis","title":"SYNOPSIS","text":"<p>edgex-secrets-config [OPTIONS] COMMAND [ARG...]</p>"},{"location":"security/secrets-config/#description","title":"DESCRIPTION","text":"<p>edgex-secrets-config performs post-installation EdgeX secrets configuration. edgex-secrets-config takes a command that specifies which module is being configured, and module-specific arguments thereafter.</p>"},{"location":"security/secrets-config/#commands","title":"COMMANDS","text":"<ul> <li> <p>help</p> <p>Return a list of available commands. Use <code>edgex-secrets-config help (command)</code> for an overview of available subcommands.</p> </li> <li> <p>proxy</p> <p>Configure secrets related to the EdgeX reverse proxy.  Use <code>edgex-secrets-config help proxy</code> for an overview of available subcommands.</p> </li> </ul>"},{"location":"security/secrets-config/#see-also","title":"SEE ALSO","text":"<p>edgex-secrets-config-proxy(1)</p> <p>EdgeX Foundry Last change: 2021</p>"},{"location":"security/security-file-token-provider.1/","title":"NAME","text":"<p>security-file-token-provider -- Generate Vault tokens for EdgeX services</p>"},{"location":"security/security-file-token-provider.1/#synopsis","title":"SYNOPSIS","text":"<p>security-file-token-provider [-h--confdir \\&lt;confdir&gt;] [-p|--profile \\&lt;name&gt;]</p>"},{"location":"security/security-file-token-provider.1/#description","title":"DESCRIPTION","text":"<p>security-file-token-provider generates per-service Vault tokens for EdgeX services so that they can make authenticated connections to Vault to retrieve application secrets. security-file-token-provider implements a generic secret seeding mechanism based on pre-created files and is designed for maximum portability. security-file-token-provider takes a configuration file that specifies the services for which tokens shall be generated and the Vault access policy that shall be applied to those tokens. security-file-token-provider assumes that there is some underlying protection mechanism that will be used to prevent EdgeX services from reading each other's tokens.</p>"},{"location":"security/security-file-token-provider.1/#options","title":"OPTIONS","text":"<p>-h, --help</p> <p>:   Display help text</p> <p>-c, --confdir \\&lt;confdir&gt;</p> <p>:   Look in this directory for configuration.toml instead.</p> <p>-p, --profile \\&lt;name&gt;</p> <p>:   Indicate configuration profile other than default </p>"},{"location":"security/security-file-token-provider.1/#files","title":"FILES","text":""},{"location":"security/security-file-token-provider.1/#configurationtoml","title":"configuration.toml","text":"<p>This file specifies the TCP/IP location of the Vault service and parameters used for Vault token generation.</p> <pre><code>[SecretService]\nScheme = \"https\"\nServer = \"localhost\"\nPort = 8200\n\n[TokenFileProvider]\nPrivilegedTokenPath = \"/run/edgex/secrets/security-file-token-provider/secrets-token.json\"\nConfigFile = \"token-config.json\"\nOutputDir = \"/run/edgex/secrets/\"\nOutputFilename = \"secrets-token.json\"\n</code></pre>"},{"location":"security/security-file-token-provider.1/#secrets-tokenjson","title":"secrets-token.json","text":"<p>This file contains a token used to authenticate to Vault. The filename is customizable via OutputFilename.</p> <pre><code>{\n  \"auth\": {\n    \"client_token\": \"s.wOrq9dO9kzOcuvB06CMviJhZ\"\n  }\n}\n</code></pre>"},{"location":"security/security-file-token-provider.1/#token-configjson","title":"token-config.json","text":"<p>This configuration file tells security-file-token-provider which tokens to generate.</p> <p>In order to avoid a directory full of <code>.hcl</code> files, this configuration file uses the JSON serialization of HCL, documented at https://github.com/hashicorp/hcl/blob/master/README.md.</p> <p>Note that all paths are keys under the \"path\" object.</p> <pre><code>{\n  \"service-name\": {\n    \"edgex_use_defaults\": true,\n    \"custom_policy\": {\n      \"path\": {\n        \"secret/non/standard/location/*\": {\n          \"capabilities\": [ \"list\", \"read\" ]\n        }\n      }\n    },\n    \"custom_token_parameters\": { }\n  }\n}\n</code></pre> <p>When edgex-use-default is true (the default), the following is added to the policy specification for the auto-generated policy. The auto-generated policy is named <code>edgex-secrets-XYZ</code> where <code>XYZ</code> is <code>service-name</code> from the JSON key above. Thus, the final policy created for the token will be the union of the policy below (if using the default policy) plus the <code>custom_policy</code> defined above.</p> <pre><code>{\n  \"path\": {\n    \"secret/edgex/service-name/*\": {\n      \"capabilities\": [ \"create\", \"update\", \"delete\", \"list\", \"read\" ]\n    }\n  }\n}\n</code></pre> <p>When edgex-use-default is true (the default), the following is inserted (if not overridden) to the token parameters for the generated token. (See https://www.vaultproject.io/api/auth/token/index.html#create-token.)</p> <pre><code>\"display_name\": token-service-name\n\"no_parent\":    true\n\"policies\":     [ \"edgex-service-service-name\" ]\n</code></pre> <p>Note that <code>display_name</code> is set by vault to be \"token-\" + the specified display name. This is hard-coded in Vault from versions 0.6 to 1.2.3 and cannot be changed.</p> <p>Additionally, a meta property, <code>edgex-service-name</code> is set to <code>service-name</code>. The edgex-service-name property may be used by clients to infer the location in the secret store where service-specific secrets are held.</p> <pre><code>\"meta\": {\n  \"edgex-service-name\": service-name\n}\n</code></pre>"},{"location":"security/security-file-token-provider.1/#outputdirservice-nameoutputfilename","title":"{OutputDir}/{service-name}/{OutputFilename}","text":"<p>For example: <code>/run/edgex/secrets/edgex-security-proxy-setup/secrets-token.json</code></p> <p>For each \"service-name\" in <code>{ConfigFile}</code>, a matching directory is created under <code>{OutputDir}</code> and the corresponding Vault token is stored as <code>{OutputFilename}</code>. This file contains the authorization token generated to allow the indicated EdgeX service to retrieve its secrets.</p>"},{"location":"security/security-file-token-provider.1/#prerequisites","title":"PREREQUISITES","text":"<p><code>PrivilegedTokenPath</code> points to a non-expired Vault token that the security-file-token-provider will use to install policies and create per-service tokens. It will create policies with the naming convention <code>\"edgex-service-service-name\"</code> where <code>service-name</code> comes from JSON keys in the configuration file and the Vault policy will be configured to allow creation and modification of policies using this naming convention. This token must have the following policy (<code>edgex-privileged-token-creator</code>) configured.</p> <pre><code>path \"auth/token/create\" {\n  capabilities = [\"create\", \"update\", \"sudo\"]\n}\n\npath \"auth/token/create-orphan\" {\n  capabilities = [\"create\", \"update\", \"sudo\"]\n}\n\npath \"auth/token/create/*\" {\n  capabilities = [\"create\", \"update\", \"sudo\"]\n}\n\npath \"sys/policies/acl/edgex-service-*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\" ]\n}\n\npath \"sys/policies/acl\"\n{\n  capabilities = [\"list\"]\n}\n</code></pre>"},{"location":"security/security-file-token-provider.1/#author","title":"AUTHOR","text":"<p>EdgeX Foundry \\&lt;info@edgexfoundry.org&gt;</p>"},{"location":"threat-models/secret-store/","title":"EdgeX Foundry Secret Management Threat Model","text":""},{"location":"threat-models/secret-store/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Background</li> <li>High Level Design</li> <li>Threat Model</li> <li>Vault Master Key Encryption</li> </ol>"},{"location":"threat-models/secret-store/background/","title":"Background","text":"<p>The secret management components comprise a very small portion of the EdgeX framework.  Many components of an actual system are out-of-scope including the underlying hardware platform, the operating system on which the framework is running, the applications that are using it, and even the existence of workload isolation technologies, although the reference code does support deployment as Docker containers or Snaps.</p> <p>The goal of the EdgeX secret store is to provide general-purpose secret management to EdgeX core services and applications.</p> <p></p>"},{"location":"threat-models/secret-store/background/#motivation","title":"Motivation","text":"<p>The EdgeX Foundry security roadmap is published on the Security WG Wiki:</p> <ul> <li>https://wiki.edgexfoundry.org/display/FA/Security+Working+Group</li> <li>https://wiki.edgexfoundry.org/download/attachments/329467/EdgeX%20Security%20Architecture%20Roadmap.pptx?version=1&amp;modificationDate=1536753478000&amp;api=v2</li> </ul> <p>The security roadmap establishes the requirement for a secret storage engine at the edge, and that furthermore that hardware secure storage should be supported:</p> <p>Initial EdgeX secrets (needed to start Vault/Kong) will be encrypted on  the file system using a secure storage abstraction layer \u2013 allowing other implementations to store these in hardware stores (based on hardware root of trust systems)</p> <ul> <li>https://www.edgexfoundry.org/blog/2018/11/15/edgex-foundry-releases-delhi-and-plans-for-edinburgh/</li> <li>https://wiki.edgexfoundry.org/display/FA/Edinburgh+Release</li> </ul> <p>The current state of secret storage is described in the Hardware Secure Storage Draft.</p> <p>The AS-IS architecture resembles the following diagram:</p> <p></p> <p>As the diagram notes, the critical secrets for securing the entire on-device infrastructure sit unencrypted on bulk storage media. While the deptiction that the Vault contents are encrypted is true, the key needed to decrypt it is in plaintext nearby.</p> <p>The Hardware Secure Storage Draft proposes the following future state:</p> <p></p> <p>This future state proposes a security service that can encrypt the currently unencrypted data items.</p> <p>A number of problems must be resolved to make this future state a reality:</p> <ul> <li> <p>Initialization order of containers: containers must block until their prerequisites have been satisfied. It is not sufficient to have only start-ordering, as initialization can take a variable amount of time, and the initialization tasks of a previous step are not necessarily completed before the next step is initiated.</p> </li> <li> <p>Allowing for variability in the hardware encryption component.  A simple bulk encryption/decryption interface does not allow for interesting scenarios based on local attestation, for example.</p> </li> <li> <p>Distribution of Vault tokens to services.</p> </li> </ul>"},{"location":"threat-models/secret-store/background/#general-requirements-for-vault-on-the-edge","title":"General Requirements for Vault on the Edge","text":"<p>When using Vault at the edge, there are a number of general problems that must be solved as illustrated in the below diagram:</p> <p></p> <p>Working top to bottom and left to right:</p> <ul> <li>Vault requires TLS to protect secrets in transit. This introduces a requirement to establish an on-device PKI, and the consequent need to prevent compromise of TLS private keys and unauthorized issuance of TLS certificates. It is difficult to dynamically trust a new certificate authority as the trusted list of certificate authorities is often set at build time not runtime. An alternative is to trust a particular CA at build time, and to pre-populate the PKI during device provisioning.</li> <li>Vault requires a master encryption key to encrypt its database. This master key is generated when the vault is initialized and must be resupplied when Vault is restarted to \"unlock\" the vault. The implementation must ensure the confidentiality, integrity, and availability of the Vault master key. Normally the vault is manually unsealed using a human process. In IoT scenarios, the vault must be unsealed automatically, which presents additional challenges.</li> <li>Services need to talk to Vault to retrieve their secrets. Thus, the service location mechanism that clients use to establish that connection must be trustworthy / non-spoofable. One option is to hard-code \"localhost\" or use DNS provided by container orchestration software. The problem is significantly harder if using an outsource service locator, like the Consul service location, as the trust in Consul then needs to be established.</li> <li>There is a general bootstrapping problem for the services themselves: clients need a Vault token to authenticate to Vault. The confidentiality, integrity, and availability of this token needs to be protected, and the token somehow needs to be distributed to the service.  If the client tries to pull the token from somewhere, there must be an preexisting mechanism to authenticate the request. Alternatively, the token could be pushed to the service before it is started: environment variable or files are common approaches.  Lastly, there could be an agent that sends the token to a service after it starts, such as by an HTTP API. (Reference: Cubbyhole authentication principles.)   In addition, the previously mentioned PKI problem applies here.</li> <li>The Vault storage itself must be protected against integrity and availability threats. Confidentiality is provided through the Vault master key.</li> </ul> <p>The secret management design for EdgeX can be said to be finished when there is a sufficiently secure solution to the above challenges for the supported execution models.</p>"},{"location":"threat-models/secret-store/background/#next-steps-for-edgex","title":"Next Steps for EdgeX","text":"<p>All parts of the system must collaborate in order to ensure a robust secret management design. What is needed is a systematic approach to secret management that will close the gaps between the AS-IS and TO-BE future state.  This systematic approach is based on formal threat model with the aim that the system will meet some critical security objectives. The threat model is built against a proposed design and validates the security architecture of the design.  Through threat modeling, we can identify assets, adversaries, threats, and mitigations against those threats.  We can then make a prioritized implementation plan to address those threats.  More importantly, for someone adopting EdgeX, the documented threat model outlines the threats that the framework has been designed to protect against and by omission, the threats that it has not.</p>"},{"location":"threat-models/secret-store/high_level_design/","title":"Detailed Design","text":"<p>This document gets into the design details of the proposed secret management architecture, starting with a design overview and going into greater detail for each subsystem.</p>"},{"location":"threat-models/secret-store/high_level_design/#design-overview","title":"Design Overview","text":"<p>In context of the stated future goal to support hardware-based secret storage, it is important to note that in a Vault-based design, not every secret is actually wrapped by a hardware-backed key. Instead, the secrets in Vault are wrapped by a single master key, and the encryption and decryption of secrets are done in a user-level process in software. The Vault master key is then wrapped by one more additional keys, ultimately to a root key that is hardware-based using some authorization mechanism. In a PKCS#11 hardware token, authorization is typically a PIN. In a TPM, authorization is typically a set of PCR values and an optional password. The idea is that the Vault master key is eventually protected by some uncopyable unique secret attached to physical hardware.</p> <p>The hardware may or may not have non-volatile tamper-resistant storage.  Non-volatile storage is useful for integrity protection as well as in pre-OS scenarios.  An example of the former would be to store a hash value for HTTP Public Key Pinning (HPKP) in a manner that makes it difficult for an attacker to pin a different key.  An example of the latter would be storing a LUKS disk encryption key that can decrypt a root file system when normal file system storage is not yet available.  If non-volatile storage is available, it is often available only in very limited quantity.</p> <p>Obvious with the above design is that at some point along the line, the Vault master key or a wrapping key is observably exposed to user-mode software. In fact, the number two recommendation for Vault hardening is \"single tenancy\" which is further explained, in priority order, as (a) giving Vault its own physical machine, (b) giving Vault its own virtual machine, or (c) giving Vault its own container. The general solution to the exposure of the Vault master key or a wrapping key is to use a Trusted Execution Environment (TEE) to limit observability. There is currently no platform- and architecture-independent TEE solution.</p>"},{"location":"threat-models/secret-store/high_level_design/#high-level-design","title":"High-level design","text":"<p>Figure 1:  High-level design.</p> <p>The secrets to be protected are the application secrets (P-1). The application secrets are protected with a per-service Vault service token (S-1).  The Vault service token is delivered by a \"token server\" running in the security service to a pre-agreed rendezvous location, where mandatory access control, namespaces, or file system permissions constrain path accessibility. Vault access tokens are simply 128-bit random handles that are renewed at the Vault server.  They can be shared across multiple instances of a load-balanced service, and unlike a JWT there is no need to periodically re-issue them if they have not expired.</p> <p>The token server has its own non-root token-issuing token (S-3) that is created by the security service with the root token after it has initialized or unlocked the vault but before the root token is revoked. (S-4) Because of the sensitive nature of this token, it is co-located in the security service, and revoked immediately after use.</p> <p>The actual application secrets are stored in the Vault encrypted data store (S-6) that is logically stored in Consul's data store (S-7). The vault data store is encrypted with a master key (S-5) that is held in Vault memory and forgotten across Vault restarts. The master key must be resupplied whenever Vault is restarted. The security service encrypts the master key using AES-256-GCM where the key (S-13) is derived using an RFC5869 key derivation function (KDF). The input key material for the KDF originates from a vendor-defined plugin that interfaces with a hardware security mechanism such as a TPM, PKCS11-compatible HSM, trusted execution environments (TEE), or enclave. An encrypted Vault master key is what is ultimately saved to storage.</p> <p>Confidentiality of the secret management APIs is established using server-side TLS.  The PKI initialization component is responsible for generating a root certificate authority (S-8), one or more intermediate certificate authorities (S-9), and several leaf certificates (S-10) needed for initialization of the core services. The PKI can be generated afresh every boot, or installed during initial provisioning and cached. PKI intialization is covered next.</p>"},{"location":"threat-models/secret-store/high_level_design/#pki-initialization","title":"PKI Initialization","text":"<p>Figure 2: PKI initialization.</p> <p>PKI initialization must happen before any other component in the secret management architecture is started because Vault requires a PKI to be in place to protect its HTTP API.  Creation of a PKI is a multi-stage operation and care must be taken to ensure that critical secrets, such as the the CA private keys, are not written to a location where they can be recovered, such as bulk storage devices.  The PKI can be created on-device at every boot, at device provisioning time, or created off-device and imported.  Caching of the PKI is optional if the PKI is created afresh every boot, but required otherwise.</p> <p>If the implementation allows, the private keys for certificate authorities should be destroyed after PKI generation to prevent unauthorized issuance of new leaf certificates, except where the certificate authority is stored in Vault and controlled with an appropriate policy. Following creation of the PKI, or retrieving it from cache, the PKI initialization is responsible for distributing keying material to pre-agreed per-service drop locations that service configuration files expect to find them.</p> <p>PKI initialization is not instantaneous.  Even if PKI initialization is started first, dependent services may also be started before PKI initialization is completed.  It is necessary to implement init-blocking code in dependent services that delays service startup until PKI assets have been delivered to the service.</p> <p>Most dependent services do not support encrypted TLS private keys.  File access controls offered by the underlying execution environment are their only protection.  A potential future enhancement might be to re-use the key derivation strategy used earlier to generate additional keys to encrypt the cached PKI keying material at rest.</p> <p>(Update: ADR 0015, adopted after this threat model was written, stipulates that TLS will not be used for single-node deployments of EdgeX.)</p>"},{"location":"threat-models/secret-store/high_level_design/#vault-initialization-and-unsealing-flow","title":"Vault initialization and unsealing flow","text":"<p>Figure 3: Vault initialization and unsealing flow</p> <p>When the security service starts the first thing that it does is check to see if a hardware security hook has been defined. The presence of a hardware security hook is indicated by an environment variable, IKM_HOOK, that points to an executable program. The security service will run the program and look for a hex-encoded key on its standard output. If a key is found, it will be used as the input key material for the HMAC key deriviation function, otherwise, hardware security will not be used. The input key material is combined with a random salt that is also saved to disk for later retrieval. The salt ensures that unique encryption keys will be used each time EdgeX is installed on a platform, even if the underlying input key material does not change. The salt also defends against weak input key material.</p>"},{"location":"threat-models/secret-store/high_level_design/#initialization-flow","title":"Initialization flow","text":"<p>Next, the security service will determine if Vault has been initialized. In the case that Vault is uninitialized, Vault's initialization API will be invoked, which results in a set of keys that can be used to reconstruct a Vault master key. When hardware security is enabled, the input key material and salt are fed into the key derivation function to generate a unique AES-256-GCM encryption key for each key shard. The encrypted keys along with nonces will be persisted to disk. AES-GCM protects against padding oracle attacks, but is sensitive to re-use of the salt value. This weakness is addressed both by using a unique encryption key for each shard, as well as the expectation that encryption is performed exactly once: when Vault is initialized. The Vault response is saved to disk directly in the case that hardware security is not enabled.</p>"},{"location":"threat-models/secret-store/high_level_design/#unseal-flow","title":"Unseal flow","text":"<p>If Vault is found to be in an initialized and sealed state, the Vault master key shards are retrieved from disk. If they are encrypted, they will be encrypted by reversing the process performed during initialization. The key shards are then fed back to Vault until the Vault is unsealed and operational.</p>"},{"location":"threat-models/secret-store/high_level_design/#token-issuing-flow","title":"Token-issuing flow","text":"<p>Figure 7: Token-issuing flow.</p>"},{"location":"threat-models/secret-store/high_level_design/#client-side","title":"Client side","text":"<p>Every service that wants to query Vault must link to a secrets module either directly (go-mod-secrets) or indirectly (go-mod-bootstrap) or implement their own Vault interface. The module must take as input a path to a file that contains a Vault access token specific to that service. There is currently no secrets module for the C SDK.</p> <p>Clients must be prepared to handle a number of error conditions while attempting to access the secret store:</p> <ul> <li>There may be race conditions between the security service issuing new tokens and the service consuming an old token.</li> <li>The supplied token may be expired (tokens will expire if not renewed periodically)</li> <li>Vault may not be accessible (it is a networked service, after all)</li> <li>The client may be waiting for a secret that has not yet been provisioned into the secret store.</li> </ul> <p>Judicious use of retry loops should be sufficient to handle most of the above issues.</p>"},{"location":"threat-models/secret-store/high_level_design/#server-side","title":"Server side","text":"<p>On the server side, the Vault master key will be used to generate a fresh \"root token\". The root token will generate a special \"token-issuing token\" that will generate tokens for the EdgeX microservices. The root token will then be revoked, and a \"token provider\" process with access to the token-issuing token will be launched in the background.</p> <p>EdgeX will provide a single reference implementation for the token provider: * security-file-token-provider: This token provider will consume a list of services that require tokens, along with a set of customizable parameters. At startup, the service tokens are created in bulk and delivered via the host file system on a per-service basis.</p> <p>The token-issuing token will be revoked upon termination of the token provider.</p>"},{"location":"threat-models/secret-store/high_level_design/#token-revocation","title":"Token revocation","text":"<p>Vault tokens are persistent. Although they will automatically expire if they are not renewed, inadvertent disclosure of a token would be difficult to detect. This condition could allow an attacker to maintain an unauthorized connection to Vault indefinitely. Since tokens do expire if not renewed, it is necessary to generate fresh tokens on startup. Therefore, part of the startup process is the revokation of all previously Vault tokens, as a mitigation against token disclosure as well as garbage collection of obsolete tokens.</p>"},{"location":"threat-models/secret-store/threat_model/","title":"Threat Model","text":""},{"location":"threat-models/secret-store/threat_model/#historical-context","title":"Historical Context","text":"<p>This threat model was written in the EdgeX Fuji timeframe. Significant changes have occured to EdgeX since that time. This document serves as a historical record of motification for security changes that occured in the Fuji, Geneva, Hanoi, and Ireland releases of EdgeX.</p> <p>This threat model also covers ONLY THE EDGEX SECRET STORE and not the EdgeX project as a whole.</p>"},{"location":"threat-models/secret-store/threat_model/#assumptions","title":"Assumptions","text":"<p>The EdgeX Framework is a API-based software framework that strives to be platform and architecture-independent. The threat model considers only the following two deployment scenarios:</p> <ul> <li>A containerized implementation based on Docker.</li> <li>A confined implementation based on Snaps.</li> </ul> <p>The threat model presented in this document analyzes the secret management subsystem of EdgeX, and has considerations for both of the above runtime environments, both of which implement protections beyond a stock user/process runtime environment.  In generic terms, the secret management threat model assumes:</p> <ul> <li>Services do not have unfettered access to the host file system.</li> <li>Services are protected from each other and communicate only through defined IPC mechanisms.</li> <li>The service location mechanism is trustworthy/non-spoofable.</li> <li>Services do not run with privilege except where noted.</li> <li>There are no unauthorized privileged administrators operating on the device (privileged administrator can bypass all access controls).</li> <li>The framework may be deployed on a device with inbound and outbound Internet connectivity. This is a pessimistic assumption to introduce an anonymous network adversary.</li> <li>The framework may be deployed on a device with limited physical security. This is a pessimistic assumption to introduce simple hardware attacks such as disk cloning.</li> </ul> <p>Any particular of implementation of EdgeX should perform its own threat modeling activity as part of securing the implementation, and may use this document to supplement analysis of the secret management subsystem of EdgeX.</p>"},{"location":"threat-models/secret-store/threat_model/#recommended-hardening","title":"Recommended Hardening","text":"<p>Physical security and hardening of the underlying platform is out-of-scope for implementation by the EdgeX reference code.  But since the privileged administrator can bypass all access controls, such hardening is nevertheless recommended: the threat model assumes that there are no unauthorized privileged administrators.  One should look to industry standard hardening guides, such as CIS Benchmarks for hardening operating system and container runtimes.  Additionally, typical EdgeX base platforms are likely to support the following types of hardening out-of-the-box(1), and these should be enabled where possible.</p> <ul> <li>Verified/secure boot with a hardware root of trust.  This refers to a trust chain that starts at power-on, verifying the system firmware, boot loaders, drivers, and the core components of the operating system.  Verified boot helps to ensure that an attacker cannot obtain a privileged administrator role during the boot process.</li> <li>File system integrity (e.g. dm-verity) and/or full disk encryption (e.g. LUKS).  Verified/secure boot typically does not apply to user-mode process started after the kernel has booted.  File system integrity checking and/or encryption is an easy way to reduce exposure to off-line tampering such as resetting the administrator password or installing a back door.</li> </ul> <p>The EdgeX secret store provides hooks for utilizing hardware secure storage to ensure that secrets stored on the device can only be decrypted on that device.  Implementations should use hardware security features where a suitable plug-in is available.  For maximum benefit, hardware security should be combined with verified/secure boot, file system protection, and other software-level hardening.</p> <p>Lastly, due consideration should be given to the security of the software supply chain: it is important to ensure that code deployed to a device is what is expected and free of known vulnerabilities. This implies an ability to update a device in the field to ensure that it remains free of known vulnerabilities.</p> <p>Footnotes:</p> <p>(1) Most Linux distributions support verified/secure boot.  Microsoft Windows enables verified/secure boot by default, and can automatically use TPM hardware if full disk encryption is enabled and will fail to decrypt if verified/secure boot is disabled.</p>"},{"location":"threat-models/secret-store/threat_model/#protections-afforded-by-modeled-runtime-environments","title":"Protections afforded by modeled runtime environments","text":"<p>The threat model considers Docker-based and Snap-based deployments.  Each of these deployment environments offer sandboxing protections that go beyond a standard Unix user and process model.  As mentioned earlier, the threat model assumes the sandboxing protections:</p> <ul> <li>Prevent one service from accessing the protected files of the host or another service.</li> <li>Prevent one service from inspecting the protected memory of another service or processes on the host.</li> <li>Restrict interprocess communication (IPC) mechanisms to a defined set.</li> <li>Allow for private scratch spaces, preferably on a RAMdisk.</li> </ul> <p>In the Linux environment, most of these protections are based on a combination of two technologies: Linux namespaces and mandatory access control (MAC) based on Linux Security Module (LSM).</p>"},{"location":"threat-models/secret-store/threat_model/#docker-based-runtimes","title":"Docker-based runtimes","text":"<p>All services running within a single container are assumed to be within the same trust boundary. Docker-based runtimes are expected to provide the following properties:</p>"},{"location":"threat-models/secret-store/threat_model/#general-protections","title":"General protections","text":"<ul> <li>The <code>root</code> user in a container is subject to namespace constraints and restricted set of capabilities.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#file-system-protections","title":"File system protections","text":"<ul> <li>Containers by default have no visibility to the host's file system and run with their own root file system that is supplied with the container. The container's file system can be augmented with docker volumes and bind mounts to the host file system to allow specific data sharing scenarios.</li> <li>Containers can be started with tmpfs volumes that are local to that container instance. By default, all files in a container are remapped to an overlay file system stored as files under <code>/var/lib/docker</code> where they are observable on the host and stored persistently.</li> <li>The root file system of a container can be mounted read-only.  For writable root file systems, each container gets a fresh copy of the root file system.</li> <li>Content that must be persisted across container restarts must be stored in Docker volumes.</li> <li>Docker volumes can be shared across multiple containers; however, the default \"local\" driver can only do such sharing when the containers are co-located on the same host.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#interprocess-communication-protections","title":"Interprocess communication protections","text":"<ul> <li>Docker containers do not share the host's network interface by default and instead is based on virtual ethernet adapters and bridges.  Network connectivity is strictly controlled via the docker-compose definition.</li> <li>There are networking differences when running Docker on Windows or MacOS machines, due to the use of a hidden Linux virtual machine to actually run Docker.</li> <li>There are few if any IPC restrictions between processes running in the same container due to lack of mandatory access controls.  Each service must run in its own container to ensure maximum service isolation.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#snap-based-runtimes","title":"Snap-based runtimes","text":"<p>All services running within a single snap are assumed to be within the same trust boundary.  However, even in a snap, due to the use of mandatory access control, there are stronger-than-normal process isolation policies in place, as documented below.</p>"},{"location":"threat-models/secret-store/threat_model/#general-protections_1","title":"General protections","text":"<ul> <li>The <code>root</code> user in a snap is subject to namespace constraints and MAC rules enforced by Linux Security Modules (LSMs) configured as part of the snap.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#file-system-protections_1","title":"File system protections","text":"<ul> <li>Snaps run inside their own mount namespace, which is a confined view of the host's file system where access to most paths is restricted. This includes sysfs and procfs.  Note: File system paths inside of the snap are homomorphic with the host's view of the file system - any files written in the snap are visible on the host.</li> <li>All of the files in the snap are read-only with the exception of the below noted paths.  The contents of the snap itself are mounted read-only from a squashfs file system.</li> <li>Snaps can write small temporary files to a tmpfs pointed to by <code>$XDG_RUNTIME_DIR</code> which is a user-private user-writable-directory that is also per-snap. Snaps can write persistent data local to the snap to the <code>$SNAP_DATA</code> folder.</li> <li>Snaps do not have the CAP_SYS_ADMIN, <code>mount(2)</code>, capability.</li> <li>Content interface snaps can be used to allow one snap to share code or data with another snap.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#interprocess-communication-protections_1","title":"Interprocess communication protections","text":"<ul> <li>Snaps can send signals only to processes running inside of the snap.</li> <li>Snaps share the host's network interface rather than having a virtual network interface card.</li> <li>Snaps may have multiple processes running in them and they are allowed to communicate with each other.</li> <li>Snaps may connect to IP sockets opened by processes running outside of the snap.</li> <li>Snaps are not allowed to access <code>/proc/mem</code> or to <code>ptrace(2)</code> other processes.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#high-level-security-objectives","title":"High-level Security Objectives","text":""},{"location":"threat-models/secret-store/threat_model/#security-objectives","title":"Security Objectives","text":"<p>The security objectives call out the security goals of the architecture/design.  They are:</p> <ul> <li>Ensure confidentiality, integrity, and availability of application secrets.</li> <li>Reduce plain text exposure of sensitive data.</li> <li>Design-in hooks for hardware secure storage.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#assets","title":"Assets","text":""},{"location":"threat-models/secret-store/threat_model/#primary-assets","title":"Primary Assets","text":"<p>Primary assets are the assets at the level of the conceptual data model of the system and primarily represent \"real-world\" things.</p> AssetId Name Description Attack Points P-1 Application secrets The things we are trying to protect In use, in transit, in storage"},{"location":"threat-models/secret-store/threat_model/#secondary-assets","title":"Secondary Assets","text":"<p>Secondary assets are assets are used to support or protect the primary assets and are usually implementation details versus being part of the conceptual data model.</p> AssetId Name Description Attack Points S-1 Vault service token Vault service tokens are issued per-service and used by services to authenticate to vault and retrieve per-service application secrets. In-flight via API, at rest S-3 Vault token-issuing-token Used by the token issuing service to create vault service tokens for other services. (Called out separately from S-1 due to its high privilege.) In-flight via API, at rest S-4 Vault root token A special token created at Vault initialization time that has all capabilities and never expires. In-flight via API, at rest S-5 Vault master key A root secret that encrypts all of Vault's other secrets. In-flight via API, at rest, in-use. S-6 Vault data store A data store encrypted with the Vault master key that contains the contents of the vault. In storage S-7 Consul data store Back-end storage engine for vault data store. In storage S-8 CA key Private keys for on-device PKI certificate authority. In use, in transit, in storage S-9 Issuing CA key Private keys for on-device PKI issuing authorities. In use, in transit, in storage S-10 Leaf TLS key Private keys for TLS server authentication for on-device services (e.g. Vault service, Consul service) In use, in transit, in storage S-13 IKM Initial keying material as input to HMAC KDF In use, in transit, in storage <p>Note that asset S-9 (issuing CA key) is not currently implemented: in all current EdgeX releases all TLS leaf certificates are derived from the root CA.</p>"},{"location":"threat-models/secret-store/threat_model/#attack-surfaces","title":"Attack Surfaces","text":"<p>This table lists components in the system architecture that have assets of potential value to an attacker and how a potential attacker may attempt to gain access to those components.</p> System Element Compromise Type Assets Exposed Attack Method Consul API IA Vault data store, service location data/registry, settings Data modification, DoS against API Vault API CIA All application secrets, all vault tokens Data channel snooping or data modification, DoS against API Host file system CIA PKI private keys, Vault tokens, Vault master key, Vault store, Consul store Snooping or data modification, deletion of critical files PKI initiazation agent CI Private keys for on-device PKI Snooping generation of assets or forcing predictable PKI Vault initialization agent CI Vault master key, Vault root token, token-issuing-token, encryption key for Vault master key Snooping generation of assets or tampering with assets Token server API CIA Token issuing token, service tokens Data channel snooping, tampering with asset policies, or forcing service down Process memory CIA Most assets excluding hardware and  storage media Read or modify process memory through /proc or related IPC mechanisms"},{"location":"threat-models/secret-store/threat_model/#adversaries","title":"Adversaries","text":"<p>The adversary model is use-case specific, but for the sake of discussion assume the following simplistic list:</p> Persona Motivation Starting Access Skill / Effort Thief (Larceny) Quick cash by reselling stolen components. None Low Remote hacker Financial gain by harvesting resellable information or performing ransomware attacks via exploitable vulnerabilities. Network Medium Malicious administrator Out of scope. Cannot defend against attacks originating at level of system software. N/A N/A Malicious non-privileged service Escalation of privilege and data exfiltration. Malicious services includes software supply chain attackers. User mode access Medium Industrial espionage / Malicious developer Financial gain or harm by obtaining access to back-end systems and/or competitive data. Unknown High <p>The malicious administrator is out of scope: the threat model assumes that there are no unauthorized privileged administrators on the device. This must be ensured through hardening of the underlying platform, which is out of scope.</p> <p>Malicious non-privileged services are a concern. This can occur through a wide variety of software supply chain attacks, as well as implementation bugs that permit a service to exhibit unintended functionality.</p> <p>The industrial espionage or malicious developer adversary deserves some explanation.  Whereas the remote hacker adversary is primarily motivated by a one-time attack, the industrial espionage attacker seeks to maintain a persistent foothold or to insert back-doors into an entire fleet of devices.  Making each device unique (e.g. device-unique secrets) helps to mitigate against break-once-run-everywhere (BORE) attacks.</p>"},{"location":"threat-models/secret-store/threat_model/#threat-matrix","title":"Threat Matrix","text":"<p>The threat matrix indicates what assets are at risk for the various attack surfaces in the system.</p> Consul API Vault API Host FS PKI agent Vault agent Token svc /proc /mem Application secrets *a *p Vault service token *bd *b *bd *p Token-issuing-token *e *e *e *e *p Vault root token *f *f *f *p Vault master key *g *g *g *p Vault DS *hi Consul DS *j *j PKI CA *m *k *p PKI intermediate *m *l *p PKI leaf *m *m *p IKM *q *p"},{"location":"threat-models/secret-store/threat_model/#threats-and-mitigations","title":"Threats and Mitigations","text":"<p>Format:</p> <p>(identifier) Threat name</p> <ul> <li>Mitigation 1</li> <li>Mitigation 2</li> <li>et cetera</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#a1-loss-of-confidentiality-of-application-secrets-in-flight-by-mitm-attack-against-the-vault-api","title":"(a1) Loss of confidentiality of application secrets in-flight by MITM attack against the Vault API.","text":"<ul> <li>DNS name resolution is assumed trustworthy (hard-coded localhost, or Docker-supplied DNS).</li> <li>Vault API is protected by TLS verified against a CA certificate.</li> <li>Vault TLS private key is protected by host file system (SECRETSLOC).</li> <li>Unmitigated: Service location information is trustworthy.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#a2-loss-of-confidentiality-of-application-secrets-by-querying-vault-api","title":"(a2) Loss of confidentiality of application secrets by querying Vault API.","text":"<ul> <li>Vault API is protected by TLS verified against a CA certificate.</li> <li>Application secrets are protected by Vault service token.</li> <li>Each service has a unique token with restricted visibility.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#b1-loss-of-confidentiality-of-vault-service-token-in-flight-by-mitm-attack-against-the-vault-api","title":"(b1) Loss of confidentiality of Vault service token in-flight by MITM attack against the Vault API.","text":"<ul> <li>Vault service token is protected by host file system (SECRETSLOC).</li> <li>Vault service token has limited lifespan and must be periodically renewed.</li> <li>Vault API is protected by TLS verified against a CA certificate.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#b2-loss-of-confidentiality-of-vault-service-token-in-flight-by-mitm-attack-against-the-token-provider","title":"(b2) Loss of confidentiality of Vault service token in-flight by MITM attack against the token provider.","text":"<ul> <li>The file-based token provider does not expose an API.</li> <li>The file-based token provider configuration information comes from a trusted source (configuration file bundled with the service).</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#b3-loss-of-confidentiality-of-vault-service-token-at-rest-by-file-system-inspectionmonitoring","title":"(b3) Loss of confidentiality of Vault service token at-rest by file system inspection/monitoring.","text":"<ul> <li>Container/Snap protections prevent services from reading other services' tokens off of disk.</li> <li>Revoke previously generated tokens on every reboot.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#d1-loss-of-availability-of-vault-service-token-token-via-intentional-vault-service-crash","title":"(d1) Loss of availability of Vault service token token via intentional Vault service crash.","text":"<ul> <li>Service tokens are created as persistent orphans (survive Vault restarts).</li> <li>Services needing long-lived Vault access can renew their own token.</li> <li>Unmitigated: Automatic restart and re-unsealing of Vault daemon.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#d2-loss-of-availability-of-vault-service-token-token-via-intentional-token-provider-crash","title":"(d2) Loss of availability of Vault service token token via intentional token provider crash.","text":"<ul> <li>File-based token provider is a one-shot service.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#e1-loss-of-confidentiality-of-token-issuing-token-in-flight-by-mitm-attack-against-the-vault-api","title":"(e1) Loss of confidentiality of token-issuing-token in-flight by MITM attack against the Vault API.","text":"<ul> <li>See mitigations for threat (b1) above.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#e2-loss-of-confidentiality-of-token-issuing-token-at-rest-by-file-system-inspectionmonitoring","title":"(e2) Loss of confidentiality of token-issuing-token at-rest by file system inspection/monitoring.","text":"<ul> <li>Container/Snap provided file system protections.</li> <li>Token-issuing token in stored in private tmpfs area in execution environments that support it.</li> <li>Token-issuing token is passed via private channel inside of security service.</li> <li>Token-issuing token for file-based token provider is revoked after use.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#e3-loss-of-availability-of-token-issuing-token-via-intentional-service-crash","title":"(e3) Loss of availability of token-issuing token via intentional service crash.","text":"<ul> <li>Not applicable: file-based token provider is a single-shot process</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#f1-loss-of-confidentiality-of-vault-root-token-in-flight-by-mitm-attack-against-the-vault-api","title":"(f1) Loss of confidentiality of Vault root token in-flight by MITM attack against the Vault API.","text":"<ul> <li>See mitigations for threat (a1) above.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#f2-loss-of-confidentiality-of-vault-root-token-by-other-means","title":"(f2) Loss of confidentiality of Vault root token by other means.","text":"<ul> <li>The root token is never persisted to disk and revoked immediately after performing necessary setup during vault initialization (the root token can be regenerated on-demand with the master key).</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#g1-loss-of-confidentiality-of-vault-master-key-in-flight-by-mitm-attack-against-the-vault-api","title":"(g1) Loss of confidentiality of Vault master key in-flight by MITM attack against the Vault API.","text":"<ul> <li>See mitigations for threat (a1) above.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#g2-loss-of-confidentiality-of-vault-master-key-at-rest-by-file-system-inspectionmonitoring","title":"(g2) Loss of confidentiality of Vault master key at-rest by file system inspection/monitoring.","text":"<ul> <li>Container/Snap provided file system protections.</li> <li>Vault master key is encrypted with AES-256-GCM using a HMAC-KDF derived-key with KDF input coming from a configurable source.</li> <li>Threat model recommends use of hardware secure storage for the input key material.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#g3-loss-of-availability-of-vault-master-key-by-malicious-deletion","title":"(g3) Loss of availability of Vault master key by malicious deletion.","text":"<ul> <li>Container/Snap provided file system protections.</li> <li>Hardware-based solutions are out of scope for the reference design, but may offer additional protections.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#h-lost-of-confidentiality-of-vault-data-store-at-rest-by-file-system-inspectionmonitoring","title":"(h) Lost of confidentiality of Vault data store at-rest by file system inspection/monitoring.","text":"<ul> <li>Vault data store is encrypted using Vault master key before being stored.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#i-lost-of-availability-of-vault-data-store-due-to-intentional-service-crash-of-consul","title":"(i) Lost of availability of Vault data store due to intentional service crash of Consul.","text":"<ul> <li>Vault data store is implemented on top of Consul, which is a fault-tolerant-capable data store.</li> <li>In Docker-based environments, Consul can be configured to automatically restart on failure.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#j1-loss-of-confidentiality-of-consul-data-store-at-rest-by-file-system-inspectionmonitoring","title":"(j1) Loss of confidentiality of Consul data store at-rest by file system inspection/monitoring.","text":"<ul> <li>Consul data store is assumed to be non-confidential and thus there is no threat. Vault data is encrypted prior to be passed to Consul for storage.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#j2-loss-of-integrity-or-availability-of-consul-data-store-at-rest-by-file-system-tampering-or-malicious-deletion","title":"(j2) Loss of integrity or availability of Consul data store at-rest by file system tampering or malicious deletion.","text":"<ul> <li>Container/Snap provided file system protections.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#j3-loss-of-availability-of-consul-data-store-at-runtime-due-to-intentional-service-crash","title":"(j3) Loss of availability of Consul data store at runtime due to intentional service crash.","text":"<ul> <li>In Docker-based environments, Consul can be configured to automatically restart on failure.</li> <li>Threat may be further mitigated by running Consul in High Availability mode (not done in reference implementation).</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#k1-loss-of-confidentiality-of-pki-ca-at-rest-by-file-system-inspectionmonitoring","title":"(k1) Loss of confidentiality of PKI CA at-rest by file system inspection/monitoring.","text":"<ul> <li>Container/Snap provided file system protections.</li> <li>Secure deletion of CA private key after PKI generation.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#k2-loss-of-integrity-of-pki-ca-by-malicious-replacement","title":"(k2) Loss of integrity of PKI CA by malicious replacement.","text":"<ul> <li>Container/Snap provided file system protections.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#k3-loss-of-availability-of-pki-ca-public-certificate-by-malicious-deletion","title":"(k3) Loss of availability of PKI CA (public certificate) by malicious deletion.","text":"<ul> <li>Container/Snap provided file system protections.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#l1-loss-of-confidentiality-of-pki-intermediate-at-rest-by-file-system-inspectionmonitoring","title":"(l1) Loss of confidentiality of PKI intermediate at-rest by file system inspection/monitoring.","text":"<ul> <li>Container/Snap provided file system protections.</li> <li>Secure deletion of CA intermediate private key after PKI generation.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#l2-loss-of-integrity-of-pki-intermediate-by-malicious-replacement","title":"(l2) Loss of integrity of PKI intermediate by malicious replacement.","text":"<ul> <li>Identical to threat (k3): CA would have to be maliciously replaced as well.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#l3-loss-of-availability-of-pki-intermediate-public-certificate-by-malicious-deletion","title":"(l3) Loss of availability of PKI intermediate (public certificate) by malicious deletion.","text":"<ul> <li>Container/Snap provided file system protections.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#m1-loss-of-confidentiality-of-pki-leaf-at-rest-by-file-system-inspectionmonitoring","title":"(m1) Loss of confidentiality of PKI leaf at-rest by file system inspection/monitoring.","text":"<ul> <li>Container/Snap provided file system protections.</li> <li>Note that server TLS private keys must be delivered to services unencrypted due to limitations of dependent services.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#m2-loss-of-integrity-of-pki-leaf-by-malicious-replacement","title":"(m2) Loss of integrity of PKI leaf by malicious replacement.","text":"<ul> <li>Identical to threat (k3/l3): CA or intermediate would have to be maliciously replaced as well.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#m3-loss-of-availability-of-pki-leaf-by-malicious-deletion","title":"(m3) Loss of availability of PKI leaf by malicious deletion.","text":"<ul> <li>Container/Snap provided file system protections.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#p-disclosure-tampering-or-deletion-of-secrets-through-procmem-or-ptrace-by-malicous-or-compromised-microservice","title":"(p) Disclosure, tampering, or deletion of secrets through /proc/mem or ptrace() by malicous or compromised microservice","text":"<ul> <li>Container/Snap provided memory protections.</li> </ul>"},{"location":"threat-models/secret-store/threat_model/#q-lost-of-confidentiality-of-input-key-material-ikm","title":"(q) Lost of confidentiality of input key material (IKM)","text":"<ul> <li>IKM is secured by vendor-defined hardware-mechanism.</li> <li>IKM is passed to key derivation function via IPC pipe (stdout).</li> </ul>"},{"location":"threat-models/secret-store/vault_master_key_encryption/","title":"Vault Master Key Encryption Feature","text":""},{"location":"threat-models/secret-store/vault_master_key_encryption/#introduction","title":"Introduction","text":"<p>The EdgeX secret store threat model calls out a particular aspect of the Vault-based secret store architecture upon which the whole EdgeX secret store depends: the Vault master key. Because plaintext storage of the Vault master key at rest would be a known security weakness, the high level design calls for the Vault master key to be encrypted on storage.</p> <p>One way of doing this would be to simply encrypt the whole drive upon which the Vault master key is stored. This is a good solution: it would encrypt not only the Vault master key, but also other part of the system to harden them against offline tampering and information disclosure risks. This solution also has drawbacks as well: whole volume encryption may slow down boot times and have a runtime performance impact on constrained devices without hardware-accelerated crypto.</p> <p>The Vault Master Key Encryption feature of EdgeX enables a system designer to specifically target encryption of the Vault master key, and enables a variety of flexible use cases that are not tied to volume encryption such as key escrow (where a key is stored on another machine on the network), smart cards or USB HSMs (where a key us stored in a dongle or chip card), or TPM (security hardware found on many PC-class motherboards).</p>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#internal-design","title":"Internal design","text":"<p>As stated in the high level design, an RFC-5869 key derivation function (KDF) is used to produce a set of wrapping keys that are used by the vault-worker process to encrypt the Vault master key.</p> <p>An RFC-5869 KDF requires three inputs. A change to any input results in a different output key:</p> <ul> <li> <p>Input keying material (IKM).   It need not be (but should be) cryptographically strong, and is the \"secret\" part of the KDF.</p> </li> <li> <p>A salt.  A non-secret random number that adds to the strength of the KDF.</p> </li> <li> <p>An \"info\" argument.   The info argument allows multiple keys to be generated from the same IKM and salt.   This allows the same KDF to generate multiple keys each used for a different purpose.   For instance, the same KDF can be used to generate an encryption key to protect the PKI at-rest.</p> </li> </ul> <p>The Vault Master Key Encryption feature consumes the IKM from a Unix-style pipe. The IKM is provided by a vendor-defined mechanism, and is intended to be tied into security hardware on the device, be device-unique, and explicitly not stored in the file system.</p> <p>To further strengthen the solution, an implementation could choose to engineer a solution whereby the IKM is only released a configurable number of times per boot, so that malware that runs on the system post-boot cannot retrieve it.</p>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#ikm-hook","title":"IKM HOOK","text":"<p>The Vault Master Key Encryption feature is embedded into the EdgeX <code>security-secretsetore-setup</code> utility. It is enabled by setting an environment variable, <code>IKM_HOOK</code>, containing the path to an executable that implements the IKM interface, described below, when the <code>security-secretstore-setup</code> executable is run in early boot to initialize or unseal the EdgeX secret store.</p> <p>When this feature is enabled, the Vault master key is encrypted at rest, and cannot be recovered unless the same IKM is provided as when the secretstore was initialized.</p>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#ikm-interface","title":"IKM interface","text":""},{"location":"threat-models/secret-store/vault_master_key_encryption/#name","title":"NAME","text":"<p>ikm - Return input key material for a hash-based KDF.</p>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#synopsis","title":"SYNOPSIS","text":"<p>ikm</p>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#description","title":"DESCRIPTION","text":"<p>ikm outputs initial keying material to stdout as a lowercase hex string to be used for the default EdgeX software implementation of an RFC-5869 KDF.</p> <p>The ikm can output any number of octets. Typically, the KDF will pad the ikm if it is shorter than hashlen, and hash the ikm if it is longer than hashlen. Thus, if ikm returns variable-length output it is advantageous to ensure that the output is always greater than hashlen, where hashlen depends on the hash function used by the KDF.</p>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#example","title":"EXAMPLE","text":"<pre><code>ikm\n64acd82883269a5e46b8b0426d5a18e2b006f7d79041a68a4efa5339f25aba80\n</code></pre>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#sample-implementations","title":"Sample implementations","text":"<p>This section lists example implementations of the EdgeX Hardware Security Hook.</p>"},{"location":"threat-models/secret-store/vault_master_key_encryption/#tutorial-configuring-edgex-hardware-security-hooks-to-use-a-tpm-on-intel-developer-zone","title":"Tutorial: Configuring EdgeX Hardware Security Hooks to use a TPM on Intel\u00ae Developer Zone","text":"<p>There is a tutorial published on Intel\u00ae Developer Zone that uses TPM hardware through a device driver interface to encrypt the Vault master key shares. The sample uses TPM-based local attestation to attest the system state prior to releasing the IKM. The sample is based on the tpm2-software project in GitHub and is specifically designed to run as a statically-linked executable that could be injected into a Docker container. Although not a complete solution, it is an illustrative sample that demonstrates in concrete terms how to use the TSS C API to access TPM functionality.</p>"},{"location":"walk-through/Ch-Walkthrough/","title":"EdgeX Demonstration API Walk Through","text":"<p>EdgeX 2.0</p> <p>This walkthough has been updated to use the Ireland Release / EdgeX 2.0.  Changes to this tutorial include: - Remove the creation and reference to Addressables and Value Descriptors - Use of the new V2 Device Profile structure - Cleanup of the command service and use of the device name as part of the command - and more</p> <p>In order to better appreciate the EdgeX Foundry micro services (what they do and how they work), how they inter-operate with each other, and some of the more important API calls that each micro service has to offer, this demonstration API walk through shows how a device service and device are established in EdgeX, how data is sent flowing through the various services, and how data is then shipped out of EdgeX to the cloud or enterprise system.</p> <p></p> <p>Through this demonstration, you will play the part of various EdgeX micro services by manually making REST calls in a way that mimics EdgeX system behavior. After exploring this demonstration, and hopefully exercising the APIs yourself, you should have a much better understanding of how EdgeX Foundry works.</p> <p>To be clear, this walkthrough is not the way you setup all your device services, devices, etc. In this walkthrough, you manually call EdgeX APIs to perform the work that a device service would do to get a new device setup and to send data to/through EdgeX.  In other words, you are simulating the work of a device service does automatically by manually executing EdgeX APIs.  You will also exercise APIs to see the results of the work accomplished by the device service and all of EdgeX.</p> <p>Next&gt;</p>"},{"location":"walk-through/Ch-WalkthroughCommands/","title":"Calling commands","text":"<p>Recall that the device profile (the <code>camera-monitor-profile</code> in this walkthrough) included a number of commands to get/set (read or write) information from any device of that type. Also recall that the device (the <code>countcamera1</code> in this walkthrough) was associated to the device profile (again, the <code>camera-monitor-profile</code>) when the device was provisioned.</p> <p>See core command API for more details.</p> <p>With the setup complete, you can ask the core command micro service for the list of commands associated to the device (the <code>countcamera1</code>).  The command micro service exposes the commands in a common, normalized way that enables simplified communications with the devices for</p> <ul> <li>other micro services within EdgeX Foundry (for example, an edge analytics or rules engine micro service)</li> <li>other applications that may exist on the same host with EdgeX Foundry (for example, a management agent that needs to shutoff a sensor)</li> <li>any external system that needs to command those devices (for example, a cloud-based application that determined the need to modify the settings on a collection of devices)</li> </ul>"},{"location":"walk-through/Ch-WalkthroughCommands/#walkthrough-commands","title":"Walkthrough - Commands","text":"<p>Use either the Postman or Curl tab below to walkthrough getting the list of commands.</p> PostmanCurl <p>Make a GET request to <code>http://localhost:59882/api/v2/device/name/countcamera1</code>.</p> <p>Note</p> <p>Please note the change in port for the command request above.  We are no longer calling on core metadata in this part of the walkthrough.  The command micro service is at port 59882 by default.</p> <p></p> <p>Make a curl GET request as shown below.</p> <pre><code>curl -X GET localhost:59882/api/v2/device/name/countcamera1 | json_pp\n</code></pre> <p>Note</p> <p>Please note the change in port for the command request above.  We are no longer calling on core metadata in this part of the walkthrough.  The command micro service is at port 59882 by default.</p> <p></p> <p>Explore all of the URLs returned as part of this response! These are the URLs that clients (internal or external to EdgeX) can call to trigger the various get/set (read and write) offerings on the Device. However, do take note that the host for the URLs is <code>edgex-core-command</code>.  This is the name of the host for core command inside Docker.  To exercise the URL outside of Docker, you would have to use the name of the system host (<code>localhost</code> if executing on the same box).</p>"},{"location":"walk-through/Ch-WalkthroughCommands/#check-the-events","title":"Check the Events","text":"<p>While we're at it, check that no data has yet been shipped to core data from the camera device. Since the device service and device in this demonstration are wholly manually driven by you, no sensor data should yet have been collected. You can test this theory by asking for the count of events in core data.</p>"},{"location":"walk-through/Ch-WalkthroughCommands/#walkthrough-events","title":"Walkthrough - Events","text":"<p>Use either the Postman or Curl tab below to walkthrough getting the list of events.</p> PostmanCurl <p>Make a GET request to <code>http://localhost:59880/api/v2/event/count/device/name/countcamera1</code>.</p> <p>Make a curl GET request as shown below.</p> <pre><code>curl -X GET localhost:59880/api/v2/event/count/device/name/countcamera1\n</code></pre> <p>The response returned should indicate no events for the camera in core data.</p> <pre><code>{\"apiVersion\":\"v2\",\"statusCode\":200,\"Count\":0}\n</code></pre>"},{"location":"walk-through/Ch-WalkthroughCommands/#execute-a-command","title":"Execute a Command","text":"<p>While there is no real device or device service in this walkthrough, EdgeX doesn't know that. Therefore, with all the configuration and setup you have performed, you can ask EdgeX to set the scan depth or set the snapshot duration to the camera, and EdgeX will dutifully try to perform the task. Of course, since no device service or device exists, as expected EdgeX will ultimately responds with an error. However, through the log files, you can see a command made of the core command micro service, attempts to call on the appropriate command of the fictitious device service that manages our fictitious camera.</p> <p>For example sake, let's launch a command to set the scan depth of <code>countcamera1</code> (the name of the single human/dog counting camera device in EdgeX right now). The first task to launch a request to set the scan depth is to get the URL for the command to <code>set</code> or write a new scan depth on the device. Return to the results of the request to get a list of the commands by the device name above.</p> <p>Locate and copy the URL and path for the <code>set</code> depth command. Below is a picture containing a slice of the JSON returned by the GET request above and desired <code>set</code> Command URL highlighted - yours will vary based on IDs.</p> <p></p>"},{"location":"walk-through/Ch-WalkthroughCommands/#walkthrough-actuation-command","title":"Walkthrough - Actuation Command","text":"<p>Use either the Postman or Curl tab below to walkthrough actuating the device.</p> PostmanCurl <p>Make a PUT request to <code>http://localhost:59882/api/v2/device/name/countcamera1/ScanDepth</code> with the following body.</p> <pre><code>{\"depth\":\"9\"}\n</code></pre> <p>Warning</p> <p>Notice that the URL above is a combination of both the command URL and path you found from your command list.</p> <p>Make a curl PUT request as shown below.</p> <pre><code>curl -X PUT -d '{\"depth\":\"9\"}' localhost:59882/api/v2/device/name/countcamera1/ScanDepth\n</code></pre> <p>Warning</p> <p>Notice that the URL above is a combination of both the command URL and path you found from your command list.</p>"},{"location":"walk-through/Ch-WalkthroughCommands/#check-command-service-log","title":"Check Command Service Log","text":"<p>Again, because no device service (or device) actually exists, core command will respond with a <code>Failed to send a http request</code> error. However, checking the logging output will prove that the core command micro service did receive the request and attempted to call on the non-existent device service (at the address provided for the device service - defined earlier in this walkthrough) to issue the actuating command.  To see the core command service log issue the following Docker command :</p> <p><pre><code>docker logs edgex-core-command\n</code></pre> The last lines of the log entries should highlight the attempt to contact the non-existent device.</p> <pre><code>level=ERROR ts=2021-09-16T20:50:09.965368572Z app=core-command source=http.go:47 X-Correlation-ID=49cc97f5-1e84-4a46-9eb5-543ae8bd5284 msg=\"failed to send a http request -&gt; Put \\\"camera-device-service:59990/api/v2/device/name/countcamera1/ScanDepth?\\\": unsupported protocol scheme \\\"camera-device-service\\\"\"\n...\n</code></pre> <p>&lt;Back Next&gt;</p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/","title":"Defining your device","text":"<p>A device profile can be thought of as a template or as a type or classification of device. General characteristics about the type of device, the data theses devices provide, and how to command them is all provided in a device profile. Other pages within this document set provide more details about a device profile and its purpose (see core metadata  to start). It is typical that as part of the reference information setup sequence, the device service provides the device profiles for the types of devices it manages.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#device-profile","title":"Device Profile","text":"<p>See core metadata API for more details.</p> <p>Our fictitious device service will manage only the human/dog counting camera, so it only needs to make one <code>POST</code> request to create the monitoring camera device profile. Since device profiles are often represented in YAML, you make a multi-part form-data <code>POST</code> with the device profile file (find the example profile here) to create the Camera Monitor profile.</p> <p>If you explore the sample profile, you will see that the profile begins with some general information.</p> <pre><code>  name: \"camera-monitor-profile\"\nmanufacturer: \"IOTech\"\nmodel: \"Cam12345\"\nlabels: - \"camera\"\ndescription: \"Human and canine camera monitor profile\"\n</code></pre> <p>Each profile has a unique name along with a description, manufacturer, model and collection of labels to assist in queries for particular profiles. These are relatively straightforward attributes of a profile.</p> <p>EdgeX 2.0<p>As of Ireland/V2, device profile names may only contain unreserved characters which are ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_~</p> </p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#resources-and-commands","title":"Resources and Commands","text":"<p>The device profile defines how to communicate with any device that abides by the profile. In particular, it defines the <code>deviceResources</code> and <code>deviceCommands</code> used to send requests to the device (via the device service).  See the Device Profile documentation for more background on each of these.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#understanding-device-resources","title":"Understanding Device Resources","text":"<p>The device profile describes the elements of data that can be obtained from the device or sensor and how to change a setting on a device or sensor.  The data that can be obtained or the setting that can be changed are called resources or more precisely they are referred to as device resources in Edgex.  Learn more about <code>deviceReources</code> in the Device Profile documentation.</p> <p>In this walkthrough example, there are two pieces of data we want to be able to get or read from the camera:  dog and human counts.  Therefore, both are represented as device resources in the device profile.  Additionally, we want to be able to set two settings on the camera:  the scan depth and snapshot duration.  These are also represented as device resources in the device profile.</p> <pre><code>  deviceResources:\n-\nname: \"HumanCount\"\nisHidden: false  #is hidden is false by default so this is just making it explicit for purpose of the walkthrough demonstration\ndescription: \"Number of people on camera\"\nproperties:\nvalueType:  \"Int16\"\nreadWrite: \"R\"  #designates that this property can only be read and not set\ndefaultValue: \"0\"\n-\nname: \"CanineCount\"\nisHidden: false\ndescription: \"Number of dogs on camera\"\nproperties:\nvalueType:  \"Int16\"\nreadWrite: \"R\"  #designates that this property can only be read and not set\ndefaultValue: \"0\"\n-\nname: \"ScanDepth\"\nisHidden: false\ndescription: \"Get/set the scan depth\"\nproperties:\nvalueType:  \"Int16\"\nreadWrite: \"RW\"  #designates that this property can be read or set\ndefaultValue: \"0\"\n\n-\nname: \"SnapshotDuration\"\nisHidden: false\ndescription: \"Get the snaphot duration\"\nproperties:\nvalueType:  \"Int16\"\nreadWrite: \"RW\"  #designates that this property can be read or set\ndefaultValue: \"0\"\n</code></pre>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#understanding-device-commands","title":"Understanding Device Commands","text":"<p>Command or more precisely device commands specify access to reads and writes for multiple simultaneous device resources.  In other words, device commands allow you to ask for multiple pieces of data from a sensor at one time (or set multiple settings at one time).  In this example, we can request both human and dog counts in one request by establishing a device command that specifies the request for both.  Get more details on <code>deviceCommands</code> in the Device Profile documentation.</p> <pre><code>  deviceCommands:\n-\nname: \"Counts\"\nreadWrite: \"R\"\nisHidden: false\nresourceOperations:\n- { deviceResource: \"HumanCount\" }\n- { deviceResource: \"CanineCount\" }\n</code></pre> <p>EdgeX 2.0</p> <p>As of the Ireland release, device commands are automatically created by EdgeX for any device resource that are not specified as hidden (that is where isHidden is set to false or is simply left off the device resource) in the profile.  Therefore, you would not define a device command to provide access to a single device resource unless you need to restrict the read/write access to that device resource.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#walkthrough-device-profile","title":"Walkthrough - Device Profile","text":"<p>Use either the Postman or Curl tab below to walkthrough uploading the device profile.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#download-the-device-profile","title":"Download the Device Profile","text":"<p>Click on the link below to download and save the device profile (YAML) to your system.</p> <p>EdgeX_CameraMonitorProfile.yml</p> <p>Note</p> <p>Device profiles are stored in core metadata.  Therefore, note that the calls in the walkthrough are to the metadata service, which defaults to port 59881.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#upload-the-device-profile-to-edgex","title":"Upload the Device Profile to EdgeX","text":"PostmanCurl <p>Make a POST request to <code>http://localhost:59881/api/v2/deviceprofile/uploadfile</code>.  The request should not include any additional headers (leave the defaults).  In the Body, make sure \"form-data\" is selected and set the Key to <code>file</code> and then select the device profile file where you saved it (as shown below).</p> <p></p> <p>If your API call is successful, you will get a generated id for your new <code>DeviceProfile</code> in the response area.</p> <p></p> <p>Make a curl POST request as shown below.</p> <pre><code>curl -X POST -F 'file=@/path/to/your/profile/here/EdgeX_CameraMonitorProfile.yml' http://localhost:59881/api/v2/deviceprofile/uploadfile\n</code></pre> <p>If your API call is successful, you will get a generated id for your new <code>DeviceProfile</code> in the response area.</p> <p></p> <p>Warning</p> <p>Note that the file location in the curl command above needs to be replaced with your actual file location path.  Also, if you do not save the device profile file to <code>EdgeX_CameraMonitorProfile.yml</code>, then you will need to replace the file name as well.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceProfile/#test-the-get-api","title":"Test the GET API","text":"<p>If you make a GET call to the <code>http://localhost:59881/api/v2/deviceprofile/all</code> URL (with Postman or curl) you will get a listing (in JSON) of all the device profiles (and all of its associated <code>deviceResource</code> and <code>deviceCommand</code>) currently defined in your instance of EdgeX, including the one you just added.</p> <p>&lt;Back Next&gt;</p>"},{"location":"walk-through/Ch-WalkthroughDeviceService/","title":"Register your device service","text":"<p>Our next task in this walkthrough is to have the device service register or define itself in EdgeX. That is, it can proclaim to EdgeX that \"I have arrived and am functional.\"</p>"},{"location":"walk-through/Ch-WalkthroughDeviceService/#register-with-core-configuration-and-registration","title":"Register with Core Configuration and Registration","text":"<p>Part of that registration process of the device service, indeed any EdgeX micro service, is to register itself with the core configuration &amp; registration. In this process, the micro service provides its location to the Config/Reg micro service and picks up any new/latest configuration information from this central service. Since there is no real device service in this walkthrough demonstration, this part of the inter-micro service exchange is not explored here.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceService/#device-service","title":"Device Service","text":"<p>See core metadata API for more details.</p> <p>At this point in your walkthrough, the device service must create a representative instance of itself in core metadata. It is in this registration that the device service is given an address that allows core command or any EdgeX service to communicate with it. </p> <p>The name of the device service must be unique across all of EdgeX.  When registering a device service, the initial admin state can be provided. The administrative state (aka admin state) provides control of the device service by man or other systems. It can be set to <code>LOCKED</code> or <code>UNLOCKED</code>. When a device service is set to <code>LOCKED</code>, it is not suppose to respond to any command requests nor send data from the devices. See Admin State documentation for more details.</p> <p>EdgeX 2.0<p>As of Ireland/V2, device service names may only contain unreserved characters which are ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_~</p> </p>"},{"location":"walk-through/Ch-WalkthroughDeviceService/#walkthrough-device-service","title":"Walkthrough - Device Service","text":"<p>Use either the Postman or Curl tab below to walkthrough creating the <code>DeviceService</code>.</p> PostmanCurl <p>Make a POST request to <code>http://localhost:59881/api/v2/deviceservice</code> with the following body:</p> <pre><code>{\n\"apiVersion\": \"v2\",\n\"service\": {\n\"name\": \"camera-control-device-service\",\n\"description\": \"Manage human and dog counting cameras\",\n\"adminState\": \"UNLOCKED\",\n\"labels\": [\n\"camera\",\n\"counter\"\n],\n\"baseAddress\": \"camera-device-service:59990\"\n}\n}\n</code></pre> <p>Be sure that you are POSTing raw data, not form-encoded data.  If your API call is successful, you will get a generated ID for your new <code>DeviceService</code> in the response area.</p> <p>Make a curl POST request as shown below.</p> <pre><code>curl -X 'POST' 'http://localhost:59881/api/v2/deviceservice' -d '[{\"apiVersion\": \"v2\",\"service\": {\"name\": \"camera-control-device-service\",\"description\": \"Manage human and dog counting cameras\", \"adminState\": \"UNLOCKED\", \"labels\": [\"camera\",\"counter\"], \"baseAddress\": \"camera-device-service:59990\"}}]'\n</code></pre> <p>If your API call is successful, you will get a generated ID for your new <code>DeviceService</code>.</p>"},{"location":"walk-through/Ch-WalkthroughDeviceService/#test-the-get-api","title":"Test the GET API","text":"<p>If you make a GET call to the <code>http://localhost:59881/api/v2/deviceservice/all</code> URL (with Postman or curl) you will get a listing (in JSON) of all the device services currently defined in your instance of EdgeX, including the one you just added.</p> <p>&lt;Back Next&gt;</p>"},{"location":"walk-through/Ch-WalkthroughExporting/","title":"Exporting your device data","text":"<p>Great, so the data sent by the camera device makes its way to core data. How can that data be sent to an enterprise system or the Cloud? How can that data be used by an edge analytics system (like a rules engine) to actuate on a device?</p>"},{"location":"walk-through/Ch-WalkthroughExporting/#getting-data-to-the-rules-engine","title":"Getting data to the rules engine","text":"<p>By default, data is already passed from the core data service to application services (app services) via Redis Pub/Sub messaging.  Alternately, the data can be supplied between the two via MQTT.  A preconfigured application service is provided with the EdgeX default Docker Compose files that gets this data and routes it to the eKuiper rules engine.  The application service is called <code>app-service-rules</code> (see below).  More specifically, it is an app service configurable.</p> <pre><code>  app-service-rules:\ncontainer_name: edgex-app-rules-engine\ndepends_on:\n- consul\n- data\nenvironment:\nCLIENTS_CORE_COMMAND_HOST: edgex-core-command\nCLIENTS_CORE_DATA_HOST: edgex-core-data\nCLIENTS_CORE_METADATA_HOST: edgex-core-metadata\nCLIENTS_SUPPORT_NOTIFICATIONS_HOST: edgex-support-notifications\nCLIENTS_SUPPORT_SCHEDULER_HOST: edgex-support-scheduler\nDATABASES_PRIMARY_HOST: edgex-redis\nEDGEX_PROFILE: rules-engine\nEDGEX_SECURITY_SECRET_STORE: \"false\"\nMESSAGEQUEUE_HOST: edgex-redis\nREGISTRY_HOST: edgex-core-consul\nSERVICE_HOST: edgex-app-rules-engine\nTRIGGER_EDGEXMESSAGEBUS_PUBLISHHOST_HOST: edgex-redis\nTRIGGER_EDGEXMESSAGEBUS_SUBSCRIBEHOST_HOST: edgex-redis\nhostname: edgex-app-rules-engine\nimage: edgexfoundry/app-service-configurable:2.0.1\nnetworks:\nedgex-network: {}\nports:\n- 127.0.0.1:59701:59701/tcp\nread_only: true\nsecurity_opt:\n- no-new-privileges:true\nuser: 2002:2001\n</code></pre>"},{"location":"walk-through/Ch-WalkthroughExporting/#seeing-the-data-export","title":"Seeing the data export","text":"<p>The log level of any EdgeX micro service is set to <code>INFO</code> by default.  If you tune the log level of the app-service-rules micro service to <code>DEBUG</code>, you can see <code>Event</code>s pass through the app service on the way to the rules engine.</p>"},{"location":"walk-through/Ch-WalkthroughExporting/#set-the-log-level","title":"Set the log level","text":"<p>To set the log level of any service, open the Consul UI in a browser by visiting <code>http://[host]:8500</code>.  When the Consul UI opens, click on the Key/Value tab on the top of the screen.</p> <p></p> <p>On the Key/Value display page, click on <code>edgex</code> &gt; <code>appservices</code> &gt; <code>2.0</code> &gt; <code>app-rules-engine</code> &gt; <code>Writable</code> &gt; <code>LogLevel</code>.  In the Value entry field that presents itself, replace <code>INFO</code> with <code>DEBUG</code> and hit the <code>Save</code> button.</p> <p></p>"},{"location":"walk-through/Ch-WalkthroughExporting/#view-the-service-log","title":"View the service log","text":"<p>The log level change will be picked up by the application service.  In a terminal window, execute the Docker command below to view the service log.</p> <pre><code>docker logs -f edgex-app-rules-engine\n</code></pre> <p>Now push another event/reading into core data as you did earlier (see Send Event).  You should see each new event/reading created by acknowledged by the app service.  With the right application service and rules engine configuration, the event/reading data is published to the rules engine topic where it can then be picked up and used by the rules engine service to trigger commands just as you did manually in this walkthrough.</p> <p></p>"},{"location":"walk-through/Ch-WalkthroughExporting/#exporting-data-to-anywhere","title":"Exporting data to anywhere","text":"<p>You can create an additional application service to get the data to another application or service, REST endpoint, MQTT topic, cloud provider, and more.  See the Getting Started guide on exporting data for more information on how to use another app service configurable to get EdgeX data to any client.</p>"},{"location":"walk-through/Ch-WalkthroughExporting/#building-your-own-solutions","title":"Building your own solutions","text":"<p>Congratulations, you've made it all the way through the Walkthrough tutorial!</p> <p>&lt;Back</p>"},{"location":"walk-through/Ch-WalkthroughProvision/","title":"Provision a device","text":"<p>In the last act of setup, a device service often discovers and provisions devices (either statically or dynamically) and that it is going to manage on the part of EdgeX. Note the word \"often\" in the last sentence. Not all device services will discover new devices or provision them right away. Depending on the type of device and how the devices communicate, it is up to the device service to determine how/when to provision a device. In some cases, the provisioning may be triggered by a human request of the device service once everything is in place and once the human can provide the information the device service needs to physically connected to the device.</p>"},{"location":"walk-through/Ch-WalkthroughProvision/#device","title":"Device","text":"<p>See core metadata API for more details.</p> <p>For the sake of this demonstration, the call to core metadata will provision the human/dog counting monitor camera as if the device service discovered it (by some unknown means) and provisioned the device as part of some startup process. To create a <code>Device</code>, it must be associated to a <code>DeviceProfile</code>, a <code>DeviceService</code>, and contain one or more <code>Protocols</code> that define how and where to communicate with the device (possibly providing its address). </p> <p>When creating a device, you specify both the admin state (just as you did for a device service) and an operating state. The operating state (aka op state) provides an indication on the part of EdgeX about the internal operating status of the device. The operating state is not set externally (as by another system or man), it is a signal from within EdgeX (and potentially the device service itself) about the condition of the device. The operating state of the device may be either <code>UP</code> or <code>DOWN</code> (it may alsy be <code>UNKNOWN</code> if the state cannot be determined). When the operating state of the device is <code>DOWN</code>, it is either experiencing some difficulty or going through some process (for example an upgrade) which does not allow it to function in its normal capacity.</p>"},{"location":"walk-through/Ch-WalkthroughProvision/#walkthrough-device","title":"Walkthrough - Device","text":"<p>Use either the Postman or Curl tab below to walkthrough creating the <code>Device</code>.</p> PostmanCurl <p>Make a POST request to <code>http://localhost:59881/api/v2/device</code> with the following body:</p> <pre><code>    [\n{\n\"apiVersion\": \"v2\",\n\"device\": {\n\"name\": \"countcamera1\",\n\"description\": \"human and dog counting camera #1\",\n\"adminState\": \"UNLOCKED\",\n\"operatingState\": \"UP\",\n\"labels\": [\n\"camera\",\"counter\"\n],\n\"location\": \"{lat:45.45,long:47.80}\",\n\"serviceName\": \"camera-control-device-service\",\n\"profileName\": \"camera-monitor-profile\",\n\"protocols\": {\n\"camera-protocol\": {\n\"camera-address\": \"localhost\",\n\"port\": \"1234\",\n\"unitID\": \"1\"\n}\n},\n\"notify\": false\n}\n}\n]\n</code></pre> <p>Be sure that you are POSTing raw data, not form-encoded data.  If your API call is successful, you will get a generated ID for your new <code>Device</code> in the response area.</p> <p>Note</p> <p>The <code>camera-monitor-profile</code> was created by the device profile uploaded in a previous walkthrough step. The <code>camera-control-device-service</code> was created in the last walkthough step.  These names must match the previously created EdgeX objects in order to successfully provision your device.</p> <p>EdgeX 2.0</p> <p>As of Ireland/V2, device names may only contain unreserved characters which are ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_~</p> <p>Make a curl POST request as shown below.</p> <pre><code>curl -X 'POST' 'http://localhost:59881/api/v2/device' -d '[{\"apiVersion\": \"v2\", \"device\": {\"name\": \"countcamera1\",\"description\": \"human and dog counting camera #1\",\"adminState\": \"UNLOCKED\",\"operatingState\": \"UP\",\"labels\": [\"camera\",\"counter\"],\"location\": \"{lat:45.45,long:47.80}\",\"serviceName\": \"camera-control-device-service\",\"profileName\": \"camera-monitor-profile\",\"protocols\": {\"camera-protocol\": {\"camera-address\": \"localhost\",\"port\": \"1234\",\"unitID\": \"1\"}},\"notify\": false}}]'\n</code></pre> <p>If your API call is successful, you will get a generated ID (a UUID) for your new <code>Device</code>.</p> <p>Note</p> <p>The <code>camera-monitor-profile</code> was created by the device profile uploaded in a previous walkthrough step. The <code>camera-control-device-service</code> was created in the last walkthough step.  These names must match the previously created EdgeX objects in order to successfully provision your device.</p> <p>EdgeX 2.0</p> <p>As of Ireland/V2, device names may only contain unreserved characters which are ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_~</p>"},{"location":"walk-through/Ch-WalkthroughProvision/#test-the-get-api","title":"Test the GET API","text":"<p>Ensure the monitor camera is among the devices known to core metadata.  If you make a GET call to the <code>http://localhost:59881/api/v2/device/all</code> URL (with Postman or curl) you will get a listing (in JSON) of all the devices currently defined in your instance of EdgeX that should include the one you just added.</p> <p>There are many additional APIs on core metadata to retrieve a <code>DeviceProfile</code>, <code>Device</code>, <code>DeviceService</code>, etc. As an example, here is one to find all devices associated to a given <code>DeviceProfile</code>.</p> <pre><code>curl -X GET http://localhost:59881/api/v2/device/profile/name/camera-monitor-profile | json_pp\n</code></pre> <p>&lt;Back Next&gt;</p>"},{"location":"walk-through/Ch-WalkthroughReading/","title":"Sending events and reading data","text":"<p>In the real world, the human/dog counting camera would start to take pictures, count beings, and send that data to EdgeX. To simulate this activity in this section of the walkthrough, you will make core data API calls as if you were the camera's device and device service.  That is, you will report human and dog counts to core data in the form of event/reading objects.</p>"},{"location":"walk-through/Ch-WalkthroughReading/#send-an-eventreading","title":"Send an Event/Reading","text":"<p>See core data API for more details.</p> <p>Data is submitted to core data as an <code>Event</code> object. An event is a collection of sensor readings from a device (associated to a device by its name) at a particular point in time. A <code>Reading</code> object in an <code>Event</code> object is a particular value sensed by the device and associated to a Device Resource (by name) to provide context to the reading. </p> <p>So, the human/dog counting camera might determine that there are 5 people and 3 dogs in the space it is monitoring. In the EdgeX vernacular, the device service upon receiving these sensed values from the camera device would create an <code>Event</code> with two <code>Reading</code>s - one <code>Reading</code> would contain the key/value pair of HumanCount:5 and the other <code>Reading</code> would contain the key/value pair of CanineCount:3.</p> <p>The device service, on creating the <code>Event</code> and associated <code>Reading</code> objects would transmit this information to core data via REST call.</p>"},{"location":"walk-through/Ch-WalkthroughReading/#walkthrough-send-event","title":"Walkthrough - Send Event","text":"<p>Use either the Postman or Curl tab below to walkthrough sending an <code>Event</code> with <code>Reading</code>s to core data.</p> PostmanCurl <p>Make a POST request to `http://localhost:59880/api/v2/event/camera-monitor-profile/countcamera1/HumanCount with the body below.</p> <pre><code>        {\n\"apiVersion\": \"v2\",\n\"event\": {\n\"apiVersion\": \"v2\",\n\"deviceName\": \"countcamera1\",\n\"profileName\": \"camera-monitor-profile\",\n\"sourceName\": \"HumanCount\",\n\"id\": \"d5471d59-2810-419a-8744-18eb8fa03465\",\n\"origin\": 1602168089665565200,\n\"readings\": [\n{\n\"id\": \"7003cacc-0e00-4676-977c-4e58b9612abd\",\n\"origin\": 1602168089665565200,\n\"deviceName\": \"countcamera1\",\n\"resourceName\": \"HumanCount\",\n\"profileName\": \"camera-monitor-profile\",\n\"valueType\": \"Int16\",\n\"value\": \"5\"\n},\n{\n\"id\": \"7003cacc-0e00-4676-977c-4e58b9612abe\",\n\"origin\": 1602168089665565200,\n\"deviceName\": \"countcamera1\",\n\"resourceName\": \"CanineCount\",\n\"profileName\": \"camera-monitor-profile\",\n\"valueType\": \"Int16\",\n\"value\": \"3\"\n}                        ]\n}\n}\n</code></pre> <p>If your API call is successful, you will get a generated ID for your new <code>Event</code> as shown in the image below.</p> <p></p> <p>Note</p> <p>Notice that the POST request URL contains the device profile name, the device name and the device resource (or device command) associated with the device that is providing the event.</p> <p>Make a curl POST request as shown below.</p> <pre><code>curl -X POST -d '{\"apiVersion\": \"v2\",\"event\": {\"apiVersion\": \"v2\",\"deviceName\": \"countcamera1\",\"profileName\": \"camera-monitor-profile\",\"sourceName\": \"HumanCount\",\"id\":\"d5471d59-2810-419a-8744-18eb8fa03464\",\"origin\": 1602168089665565200,\"readings\": [{\"id\": \"7003cacc-0e00-4676-977c-4e58b9612abc\",\"origin\": 1602168089665565200,\"deviceName\": \"countcamera1\",\"resourceName\": \"HumanCount\",\"profileName\": \"camera-monitor-profile\",\"valueType\": \"Int16\",\"value\": \"5\"},{\"id\": \"7003cacc-0e00-4676-977c-4e58b9612abf\",\"origin\":1602168089665565200,\"deviceName\": \"countcamera1\",\"resourceName\": \"CanineCount\",\"profileName\": \"camera-monitor-profile\",\"valueType\": \"Int16\",\"value\": \"3\"}]}}' localhost:59880/api/v2/event/camera-monitor-profile/countcamera1/HumanCount\n</code></pre> <p></p> <p>Note</p> <p>Notice that the POST request URL contains the device profile name, the device name and the device resource (or device command) associated with the device that is providing the event.</p>"},{"location":"walk-through/Ch-WalkthroughReading/#origin-timestamp","title":"Origin Timestamp","text":"<p>The device service will supply an origin property in the <code>Event</code> and <code>Reading</code> object to suggest the time (in Epoch timestamp/milliseconds format) at which the data was sensed/collected.</p> <p>Note</p> <p>Smart devices will often timestamp sensor data and this timestamp can be used as the origin timestamp. In cases where the sensor/device is unable to provide a timestamp (\"dumb\" or brownfield sensors), it is the device service that creates a timestamp for the sensor data that it be applied as the origin timestamp for the device.</p>"},{"location":"walk-through/Ch-WalkthroughReading/#exploring-eventsreadings","title":"Exploring Events/Readings","text":"<p>Now that an <code>Event</code> and associated <code>Readings</code> have been sent to core data, you can use the core data API to explore that data that is now stored in the database.</p> <p>Recall from a previous walkthrough step, you checked that no data was yet stored in core data. Make a similar call to see event records have now been sent into core data..</p>"},{"location":"walk-through/Ch-WalkthroughReading/#walkthrough-query-eventsreadings","title":"Walkthrough - Query Events/Readings","text":"<p>Use either the Postman or Curl tab below to walkthrough getting the list of events.</p> PostmanCurl <p>Make a GET request to retrieve the <code>Event</code>s associated to the <code>countcamera1</code> device: <code>http://localhost:59880/api/v2/event/device/name/countcamera1</code>.</p> <p>Make a GET request to retrieve the <code>Reading</code>s associated to the <code>countcamera1</code> device: <code>http://localhost:59880/api/v2/reading/device/name/countcamera1</code>.</p> <p>Make a curl GET requests to retrieve 10 of the last <code>Event</code>s associated to the <code>countcamera1</code> device and to retrieve 10 of the human count readings associated to <code>countcamera1</code></p> <pre><code>curl -X GET localhost:59880/api/v2/event/device/name/countcamera1 | json_pp\ncurl -X GET localhost:59880/api/v2/reading/device/name/countcamera1 | json_pp\n</code></pre> <p>There are many additional APIs on core data to retrieve <code>Event</code> and <code>Reading</code> data. As an example, here is one to find all events inside of a start and end time range.</p> <pre><code>curl -X GET localhost:59880/api/v2/event/start/1602168089665560000/end/1602168089665570000 | json_pp\n</code></pre> <p>&lt;Back Next&gt;</p>"},{"location":"walk-through/Ch-WalkthroughSetup/","title":"Setup up your environment","text":""},{"location":"walk-through/Ch-WalkthroughSetup/#install-docker-docker-compose-edgex-foundry","title":"Install Docker, Docker Compose &amp; EdgeX Foundry","text":"<p>To explore EdgeX and walk through it's APIs and how it works, you will need:</p> <ul> <li>Docker</li> <li>Docker Compose</li> <li>EdgeX Foundry (the base set of containers)</li> </ul> <p>If you have not already done so, proceed to Getting Started using Docker for how to get these tools and run EdgeX Foundry.  If you have the tools and EdgeX already installed and running, you can proceed to the Walkthrough Use Case.</p>"},{"location":"walk-through/Ch-WalkthroughSetup/#install-postman-optional","title":"Install Postman (optional)","text":"<p>You can follow this walkthrough making HTTP calls from the command-line with a tool like <code>curl</code>, but it's easier if you use a graphical user interface tool designed for exercising REST APIs. For that we like to use Postman. You can download the native Postman app for your operating system.</p> <p>Note</p> <p>Example <code>curl</code> commands will be provided with the walk through so that you can run this walkthrough without Postman.</p> <p>Alert</p> <p>It is assumed that for the purposes of this walk through demonstration</p> <ul> <li>all API micro services are running on <code>localhost</code>. If this is not     the case, substitute your hostname for localhost.</li> <li>any POST call has the associated CONTENT-TYPE=application/JSON     header associated to it unless explicitly stated otherwise.</li> </ul> <p></p> <p>&lt;Back Next&gt;</p>"},{"location":"walk-through/Ch-WalkthroughUseCase/","title":"Example Use Case","text":"<p>In order to explore EdgeX, its services and APIs and to generally understand how it works, it helps to see EdgeX under the context of a real use case.  While you exercise the APIs under a hypothetical situation in order to demonstrate how EdgeX works, the use case is very much a valid example of how EdgeX can be used to collect data from devices and actuate control of the sensed environment it monitors.  People (and animal) counting camera technology as highlighted in this walk through does exist and has been connected to EdgeX before.</p>"},{"location":"walk-through/Ch-WalkthroughUseCase/#object-counting-camera","title":"Object Counting Camera","text":"<p>Suppose you had a new device that you wanted to connect to EdgeX. The device was a camera that took a picture and then had an on-board chip that analyzed the picture and reported the number of humans and canines (dogs) it saw.</p> <p></p> <p>How often the camera takes a picture and reports its findings can be configured. In fact, the camera device could be sent two actuation commands - that is sent two requests for which it must respond and do something. You could send a request to set its time, in seconds, between picture snapshots (and then calculating the number of humans and dogs it finds in that resulting image). You could also request it to set the scan depth, in feet, of the camera - that is set how far out the camera looks. The farther out it looks, the less accurate the count of humans and dogs becomes, so this is something the manufacturer wants to allow the user to set based on use case needs.</p> <p></p>"},{"location":"walk-through/Ch-WalkthroughUseCase/#edgex-device-representation","title":"EdgeX Device Representation","text":"<p>In EdgeX, the camera must be represented by a <code>Device</code>. Each <code>Device</code> is managed by a device service. The device service communicates with the underlying hardware - in this case the camera - in the protocol of choice for that <code>Device</code>. The device service collects the data from the devices it manages and passes that data into the rest of EdgeX.</p> <p>EdgeX 2.0</p> <p>As of the Ireland release, a device service will, by default, publish data into a message bus which can be subscribed to by core data and/or application services.  You'll learn more about these later in this walkthrough.  Alternately, a device service can send data directly to core data.</p> <p>In this case, the device service would be collecting the count of humans and dogs that the camera sees. The device service also serves to translate the request for actuation from EdgeX and the rest of the world into protocol requests that the physical device would understand. So in this example, the device service would take requests to set the duration between snapshots and to set the scan depth and translate those requests into protocol commands that the camera understood.</p> <p></p> <p>Exactly how this camera physically connects to the host machine running EdgeX and how the device service works under the covers to communicate with the camera Device is immaterial for the point of this demonstration.</p> <p>&lt;Back Next&gt;</p>"}]}